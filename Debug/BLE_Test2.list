
BLE_Test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bd8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08006d14  08006d14  00016d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006f64  08006f64  00016f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006f68  08006f68  00016f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000004  08006f6c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  20000028  08006f90  00020028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003d  200000c4  08007029  000200c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000104  08007066  00020104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_APP_CONTEXT 00000098  20000118  08007077  00020118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000174  200001b0  0800710f  000201b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000324  0800710f  00020324  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 16 .debug_info   0002cd3c  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 00005304  00000000  00000000  0004cf1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 00001ed0  00000000  00000000  00052220  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00001c88  00000000  00000000  000540f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  00029c55  00000000  00000000  00055d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   0001a543  00000000  00000000  0007f9cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    000eb7c0  00000000  00000000  00099f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      0000007b  00000000  00000000  001856d0  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00007d94  00000000  00000000  0018574c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001b0 	.word	0x200001b0
 8000158:	00000000 	.word	0x00000000
 800015c:	08006cfc 	.word	0x08006cfc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001b4 	.word	0x200001b4
 8000178:	08006cfc 	.word	0x08006cfc

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <APPD_EnableCPU2+0x34>)
 8000194:	1d3c      	adds	r4, r7, #4
 8000196:	461d      	mov	r5, r3
 8000198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a0:	c403      	stmia	r4!, {r0, r1}
 80001a2:	8022      	strh	r2, [r4, #0]
 80001a4:	3402      	adds	r4, #2
 80001a6:	0c13      	lsrs	r3, r2, #16
 80001a8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001aa:	f005 fc1d 	bl	80059e8 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	4618      	mov	r0, r3
 80001b2:	f004 ff24 	bl	8004ffe <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001b6:	bf00      	nop
}
 80001b8:	3720      	adds	r7, #32
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bdb0      	pop	{r4, r5, r7, pc}
 80001be:	bf00      	nop
 80001c0:	08006d14 	.word	0x08006d14

080001c4 <LL_C2_PWR_SetPowerMode>:
  *         @arg @ref LL_PWR_MODE_STANDBY
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80001d2:	f023 0207 	bic.w	r2, r3, #7
 80001d6:	4905      	ldr	r1, [pc, #20]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4313      	orrs	r3, r2
 80001dc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr
 80001ec:	58000400 	.word	0x58000400

080001f0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80001f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001fc:	689b      	ldr	r3, [r3, #8]
 80001fe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000202:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4313      	orrs	r3, r2
 800020a:	608b      	str	r3, [r1, #8]
}
 800020c:	bf00      	nop
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr

08000218 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 800021c:	f000 f817 	bl	800024e <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000220:	4903      	ldr	r1, [pc, #12]	; (8000230 <APPE_Init+0x18>)
 8000222:	2000      	movs	r0, #0
 8000224:	f000 fcce 	bl	8000bc4 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000228:	f000 f81e 	bl	8000268 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 800022c:	bf00      	nop
}
 800022e:	bd80      	pop	{r7, pc}
 8000230:	200002f8 	.word	0x200002f8

08000234 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN FD */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	80fb      	strh	r3, [r7, #6]
//  switch (GPIO_Pin)
//  {
//  case BUTTON_SW1_Pin:
	UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800023e:	2100      	movs	r1, #0
 8000240:	2002      	movs	r0, #2
 8000242:	f006 fc15 	bl	8006a70 <UTIL_SEQ_SetTask>
////    break;
////  default:
////    break;
////  }
//  return;
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}

0800024e <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800024e:	b580      	push	{r7, lr}
 8000250:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000252:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000256:	f7ff ffcb 	bl	80001f0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800025a:	f006 fac9 	bl	80067f0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800025e:	2004      	movs	r0, #4
 8000260:	f7ff ffb0 	bl	80001c4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000264:	bf00      	nop
}
 8000266:	bd80      	pop	{r7, pc}

08000268 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b088      	sub	sp, #32
 800026c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800026e:	f005 fa1f 	bl	80056b0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000272:	4a11      	ldr	r2, [pc, #68]	; (80002b8 <appe_Tl_Init+0x50>)
 8000274:	2100      	movs	r1, #0
 8000276:	2008      	movs	r0, #8
 8000278:	f006 fbda 	bl	8006a30 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800027c:	4b0f      	ldr	r3, [pc, #60]	; (80002bc <appe_Tl_Init+0x54>)
 800027e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <appe_Tl_Init+0x58>)
 8000282:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000284:	463b      	mov	r3, r7
 8000286:	4619      	mov	r1, r3
 8000288:	480e      	ldr	r0, [pc, #56]	; (80002c4 <appe_Tl_Init+0x5c>)
 800028a:	f005 f8a1 	bl	80053d0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800028e:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <appe_Tl_Init+0x60>)
 8000290:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000292:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <appe_Tl_Init+0x64>)
 8000294:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000296:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <appe_Tl_Init+0x68>)
 8000298:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800029a:	f240 533c 	movw	r3, #1340	; 0x53c
 800029e:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80002a0:	f107 0308 	add.w	r3, r7, #8
 80002a4:	4618      	mov	r0, r3
 80002a6:	f005 fb15 	bl	80058d4 <TL_MM_Init>

  TL_Enable();
 80002aa:	f005 f9fb 	bl	80056a4 <TL_Enable>

  return;
 80002ae:	bf00      	nop
}
 80002b0:	3720      	adds	r7, #32
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	08005409 	.word	0x08005409
 80002bc:	20030724 	.word	0x20030724
 80002c0:	080002d5 	.word	0x080002d5
 80002c4:	080002eb 	.word	0x080002eb
 80002c8:	2003093c 	.word	0x2003093c
 80002cc:	20030830 	.word	0x20030830
 80002d0:	200301e8 	.word	0x200301e8

080002d4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80002de:	bf00      	nop
}
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr

080002ea <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80002ea:	b580      	push	{r7, lr}
 80002ec:	b082      	sub	sp, #8
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 80002f2:	f7ff ff4b 	bl	800018c <APPD_EnableCPU2>

  APP_BLE_Init( );
 80002f6:	f005 fcad 	bl	8005c54 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80002fa:	2100      	movs	r1, #0
 80002fc:	2001      	movs	r0, #1
 80002fe:	f006 fa89 	bl	8006814 <UTIL_LPM_SetOffMode>
  return;
 8000302:	bf00      	nop
}
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}

0800030a <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 800030a:	b480      	push	{r7}
 800030c:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 800030e:	bf00      	nop
}
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr

08000318 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000322:	f04f 30ff 	mov.w	r0, #4294967295
 8000326:	f006 faa3 	bl	8006870 <UTIL_SEQ_Run>
}
 800032a:	bf00      	nop
 800032c:	3708      	adds	r7, #8
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}

08000332 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000332:	b580      	push	{r7, lr}
 8000334:	b082      	sub	sp, #8
 8000336:	af00      	add	r7, sp, #0
 8000338:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800033a:	2100      	movs	r1, #0
 800033c:	2008      	movs	r0, #8
 800033e:	f006 fb97 	bl	8006a70 <UTIL_SEQ_SetTask>
  return;
 8000342:	bf00      	nop
}
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}

0800034a <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800034a:	b580      	push	{r7, lr}
 800034c:	b082      	sub	sp, #8
 800034e:	af00      	add	r7, sp, #0
 8000350:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000352:	2002      	movs	r0, #2
 8000354:	f006 fbf2 	bl	8006b3c <UTIL_SEQ_SetEvt>
  return;
 8000358:	bf00      	nop
}
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000368:	2002      	movs	r0, #2
 800036a:	f006 fc05 	bl	8006b78 <UTIL_SEQ_WaitEvt>
  return;
 800036e:	bf00      	nop
}
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
	...

08000378 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <LL_EXTI_EnableIT_0_31+0x24>)
 8000382:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000386:	4905      	ldr	r1, [pc, #20]	; (800039c <LL_EXTI_EnableIT_0_31+0x24>)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4313      	orrs	r3, r2
 800038c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	58000800 	.word	0x58000800

080003a0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80003a8:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	4904      	ldr	r1, [pc, #16]	; (80003c0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4313      	orrs	r3, r2
 80003b2:	600b      	str	r3, [r1, #0]

}
 80003b4:	bf00      	nop
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr
 80003c0:	58000800 	.word	0x58000800

080003c4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80003ca:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <ReadRtcSsrValue+0x3c>)
 80003cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003ce:	b29b      	uxth	r3, r3
 80003d0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <ReadRtcSsrValue+0x3c>)
 80003d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003d6:	b29b      	uxth	r3, r3
 80003d8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80003da:	e005      	b.n	80003e8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <ReadRtcSsrValue+0x3c>)
 80003e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003e4:	b29b      	uxth	r3, r3
 80003e6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80003e8:	687a      	ldr	r2, [r7, #4]
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d1f5      	bne.n	80003dc <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80003f0:	683b      	ldr	r3, [r7, #0]
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40002800 	.word	0x40002800

08000404 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	460a      	mov	r2, r1
 800040e:	71fb      	strb	r3, [r7, #7]
 8000410:	4613      	mov	r3, r2
 8000412:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000414:	79ba      	ldrb	r2, [r7, #6]
 8000416:	491d      	ldr	r1, [pc, #116]	; (800048c <LinkTimerAfter+0x88>)
 8000418:	4613      	mov	r3, r2
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	4413      	add	r3, r2
 800041e:	00db      	lsls	r3, r3, #3
 8000420:	440b      	add	r3, r1
 8000422:	3315      	adds	r3, #21
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000428:	7bfb      	ldrb	r3, [r7, #15]
 800042a:	2b06      	cmp	r3, #6
 800042c:	d009      	beq.n	8000442 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800042e:	7bfa      	ldrb	r2, [r7, #15]
 8000430:	4916      	ldr	r1, [pc, #88]	; (800048c <LinkTimerAfter+0x88>)
 8000432:	4613      	mov	r3, r2
 8000434:	005b      	lsls	r3, r3, #1
 8000436:	4413      	add	r3, r2
 8000438:	00db      	lsls	r3, r3, #3
 800043a:	440b      	add	r3, r1
 800043c:	3314      	adds	r3, #20
 800043e:	79fa      	ldrb	r2, [r7, #7]
 8000440:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000442:	79fa      	ldrb	r2, [r7, #7]
 8000444:	4911      	ldr	r1, [pc, #68]	; (800048c <LinkTimerAfter+0x88>)
 8000446:	4613      	mov	r3, r2
 8000448:	005b      	lsls	r3, r3, #1
 800044a:	4413      	add	r3, r2
 800044c:	00db      	lsls	r3, r3, #3
 800044e:	440b      	add	r3, r1
 8000450:	3315      	adds	r3, #21
 8000452:	7bfa      	ldrb	r2, [r7, #15]
 8000454:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000456:	79fa      	ldrb	r2, [r7, #7]
 8000458:	490c      	ldr	r1, [pc, #48]	; (800048c <LinkTimerAfter+0x88>)
 800045a:	4613      	mov	r3, r2
 800045c:	005b      	lsls	r3, r3, #1
 800045e:	4413      	add	r3, r2
 8000460:	00db      	lsls	r3, r3, #3
 8000462:	440b      	add	r3, r1
 8000464:	3314      	adds	r3, #20
 8000466:	79ba      	ldrb	r2, [r7, #6]
 8000468:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800046a:	79ba      	ldrb	r2, [r7, #6]
 800046c:	4907      	ldr	r1, [pc, #28]	; (800048c <LinkTimerAfter+0x88>)
 800046e:	4613      	mov	r3, r2
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	4413      	add	r3, r2
 8000474:	00db      	lsls	r3, r3, #3
 8000476:	440b      	add	r3, r1
 8000478:	3315      	adds	r3, #21
 800047a:	79fa      	ldrb	r2, [r7, #7]
 800047c:	701a      	strb	r2, [r3, #0]

  return;
 800047e:	bf00      	nop
}
 8000480:	3714      	adds	r7, #20
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	20000028 	.word	0x20000028

08000490 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000490:	b480      	push	{r7}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	460a      	mov	r2, r1
 800049a:	71fb      	strb	r3, [r7, #7]
 800049c:	4613      	mov	r3, r2
 800049e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80004a0:	4b29      	ldr	r3, [pc, #164]	; (8000548 <LinkTimerBefore+0xb8>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	79ba      	ldrb	r2, [r7, #6]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	d032      	beq.n	8000512 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80004ac:	79ba      	ldrb	r2, [r7, #6]
 80004ae:	4927      	ldr	r1, [pc, #156]	; (800054c <LinkTimerBefore+0xbc>)
 80004b0:	4613      	mov	r3, r2
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	4413      	add	r3, r2
 80004b6:	00db      	lsls	r3, r3, #3
 80004b8:	440b      	add	r3, r1
 80004ba:	3314      	adds	r3, #20
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80004c0:	7bfa      	ldrb	r2, [r7, #15]
 80004c2:	4922      	ldr	r1, [pc, #136]	; (800054c <LinkTimerBefore+0xbc>)
 80004c4:	4613      	mov	r3, r2
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	4413      	add	r3, r2
 80004ca:	00db      	lsls	r3, r3, #3
 80004cc:	440b      	add	r3, r1
 80004ce:	3315      	adds	r3, #21
 80004d0:	79fa      	ldrb	r2, [r7, #7]
 80004d2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80004d4:	79fa      	ldrb	r2, [r7, #7]
 80004d6:	491d      	ldr	r1, [pc, #116]	; (800054c <LinkTimerBefore+0xbc>)
 80004d8:	4613      	mov	r3, r2
 80004da:	005b      	lsls	r3, r3, #1
 80004dc:	4413      	add	r3, r2
 80004de:	00db      	lsls	r3, r3, #3
 80004e0:	440b      	add	r3, r1
 80004e2:	3315      	adds	r3, #21
 80004e4:	79ba      	ldrb	r2, [r7, #6]
 80004e6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80004e8:	79fa      	ldrb	r2, [r7, #7]
 80004ea:	4918      	ldr	r1, [pc, #96]	; (800054c <LinkTimerBefore+0xbc>)
 80004ec:	4613      	mov	r3, r2
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	4413      	add	r3, r2
 80004f2:	00db      	lsls	r3, r3, #3
 80004f4:	440b      	add	r3, r1
 80004f6:	3314      	adds	r3, #20
 80004f8:	7bfa      	ldrb	r2, [r7, #15]
 80004fa:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80004fc:	79ba      	ldrb	r2, [r7, #6]
 80004fe:	4913      	ldr	r1, [pc, #76]	; (800054c <LinkTimerBefore+0xbc>)
 8000500:	4613      	mov	r3, r2
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	4413      	add	r3, r2
 8000506:	00db      	lsls	r3, r3, #3
 8000508:	440b      	add	r3, r1
 800050a:	3314      	adds	r3, #20
 800050c:	79fa      	ldrb	r2, [r7, #7]
 800050e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000510:	e014      	b.n	800053c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000512:	79fa      	ldrb	r2, [r7, #7]
 8000514:	490d      	ldr	r1, [pc, #52]	; (800054c <LinkTimerBefore+0xbc>)
 8000516:	4613      	mov	r3, r2
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	4413      	add	r3, r2
 800051c:	00db      	lsls	r3, r3, #3
 800051e:	440b      	add	r3, r1
 8000520:	3315      	adds	r3, #21
 8000522:	79ba      	ldrb	r2, [r7, #6]
 8000524:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000526:	79ba      	ldrb	r2, [r7, #6]
 8000528:	4908      	ldr	r1, [pc, #32]	; (800054c <LinkTimerBefore+0xbc>)
 800052a:	4613      	mov	r3, r2
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	4413      	add	r3, r2
 8000530:	00db      	lsls	r3, r3, #3
 8000532:	440b      	add	r3, r1
 8000534:	3314      	adds	r3, #20
 8000536:	79fa      	ldrb	r2, [r7, #7]
 8000538:	701a      	strb	r2, [r3, #0]
  return;
 800053a:	bf00      	nop
}
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	200000b8 	.word	0x200000b8
 800054c:	20000028 	.word	0x20000028

08000550 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800055a:	4b4e      	ldr	r3, [pc, #312]	; (8000694 <linkTimer+0x144>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	b2db      	uxtb	r3, r3
 8000560:	2b06      	cmp	r3, #6
 8000562:	d118      	bne.n	8000596 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000564:	4b4b      	ldr	r3, [pc, #300]	; (8000694 <linkTimer+0x144>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4b4b      	ldr	r3, [pc, #300]	; (8000698 <linkTimer+0x148>)
 800056c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800056e:	4a49      	ldr	r2, [pc, #292]	; (8000694 <linkTimer+0x144>)
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000574:	79fa      	ldrb	r2, [r7, #7]
 8000576:	4949      	ldr	r1, [pc, #292]	; (800069c <linkTimer+0x14c>)
 8000578:	4613      	mov	r3, r2
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	4413      	add	r3, r2
 800057e:	00db      	lsls	r3, r3, #3
 8000580:	440b      	add	r3, r1
 8000582:	3315      	adds	r3, #21
 8000584:	2206      	movs	r2, #6
 8000586:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000588:	4b45      	ldr	r3, [pc, #276]	; (80006a0 <linkTimer+0x150>)
 800058a:	f04f 32ff 	mov.w	r2, #4294967295
 800058e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	81fb      	strh	r3, [r7, #14]
 8000594:	e078      	b.n	8000688 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000596:	f000 f909 	bl	80007ac <ReturnTimeElapsed>
 800059a:	4603      	mov	r3, r0
 800059c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800059e:	79fa      	ldrb	r2, [r7, #7]
 80005a0:	493e      	ldr	r1, [pc, #248]	; (800069c <linkTimer+0x14c>)
 80005a2:	4613      	mov	r3, r2
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	4413      	add	r3, r2
 80005a8:	00db      	lsls	r3, r3, #3
 80005aa:	440b      	add	r3, r1
 80005ac:	3308      	adds	r3, #8
 80005ae:	6819      	ldr	r1, [r3, #0]
 80005b0:	89fb      	ldrh	r3, [r7, #14]
 80005b2:	79fa      	ldrb	r2, [r7, #7]
 80005b4:	4419      	add	r1, r3
 80005b6:	4839      	ldr	r0, [pc, #228]	; (800069c <linkTimer+0x14c>)
 80005b8:	4613      	mov	r3, r2
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	4413      	add	r3, r2
 80005be:	00db      	lsls	r3, r3, #3
 80005c0:	4403      	add	r3, r0
 80005c2:	3308      	adds	r3, #8
 80005c4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80005c6:	79fa      	ldrb	r2, [r7, #7]
 80005c8:	4934      	ldr	r1, [pc, #208]	; (800069c <linkTimer+0x14c>)
 80005ca:	4613      	mov	r3, r2
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	4413      	add	r3, r2
 80005d0:	00db      	lsls	r3, r3, #3
 80005d2:	440b      	add	r3, r1
 80005d4:	3308      	adds	r3, #8
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80005da:	4b2e      	ldr	r3, [pc, #184]	; (8000694 <linkTimer+0x144>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	4619      	mov	r1, r3
 80005e2:	4a2e      	ldr	r2, [pc, #184]	; (800069c <linkTimer+0x14c>)
 80005e4:	460b      	mov	r3, r1
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	440b      	add	r3, r1
 80005ea:	00db      	lsls	r3, r3, #3
 80005ec:	4413      	add	r3, r2
 80005ee:	3308      	adds	r3, #8
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	68ba      	ldr	r2, [r7, #8]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d337      	bcc.n	8000668 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80005f8:	4b26      	ldr	r3, [pc, #152]	; (8000694 <linkTimer+0x144>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80005fe:	7b7a      	ldrb	r2, [r7, #13]
 8000600:	4926      	ldr	r1, [pc, #152]	; (800069c <linkTimer+0x14c>)
 8000602:	4613      	mov	r3, r2
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	4413      	add	r3, r2
 8000608:	00db      	lsls	r3, r3, #3
 800060a:	440b      	add	r3, r1
 800060c:	3315      	adds	r3, #21
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000612:	e013      	b.n	800063c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000614:	7b7a      	ldrb	r2, [r7, #13]
 8000616:	4921      	ldr	r1, [pc, #132]	; (800069c <linkTimer+0x14c>)
 8000618:	4613      	mov	r3, r2
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	4413      	add	r3, r2
 800061e:	00db      	lsls	r3, r3, #3
 8000620:	440b      	add	r3, r1
 8000622:	3315      	adds	r3, #21
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000628:	7b7a      	ldrb	r2, [r7, #13]
 800062a:	491c      	ldr	r1, [pc, #112]	; (800069c <linkTimer+0x14c>)
 800062c:	4613      	mov	r3, r2
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	4413      	add	r3, r2
 8000632:	00db      	lsls	r3, r3, #3
 8000634:	440b      	add	r3, r1
 8000636:	3315      	adds	r3, #21
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800063c:	7b3b      	ldrb	r3, [r7, #12]
 800063e:	2b06      	cmp	r3, #6
 8000640:	d00b      	beq.n	800065a <linkTimer+0x10a>
 8000642:	7b3a      	ldrb	r2, [r7, #12]
 8000644:	4915      	ldr	r1, [pc, #84]	; (800069c <linkTimer+0x14c>)
 8000646:	4613      	mov	r3, r2
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	4413      	add	r3, r2
 800064c:	00db      	lsls	r3, r3, #3
 800064e:	440b      	add	r3, r1
 8000650:	3308      	adds	r3, #8
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	68ba      	ldr	r2, [r7, #8]
 8000656:	429a      	cmp	r2, r3
 8000658:	d2dc      	bcs.n	8000614 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800065a:	7b7a      	ldrb	r2, [r7, #13]
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	4611      	mov	r1, r2
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff fecf 	bl	8000404 <LinkTimerAfter>
 8000666:	e00f      	b.n	8000688 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <linkTimer+0x144>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b2da      	uxtb	r2, r3
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	4611      	mov	r1, r2
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ff0c 	bl	8000490 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <linkTimer+0x144>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	b2da      	uxtb	r2, r3
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <linkTimer+0x148>)
 8000680:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000682:	4a04      	ldr	r2, [pc, #16]	; (8000694 <linkTimer+0x144>)
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000688:	89fb      	ldrh	r3, [r7, #14]
}
 800068a:	4618      	mov	r0, r3
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200000b8 	.word	0x200000b8
 8000698:	200000b9 	.word	0x200000b9
 800069c:	20000028 	.word	0x20000028
 80006a0:	200000bc 	.word	0x200000bc

080006a4 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	460a      	mov	r2, r1
 80006ae:	71fb      	strb	r3, [r7, #7]
 80006b0:	4613      	mov	r3, r2
 80006b2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80006b4:	4b39      	ldr	r3, [pc, #228]	; (800079c <UnlinkTimer+0xf8>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	79fa      	ldrb	r2, [r7, #7]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d111      	bne.n	80006e4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80006c0:	4b36      	ldr	r3, [pc, #216]	; (800079c <UnlinkTimer+0xf8>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b36      	ldr	r3, [pc, #216]	; (80007a0 <UnlinkTimer+0xfc>)
 80006c8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80006ca:	79fa      	ldrb	r2, [r7, #7]
 80006cc:	4935      	ldr	r1, [pc, #212]	; (80007a4 <UnlinkTimer+0x100>)
 80006ce:	4613      	mov	r3, r2
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	4413      	add	r3, r2
 80006d4:	00db      	lsls	r3, r3, #3
 80006d6:	440b      	add	r3, r1
 80006d8:	3315      	adds	r3, #21
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	4b2f      	ldr	r3, [pc, #188]	; (800079c <UnlinkTimer+0xf8>)
 80006e0:	701a      	strb	r2, [r3, #0]
 80006e2:	e03e      	b.n	8000762 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80006e4:	79fa      	ldrb	r2, [r7, #7]
 80006e6:	492f      	ldr	r1, [pc, #188]	; (80007a4 <UnlinkTimer+0x100>)
 80006e8:	4613      	mov	r3, r2
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	4413      	add	r3, r2
 80006ee:	00db      	lsls	r3, r3, #3
 80006f0:	440b      	add	r3, r1
 80006f2:	3314      	adds	r3, #20
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80006f8:	79fa      	ldrb	r2, [r7, #7]
 80006fa:	492a      	ldr	r1, [pc, #168]	; (80007a4 <UnlinkTimer+0x100>)
 80006fc:	4613      	mov	r3, r2
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	4413      	add	r3, r2
 8000702:	00db      	lsls	r3, r3, #3
 8000704:	440b      	add	r3, r1
 8000706:	3315      	adds	r3, #21
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800070c:	79f9      	ldrb	r1, [r7, #7]
 800070e:	7bfa      	ldrb	r2, [r7, #15]
 8000710:	4824      	ldr	r0, [pc, #144]	; (80007a4 <UnlinkTimer+0x100>)
 8000712:	460b      	mov	r3, r1
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	440b      	add	r3, r1
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	4403      	add	r3, r0
 800071c:	3315      	adds	r3, #21
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b2d8      	uxtb	r0, r3
 8000722:	4920      	ldr	r1, [pc, #128]	; (80007a4 <UnlinkTimer+0x100>)
 8000724:	4613      	mov	r3, r2
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	4413      	add	r3, r2
 800072a:	00db      	lsls	r3, r3, #3
 800072c:	440b      	add	r3, r1
 800072e:	3315      	adds	r3, #21
 8000730:	4602      	mov	r2, r0
 8000732:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000734:	7bbb      	ldrb	r3, [r7, #14]
 8000736:	2b06      	cmp	r3, #6
 8000738:	d013      	beq.n	8000762 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800073a:	79f9      	ldrb	r1, [r7, #7]
 800073c:	7bba      	ldrb	r2, [r7, #14]
 800073e:	4819      	ldr	r0, [pc, #100]	; (80007a4 <UnlinkTimer+0x100>)
 8000740:	460b      	mov	r3, r1
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	440b      	add	r3, r1
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	4403      	add	r3, r0
 800074a:	3314      	adds	r3, #20
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b2d8      	uxtb	r0, r3
 8000750:	4914      	ldr	r1, [pc, #80]	; (80007a4 <UnlinkTimer+0x100>)
 8000752:	4613      	mov	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	4413      	add	r3, r2
 8000758:	00db      	lsls	r3, r3, #3
 800075a:	440b      	add	r3, r1
 800075c:	3314      	adds	r3, #20
 800075e:	4602      	mov	r2, r0
 8000760:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000762:	79fa      	ldrb	r2, [r7, #7]
 8000764:	490f      	ldr	r1, [pc, #60]	; (80007a4 <UnlinkTimer+0x100>)
 8000766:	4613      	mov	r3, r2
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	4413      	add	r3, r2
 800076c:	00db      	lsls	r3, r3, #3
 800076e:	440b      	add	r3, r1
 8000770:	330c      	adds	r3, #12
 8000772:	2201      	movs	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <UnlinkTimer+0xf8>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	2b06      	cmp	r3, #6
 800077e:	d107      	bne.n	8000790 <UnlinkTimer+0xec>
 8000780:	79bb      	ldrb	r3, [r7, #6]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d104      	bne.n	8000790 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <UnlinkTimer+0x104>)
 8000788:	f04f 32ff 	mov.w	r2, #4294967295
 800078c:	601a      	str	r2, [r3, #0]
  }

  return;
 800078e:	bf00      	nop
 8000790:	bf00      	nop
}
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	200000b8 	.word	0x200000b8
 80007a0:	200000b9 	.word	0x200000b9
 80007a4:	20000028 	.word	0x20000028
 80007a8:	200000bc 	.word	0x200000bc

080007ac <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <ReturnTimeElapsed+0x70>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ba:	d026      	beq.n	800080a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80007bc:	f7ff fe02 	bl	80003c4 <ReadRtcSsrValue>
 80007c0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <ReturnTimeElapsed+0x70>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d805      	bhi.n	80007d8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80007cc:	4b13      	ldr	r3, [pc, #76]	; (800081c <ReturnTimeElapsed+0x70>)
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	1ad3      	subs	r3, r2, r3
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	e00a      	b.n	80007ee <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <ReturnTimeElapsed+0x74>)
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80007e4:	4b0d      	ldr	r3, [pc, #52]	; (800081c <ReturnTimeElapsed+0x70>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	683a      	ldr	r2, [r7, #0]
 80007ea:	4413      	add	r3, r2
 80007ec:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <ReturnTimeElapsed+0x78>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	461a      	mov	r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	fb02 f303 	mul.w	r3, r2, r3
 80007fa:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <ReturnTimeElapsed+0x7c>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	40d3      	lsrs	r3, r2
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	e001      	b.n	800080e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	b29b      	uxth	r3, r3
}
 8000812:	4618      	mov	r0, r3
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200000bc 	.word	0x200000bc
 8000820:	200001d2 	.word	0x200001d2
 8000824:	200001d1 	.word	0x200001d1
 8000828:	200001d0 	.word	0x200001d0

0800082c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d108      	bne.n	800084e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800083c:	f7ff fdc2 	bl	80003c4 <ReadRtcSsrValue>
 8000840:	4602      	mov	r2, r0
 8000842:	4b24      	ldr	r3, [pc, #144]	; (80008d4 <RestartWakeupCounter+0xa8>)
 8000844:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000846:	2003      	movs	r0, #3
 8000848:	f001 f9a1 	bl	8001b8e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 800084c:	e03e      	b.n	80008cc <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800084e:	88fb      	ldrh	r3, [r7, #6]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d803      	bhi.n	800085c <RestartWakeupCounter+0x30>
 8000854:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <RestartWakeupCounter+0xac>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d002      	beq.n	8000862 <RestartWakeupCounter+0x36>
      Value -= 1;
 800085c:	88fb      	ldrh	r3, [r7, #6]
 800085e:	3b01      	subs	r3, #1
 8000860:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000862:	bf00      	nop
 8000864:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <RestartWakeupCounter+0xb0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	2b00      	cmp	r3, #0
 8000872:	d0f7      	beq.n	8000864 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000874:	4b19      	ldr	r3, [pc, #100]	; (80008dc <RestartWakeupCounter+0xb0>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <RestartWakeupCounter+0xb0>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000888:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <RestartWakeupCounter+0xb4>)
 800088c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000890:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000892:	2003      	movs	r0, #3
 8000894:	f001 f989 	bl	8001baa <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <RestartWakeupCounter+0xb8>)
 800089a:	695b      	ldr	r3, [r3, #20]
 800089c:	0c1b      	lsrs	r3, r3, #16
 800089e:	041b      	lsls	r3, r3, #16
 80008a0:	88fa      	ldrh	r2, [r7, #6]
 80008a2:	4910      	ldr	r1, [pc, #64]	; (80008e4 <RestartWakeupCounter+0xb8>)
 80008a4:	4313      	orrs	r3, r2
 80008a6:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80008a8:	f7ff fd8c 	bl	80003c4 <ReadRtcSsrValue>
 80008ac:	4602      	mov	r2, r0
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <RestartWakeupCounter+0xa8>)
 80008b0:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <RestartWakeupCounter+0xb0>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	689a      	ldr	r2, [r3, #8]
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <RestartWakeupCounter+0xb0>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80008c4:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80008c6:	f3af 8000 	nop.w
  return ;
 80008ca:	bf00      	nop
}
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200000bc 	.word	0x200000bc
 80008d8:	200001d0 	.word	0x200001d0
 80008dc:	200001cc 	.word	0x200001cc
 80008e0:	58000800 	.word	0x58000800
 80008e4:	40002800 	.word	0x40002800

080008e8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80008ee:	4b47      	ldr	r3, [pc, #284]	; (8000a0c <RescheduleTimerList+0x124>)
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008fa:	d108      	bne.n	800090e <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80008fc:	bf00      	nop
 80008fe:	4b44      	ldr	r3, [pc, #272]	; (8000a10 <RescheduleTimerList+0x128>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	2b00      	cmp	r3, #0
 800090c:	d1f7      	bne.n	80008fe <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800090e:	4b40      	ldr	r3, [pc, #256]	; (8000a10 <RescheduleTimerList+0x128>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	689a      	ldr	r2, [r3, #8]
 8000916:	4b3e      	ldr	r3, [pc, #248]	; (8000a10 <RescheduleTimerList+0x128>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000920:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000922:	4b3c      	ldr	r3, [pc, #240]	; (8000a14 <RescheduleTimerList+0x12c>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000928:	7bfa      	ldrb	r2, [r7, #15]
 800092a:	493b      	ldr	r1, [pc, #236]	; (8000a18 <RescheduleTimerList+0x130>)
 800092c:	4613      	mov	r3, r2
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	4413      	add	r3, r2
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	440b      	add	r3, r1
 8000936:	3308      	adds	r3, #8
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800093c:	f7ff ff36 	bl	80007ac <ReturnTimeElapsed>
 8000940:	4603      	mov	r3, r0
 8000942:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000944:	88fb      	ldrh	r3, [r7, #6]
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	429a      	cmp	r2, r3
 800094a:	d205      	bcs.n	8000958 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000950:	4b32      	ldr	r3, [pc, #200]	; (8000a1c <RescheduleTimerList+0x134>)
 8000952:	2201      	movs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]
 8000956:	e04d      	b.n	80009f4 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000958:	88fb      	ldrh	r3, [r7, #6]
 800095a:	4a31      	ldr	r2, [pc, #196]	; (8000a20 <RescheduleTimerList+0x138>)
 800095c:	8812      	ldrh	r2, [r2, #0]
 800095e:	b292      	uxth	r2, r2
 8000960:	4413      	add	r3, r2
 8000962:	461a      	mov	r2, r3
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	4293      	cmp	r3, r2
 8000968:	d906      	bls.n	8000978 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800096a:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <RescheduleTimerList+0x138>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000970:	4b2a      	ldr	r3, [pc, #168]	; (8000a1c <RescheduleTimerList+0x134>)
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]
 8000976:	e03d      	b.n	80009f4 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	b29a      	uxth	r2, r3
 800097c:	88fb      	ldrh	r3, [r7, #6]
 800097e:	1ad3      	subs	r3, r2, r3
 8000980:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000982:	4b26      	ldr	r3, [pc, #152]	; (8000a1c <RescheduleTimerList+0x134>)
 8000984:	2201      	movs	r2, #1
 8000986:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000988:	e034      	b.n	80009f4 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800098a:	7bfa      	ldrb	r2, [r7, #15]
 800098c:	4922      	ldr	r1, [pc, #136]	; (8000a18 <RescheduleTimerList+0x130>)
 800098e:	4613      	mov	r3, r2
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	4413      	add	r3, r2
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	440b      	add	r3, r1
 8000998:	3308      	adds	r3, #8
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	88fb      	ldrh	r3, [r7, #6]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d20a      	bcs.n	80009b8 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80009a2:	7bfa      	ldrb	r2, [r7, #15]
 80009a4:	491c      	ldr	r1, [pc, #112]	; (8000a18 <RescheduleTimerList+0x130>)
 80009a6:	4613      	mov	r3, r2
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	4413      	add	r3, r2
 80009ac:	00db      	lsls	r3, r3, #3
 80009ae:	440b      	add	r3, r1
 80009b0:	3308      	adds	r3, #8
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	e013      	b.n	80009e0 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80009b8:	7bfa      	ldrb	r2, [r7, #15]
 80009ba:	4917      	ldr	r1, [pc, #92]	; (8000a18 <RescheduleTimerList+0x130>)
 80009bc:	4613      	mov	r3, r2
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	4413      	add	r3, r2
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	440b      	add	r3, r1
 80009c6:	3308      	adds	r3, #8
 80009c8:	6819      	ldr	r1, [r3, #0]
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	7bfa      	ldrb	r2, [r7, #15]
 80009ce:	1ac9      	subs	r1, r1, r3
 80009d0:	4811      	ldr	r0, [pc, #68]	; (8000a18 <RescheduleTimerList+0x130>)
 80009d2:	4613      	mov	r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4413      	add	r3, r2
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	4403      	add	r3, r0
 80009dc:	3308      	adds	r3, #8
 80009de:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80009e0:	7bfa      	ldrb	r2, [r7, #15]
 80009e2:	490d      	ldr	r1, [pc, #52]	; (8000a18 <RescheduleTimerList+0x130>)
 80009e4:	4613      	mov	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	4413      	add	r3, r2
 80009ea:	00db      	lsls	r3, r3, #3
 80009ec:	440b      	add	r3, r1
 80009ee:	3315      	adds	r3, #21
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
 80009f6:	2b06      	cmp	r3, #6
 80009f8:	d1c7      	bne.n	800098a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80009fa:	89bb      	ldrh	r3, [r7, #12]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff15 	bl	800082c <RestartWakeupCounter>

  return ;
 8000a02:	bf00      	nop
}
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40002800 	.word	0x40002800
 8000a10:	200001cc 	.word	0x200001cc
 8000a14:	200000b8 	.word	0x200000b8
 8000a18:	20000028 	.word	0x20000028
 8000a1c:	200000c0 	.word	0x200000c0
 8000a20:	200001d4 	.word	0x200001d4

08000a24 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8000a2e:	617b      	str	r3, [r7, #20]
  return(result);
 8000a30:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000a36:	4b5e      	ldr	r3, [pc, #376]	; (8000bb0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	22ca      	movs	r2, #202	; 0xca
 8000a3e:	625a      	str	r2, [r3, #36]	; 0x24
 8000a40:	4b5b      	ldr	r3, [pc, #364]	; (8000bb0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2253      	movs	r2, #83	; 0x53
 8000a48:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000a4a:	4b59      	ldr	r3, [pc, #356]	; (8000bb0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	689a      	ldr	r2, [r3, #8]
 8000a52:	4b57      	ldr	r3, [pc, #348]	; (8000bb0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a5c:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000a5e:	4b55      	ldr	r3, [pc, #340]	; (8000bb4 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000a66:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000a6a:	4953      	ldr	r1, [pc, #332]	; (8000bb8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	4413      	add	r3, r2
 8000a72:	00db      	lsls	r3, r3, #3
 8000a74:	440b      	add	r3, r1
 8000a76:	330c      	adds	r3, #12
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d170      	bne.n	8000b62 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000a80:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000a84:	494c      	ldr	r1, [pc, #304]	; (8000bb8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000a86:	4613      	mov	r3, r2
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	4413      	add	r3, r2
 8000a8c:	00db      	lsls	r3, r3, #3
 8000a8e:	440b      	add	r3, r1
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000a94:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000a98:	4947      	ldr	r1, [pc, #284]	; (8000bb8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	4413      	add	r3, r2
 8000aa0:	00db      	lsls	r3, r3, #3
 8000aa2:	440b      	add	r3, r1
 8000aa4:	3310      	adds	r3, #16
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000aaa:	4b44      	ldr	r3, [pc, #272]	; (8000bbc <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d04e      	beq.n	8000b52 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000ab4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ab8:	493f      	ldr	r1, [pc, #252]	; (8000bb8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000aba:	4613      	mov	r3, r2
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	4413      	add	r3, r2
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	440b      	add	r3, r1
 8000ac4:	330d      	adds	r3, #13
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d125      	bne.n	8000b1a <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000ace:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fde5 	bl	80006a4 <UnlinkTimer>
 8000ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000adc:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000ae4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ae8:	4933      	ldr	r1, [pc, #204]	; (8000bb8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000aea:	4613      	mov	r3, r2
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	4413      	add	r3, r2
 8000af0:	00db      	lsls	r3, r3, #3
 8000af2:	440b      	add	r3, r1
 8000af4:	3304      	adds	r3, #4
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000afc:	4611      	mov	r1, r2
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 fa40 	bl	8000f84 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000b04:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	22ca      	movs	r2, #202	; 0xca
 8000b0c:	625a      	str	r2, [r3, #36]	; 0x24
 8000b0e:	4b28      	ldr	r3, [pc, #160]	; (8000bb0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2253      	movs	r2, #83	; 0x53
 8000b16:	625a      	str	r2, [r3, #36]	; 0x24
 8000b18:	e013      	b.n	8000b42 <HW_TS_RTC_Wakeup_Handler+0x11e>
 8000b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000b24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 f9a1 	bl	8000e70 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000b2e:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	22ca      	movs	r2, #202	; 0xca
 8000b36:	625a      	str	r2, [r3, #36]	; 0x24
 8000b38:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2253      	movs	r2, #83	; 0x53
 8000b40:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000b42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b46:	69fa      	ldr	r2, [r7, #28]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	69b8      	ldr	r0, [r7, #24]
 8000b4c:	f000 faa0 	bl	8001090 <HW_TS_RTC_Int_AppNot>
 8000b50:	e024      	b.n	8000b9c <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8000b52:	f7ff fec9 	bl	80008e8 <RescheduleTimerList>
 8000b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	f383 8810 	msr	PRIMASK, r3
 8000b60:	e01c      	b.n	8000b9c <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000b62:	bf00      	nop
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d0f7      	beq.n	8000b64 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000b88:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000b8c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	22ff      	movs	r2, #255	; 0xff
 8000ba4:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000ba6:	bf00      	nop
}
 8000ba8:	3728      	adds	r7, #40	; 0x28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200001cc 	.word	0x200001cc
 8000bb4:	200000b8 	.word	0x200000b8
 8000bb8:	20000028 	.word	0x20000028
 8000bbc:	200000c0 	.word	0x200000c0
 8000bc0:	58000800 	.word	0x58000800

08000bc4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	6039      	str	r1, [r7, #0]
 8000bce:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000bd0:	4a61      	ldr	r2, [pc, #388]	; (8000d58 <HW_TS_Init+0x194>)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000bd6:	4b60      	ldr	r3, [pc, #384]	; (8000d58 <HW_TS_Init+0x194>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	22ca      	movs	r2, #202	; 0xca
 8000bde:	625a      	str	r2, [r3, #36]	; 0x24
 8000be0:	4b5d      	ldr	r3, [pc, #372]	; (8000d58 <HW_TS_Init+0x194>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2253      	movs	r2, #83	; 0x53
 8000be8:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000bea:	4b5c      	ldr	r3, [pc, #368]	; (8000d5c <HW_TS_Init+0x198>)
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	4a5b      	ldr	r2, [pc, #364]	; (8000d5c <HW_TS_Init+0x198>)
 8000bf0:	f043 0320 	orr.w	r3, r3, #32
 8000bf4:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000bf6:	4b59      	ldr	r3, [pc, #356]	; (8000d5c <HW_TS_Init+0x198>)
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	f003 0307 	and.w	r3, r3, #7
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	f1c3 0304 	rsb	r3, r3, #4
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	4b55      	ldr	r3, [pc, #340]	; (8000d60 <HW_TS_Init+0x19c>)
 8000c0a:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000c0c:	4b53      	ldr	r3, [pc, #332]	; (8000d5c <HW_TS_Init+0x198>)
 8000c0e:	691b      	ldr	r3, [r3, #16]
 8000c10:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000c14:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000c18:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	fa92 f2a2 	rbit	r2, r2
 8000c20:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	40d3      	lsrs	r3, r2
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	3301      	adds	r3, #1
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4b4c      	ldr	r3, [pc, #304]	; (8000d64 <HW_TS_Init+0x1a0>)
 8000c34:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000c36:	4b49      	ldr	r3, [pc, #292]	; (8000d5c <HW_TS_Init+0x198>)
 8000c38:	691b      	ldr	r3, [r3, #16]
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	3301      	adds	r3, #1
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	4b48      	ldr	r3, [pc, #288]	; (8000d68 <HW_TS_Init+0x1a4>)
 8000c48:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000c4a:	4b47      	ldr	r3, [pc, #284]	; (8000d68 <HW_TS_Init+0x1a4>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	4a44      	ldr	r2, [pc, #272]	; (8000d64 <HW_TS_Init+0x1a0>)
 8000c52:	7812      	ldrb	r2, [r2, #0]
 8000c54:	fb02 f303 	mul.w	r3, r2, r3
 8000c58:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000c5c:	4a40      	ldr	r2, [pc, #256]	; (8000d60 <HW_TS_Init+0x19c>)
 8000c5e:	7812      	ldrb	r2, [r2, #0]
 8000c60:	40d3      	lsrs	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d904      	bls.n	8000c78 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000c6e:	4b3f      	ldr	r3, [pc, #252]	; (8000d6c <HW_TS_Init+0x1a8>)
 8000c70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c74:	801a      	strh	r2, [r3, #0]
 8000c76:	e003      	b.n	8000c80 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	4b3b      	ldr	r3, [pc, #236]	; (8000d6c <HW_TS_Init+0x1a8>)
 8000c7e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000c80:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000c84:	f7ff fb8c 	bl	80003a0 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000c88:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000c8c:	f7ff fb74 	bl	8000378 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d143      	bne.n	8000d1e <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c96:	4b36      	ldr	r3, [pc, #216]	; (8000d70 <HW_TS_Init+0x1ac>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000c9c:	4b35      	ldr	r3, [pc, #212]	; (8000d74 <HW_TS_Init+0x1b0>)
 8000c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca2:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	75fb      	strb	r3, [r7, #23]
 8000ca8:	e00c      	b.n	8000cc4 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000caa:	7dfa      	ldrb	r2, [r7, #23]
 8000cac:	4932      	ldr	r1, [pc, #200]	; (8000d78 <HW_TS_Init+0x1b4>)
 8000cae:	4613      	mov	r3, r2
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	4413      	add	r3, r2
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	440b      	add	r3, r1
 8000cb8:	330c      	adds	r3, #12
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000cbe:	7dfb      	ldrb	r3, [r7, #23]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	75fb      	strb	r3, [r7, #23]
 8000cc4:	7dfb      	ldrb	r3, [r7, #23]
 8000cc6:	2b05      	cmp	r3, #5
 8000cc8:	d9ef      	bls.n	8000caa <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000cca:	4b2c      	ldr	r3, [pc, #176]	; (8000d7c <HW_TS_Init+0x1b8>)
 8000ccc:	2206      	movs	r2, #6
 8000cce:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000cd0:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <HW_TS_Init+0x194>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	689a      	ldr	r2, [r3, #8]
 8000cd8:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <HW_TS_Init+0x194>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ce2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <HW_TS_Init+0x194>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <HW_TS_Init+0x194>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000cf8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000cfa:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <HW_TS_Init+0x1bc>)
 8000cfc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d00:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000d02:	2003      	movs	r0, #3
 8000d04:	f000 ff51 	bl	8001baa <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000d08:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <HW_TS_Init+0x194>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	689a      	ldr	r2, [r3, #8]
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HW_TS_Init+0x194>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	e00a      	b.n	8000d34 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HW_TS_Init+0x194>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d002      	beq.n	8000d34 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000d2e:	2003      	movs	r0, #3
 8000d30:	f000 ff2d 	bl	8001b8e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HW_TS_Init+0x194>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	22ff      	movs	r2, #255	; 0xff
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2103      	movs	r1, #3
 8000d42:	2003      	movs	r0, #3
 8000d44:	f000 fee1 	bl	8001b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000d48:	2003      	movs	r0, #3
 8000d4a:	f000 fef8 	bl	8001b3e <HAL_NVIC_EnableIRQ>

  return;
 8000d4e:	bf00      	nop
}
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200001cc 	.word	0x200001cc
 8000d5c:	40002800 	.word	0x40002800
 8000d60:	200001d0 	.word	0x200001d0
 8000d64:	200001d1 	.word	0x200001d1
 8000d68:	200001d2 	.word	0x200001d2
 8000d6c:	200001d4 	.word	0x200001d4
 8000d70:	200000c0 	.word	0x200000c0
 8000d74:	200000bc 	.word	0x200000bc
 8000d78:	20000028 	.word	0x20000028
 8000d7c:	200000b8 	.word	0x200000b8
 8000d80:	58000800 	.word	0x58000800

08000d84 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b08b      	sub	sp, #44	; 0x2c
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	4613      	mov	r3, r2
 8000d92:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d9a:	f3ef 8310 	mrs	r3, PRIMASK
 8000d9e:	61fb      	str	r3, [r7, #28]
  return(result);
 8000da0:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000da2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000da4:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000da6:	e004      	b.n	8000db2 <HW_TS_Create+0x2e>
  {
    loop++;
 8000da8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dac:	3301      	adds	r3, #1
 8000dae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000db2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000db6:	2b05      	cmp	r3, #5
 8000db8:	d80c      	bhi.n	8000dd4 <HW_TS_Create+0x50>
 8000dba:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000dbe:	492b      	ldr	r1, [pc, #172]	; (8000e6c <HW_TS_Create+0xe8>)
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	4413      	add	r3, r2
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	440b      	add	r3, r1
 8000dca:	330c      	adds	r3, #12
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1e9      	bne.n	8000da8 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000dd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dd8:	2b06      	cmp	r3, #6
 8000dda:	d037      	beq.n	8000e4c <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8000ddc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000de0:	4922      	ldr	r1, [pc, #136]	; (8000e6c <HW_TS_Create+0xe8>)
 8000de2:	4613      	mov	r3, r2
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	4413      	add	r3, r2
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	440b      	add	r3, r1
 8000dec:	330c      	adds	r3, #12
 8000dee:	2201      	movs	r2, #1
 8000df0:	701a      	strb	r2, [r3, #0]
 8000df2:	6a3b      	ldr	r3, [r7, #32]
 8000df4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8000dfc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000e00:	491a      	ldr	r1, [pc, #104]	; (8000e6c <HW_TS_Create+0xe8>)
 8000e02:	4613      	mov	r3, r2
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	4413      	add	r3, r2
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	440b      	add	r3, r1
 8000e0c:	3310      	adds	r3, #16
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8000e12:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000e16:	4915      	ldr	r1, [pc, #84]	; (8000e6c <HW_TS_Create+0xe8>)
 8000e18:	4613      	mov	r3, r2
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	4413      	add	r3, r2
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	440b      	add	r3, r1
 8000e22:	330d      	adds	r3, #13
 8000e24:	79fa      	ldrb	r2, [r7, #7]
 8000e26:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8000e28:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000e2c:	490f      	ldr	r1, [pc, #60]	; (8000e6c <HW_TS_Create+0xe8>)
 8000e2e:	4613      	mov	r3, r2
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	4413      	add	r3, r2
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	440b      	add	r3, r1
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000e42:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e4a:	e007      	b.n	8000e5c <HW_TS_Create+0xd8>
 8000e4c:	6a3b      	ldr	r3, [r7, #32]
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8000e56:	2301      	movs	r3, #1
 8000e58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8000e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	372c      	adds	r7, #44	; 0x2c
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	20000028 	.word	0x20000028

08000e70 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8000e7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8000e80:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000e82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000e84:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000e86:	2003      	movs	r0, #3
 8000e88:	f000 fe67 	bl	8001b5a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e8c:	4b37      	ldr	r3, [pc, #220]	; (8000f6c <HW_TS_Stop+0xfc>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	22ca      	movs	r2, #202	; 0xca
 8000e94:	625a      	str	r2, [r3, #36]	; 0x24
 8000e96:	4b35      	ldr	r3, [pc, #212]	; (8000f6c <HW_TS_Stop+0xfc>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2253      	movs	r2, #83	; 0x53
 8000e9e:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000ea0:	79fa      	ldrb	r2, [r7, #7]
 8000ea2:	4933      	ldr	r1, [pc, #204]	; (8000f70 <HW_TS_Stop+0x100>)
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	4413      	add	r3, r2
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	440b      	add	r3, r1
 8000eae:	330c      	adds	r3, #12
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d148      	bne.n	8000f4a <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fbf1 	bl	80006a4 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8000ec2:	4b2c      	ldr	r3, [pc, #176]	; (8000f74 <HW_TS_Stop+0x104>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ec8:	7cfb      	ldrb	r3, [r7, #19]
 8000eca:	2b06      	cmp	r3, #6
 8000ecc:	d135      	bne.n	8000f3a <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000ece:	4b2a      	ldr	r3, [pc, #168]	; (8000f78 <HW_TS_Stop+0x108>)
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eda:	d108      	bne.n	8000eee <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000edc:	bf00      	nop
 8000ede:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <HW_TS_Stop+0xfc>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d1f7      	bne.n	8000ede <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000eee:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <HW_TS_Stop+0xfc>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	689a      	ldr	r2, [r3, #8]
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <HW_TS_Stop+0xfc>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f00:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000f02:	bf00      	nop
 8000f04:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <HW_TS_Stop+0xfc>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0f7      	beq.n	8000f04 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HW_TS_Stop+0xfc>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <HW_TS_Stop+0xfc>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f28:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <HW_TS_Stop+0x10c>)
 8000f2c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f30:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000f32:	2003      	movs	r0, #3
 8000f34:	f000 fe39 	bl	8001baa <HAL_NVIC_ClearPendingIRQ>
 8000f38:	e007      	b.n	8000f4a <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <HW_TS_Stop+0x110>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	7cfa      	ldrb	r2, [r7, #19]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d001      	beq.n	8000f4a <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8000f46:	f7ff fccf 	bl	80008e8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HW_TS_Stop+0xfc>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	22ff      	movs	r2, #255	; 0xff
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 fdf2 	bl	8001b3e <HAL_NVIC_EnableIRQ>
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8000f64:	bf00      	nop
}
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200001cc 	.word	0x200001cc
 8000f70:	20000028 	.word	0x20000028
 8000f74:	200000b8 	.word	0x200000b8
 8000f78:	40002800 	.word	0x40002800
 8000f7c:	58000800 	.word	0x58000800
 8000f80:	200000b9 	.word	0x200000b9

08000f84 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000f90:	79fa      	ldrb	r2, [r7, #7]
 8000f92:	493b      	ldr	r1, [pc, #236]	; (8001080 <HW_TS_Start+0xfc>)
 8000f94:	4613      	mov	r3, r2
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	4413      	add	r3, r2
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	440b      	add	r3, r1
 8000f9e:	330c      	adds	r3, #12
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d103      	bne.n	8000fb0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff60 	bl	8000e70 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000fb0:	f3ef 8310 	mrs	r3, PRIMASK
 8000fb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000fb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000fba:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	f000 fdcc 	bl	8001b5a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000fc2:	4b30      	ldr	r3, [pc, #192]	; (8001084 <HW_TS_Start+0x100>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	22ca      	movs	r2, #202	; 0xca
 8000fca:	625a      	str	r2, [r3, #36]	; 0x24
 8000fcc:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <HW_TS_Start+0x100>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2253      	movs	r2, #83	; 0x53
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8000fd6:	79fa      	ldrb	r2, [r7, #7]
 8000fd8:	4929      	ldr	r1, [pc, #164]	; (8001080 <HW_TS_Start+0xfc>)
 8000fda:	4613      	mov	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	4413      	add	r3, r2
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	440b      	add	r3, r1
 8000fe4:	330c      	adds	r3, #12
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8000fea:	79fa      	ldrb	r2, [r7, #7]
 8000fec:	4924      	ldr	r1, [pc, #144]	; (8001080 <HW_TS_Start+0xfc>)
 8000fee:	4613      	mov	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3308      	adds	r3, #8
 8000ffa:	683a      	ldr	r2, [r7, #0]
 8000ffc:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8000ffe:	79fa      	ldrb	r2, [r7, #7]
 8001000:	491f      	ldr	r1, [pc, #124]	; (8001080 <HW_TS_Start+0xfc>)
 8001002:	4613      	mov	r3, r2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	4413      	add	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	440b      	add	r3, r1
 800100c:	3304      	adds	r3, #4
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fa9b 	bl	8000550 <linkTimer>
 800101a:	4603      	mov	r3, r0
 800101c:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <HW_TS_Start+0x104>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <HW_TS_Start+0x108>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	7c7a      	ldrb	r2, [r7, #17]
 800102c:	429a      	cmp	r2, r3
 800102e:	d002      	beq.n	8001036 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8001030:	f7ff fc5a 	bl	80008e8 <RescheduleTimerList>
 8001034:	e013      	b.n	800105e <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001036:	79fa      	ldrb	r2, [r7, #7]
 8001038:	4911      	ldr	r1, [pc, #68]	; (8001080 <HW_TS_Start+0xfc>)
 800103a:	4613      	mov	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4413      	add	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	440b      	add	r3, r1
 8001044:	3308      	adds	r3, #8
 8001046:	6819      	ldr	r1, [r3, #0]
 8001048:	8a7b      	ldrh	r3, [r7, #18]
 800104a:	79fa      	ldrb	r2, [r7, #7]
 800104c:	1ac9      	subs	r1, r1, r3
 800104e:	480c      	ldr	r0, [pc, #48]	; (8001080 <HW_TS_Start+0xfc>)
 8001050:	4613      	mov	r3, r2
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	4413      	add	r3, r2
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	4403      	add	r3, r0
 800105a:	3308      	adds	r3, #8
 800105c:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <HW_TS_Start+0x100>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	22ff      	movs	r2, #255	; 0xff
 8001066:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001068:	2003      	movs	r0, #3
 800106a:	f000 fd68 	bl	8001b3e <HAL_NVIC_EnableIRQ>
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001078:	bf00      	nop
}
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000028 	.word	0x20000028
 8001084:	200001cc 	.word	0x200001cc
 8001088:	200000b8 	.word	0x200000b8
 800108c:	200000b9 	.word	0x200000b9

08001090 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	460b      	mov	r3, r1
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4798      	blx	r3

  return;
 80010a2:	bf00      	nop
}
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <LL_RCC_LSE_SetDriveCapability>:
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80010b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010ba:	f023 0218 	bic.w	r2, r3, #24
 80010be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b085      	sub	sp, #20
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4013      	ands	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010fa:	68fb      	ldr	r3, [r7, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800110c:	f000 fb1c 	bl	8001748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001110:	f000 f80e 	bl	8001130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001114:	f000 f8ba 	bl	800128c <MX_GPIO_Init>
  MX_RF_Init();
 8001118:	f000 f886 	bl	8001228 <MX_RF_Init>
  MX_RTC_Init();
 800111c:	f000 f88c 	bl	8001238 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 8001120:	f7ff f87a 	bl	8000218 <APPE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UTIL_SEQ_Run(~0);
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f005 fba2 	bl	8006870 <UTIL_SEQ_Run>
 800112c:	e7fa      	b.n	8001124 <main+0x1c>
	...

08001130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b0ae      	sub	sp, #184	; 0xb8
 8001134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001136:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800113a:	2248      	movs	r2, #72	; 0x48
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f005 fdd3 	bl	8006cea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001144:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
 8001154:	615a      	str	r2, [r3, #20]
 8001156:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	2250      	movs	r2, #80	; 0x50
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f005 fdc3 	bl	8006cea <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001164:	f000 fef4 	bl	8001f50 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff ff9e 	bl	80010aa <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800116e:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <SystemClock_Config+0xf4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001176:	4a2b      	ldr	r2, [pc, #172]	; (8001224 <SystemClock_Config+0xf4>)
 8001178:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	4b29      	ldr	r3, [pc, #164]	; (8001224 <SystemClock_Config+0xf4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800118a:	2307      	movs	r3, #7
 800118c:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800118e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001192:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001194:	2301      	movs	r3, #1
 8001196:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800119c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800119e:	2340      	movs	r3, #64	; 0x40
 80011a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011ae:	4618      	mov	r0, r3
 80011b0:	f001 fa68 	bl	8002684 <HAL_RCC_OscConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80011ba:	f000 f8a9 	bl	8001310 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80011be:	236f      	movs	r3, #111	; 0x6f
 80011c0:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80011c2:	2302      	movs	r3, #2
 80011c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ce:	2300      	movs	r3, #0
 80011d0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011de:	2101      	movs	r1, #1
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 fde3 	bl	8002dac <HAL_RCC_ClockConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011ec:	f000 f890 	bl	8001310 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80011f0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80011f4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80011f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011fa:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80011fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001200:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001202:	2300      	movs	r3, #0
 8001204:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001206:	2310      	movs	r3, #16
 8001208:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	4618      	mov	r0, r3
 800120e:	f002 f9dc 	bl	80035ca <HAL_RCCEx_PeriphCLKConfig>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <SystemClock_Config+0xec>
  {
    Error_Handler();
 8001218:	f000 f87a 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800121c:	bf00      	nop
 800121e:	37b8      	adds	r7, #184	; 0xb8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	58000400 	.word	0x58000400

08001228 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_RTC_Init+0x4c>)
 800123e:	4a12      	ldr	r2, [pc, #72]	; (8001288 <MX_RTC_Init+0x50>)
 8001240:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <MX_RTC_Init+0x4c>)
 8001244:	2200      	movs	r2, #0
 8001246:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_RTC_Init+0x4c>)
 800124a:	220f      	movs	r2, #15
 800124c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800124e:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <MX_RTC_Init+0x4c>)
 8001250:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001254:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <MX_RTC_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_RTC_Init+0x4c>)
 800125e:	2200      	movs	r2, #0
 8001260:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <MX_RTC_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_RTC_Init+0x4c>)
 800126a:	2200      	movs	r2, #0
 800126c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_RTC_Init+0x4c>)
 8001270:	f002 fc31 	bl	8003ad6 <HAL_RTC_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800127a:	f000 f849 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200002f8 	.word	0x200002f8
 8001288:	40002800 	.word	0x40002800

0800128c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a0:	2004      	movs	r0, #4
 80012a2:	f7ff ff18 	bl	80010d6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	2002      	movs	r0, #2
 80012a8:	f7ff ff15 	bl	80010d6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ac:	2001      	movs	r0, #1
 80012ae:	f7ff ff12 	bl	80010d6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2121      	movs	r1, #33	; 0x21
 80012b6:	4813      	ldr	r0, [pc, #76]	; (8001304 <MX_GPIO_Init+0x78>)
 80012b8:	f000 fdf6 	bl	8001ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012bc:	2310      	movs	r3, #16
 80012be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <MX_GPIO_Init+0x7c>)
 80012c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	4619      	mov	r1, r3
 80012cc:	480f      	ldr	r0, [pc, #60]	; (800130c <MX_GPIO_Init+0x80>)
 80012ce:	f000 fc7b 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_BLUE_Pin;
 80012d2:	2321      	movs	r3, #33	; 0x21
 80012d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4619      	mov	r1, r3
 80012e6:	4807      	ldr	r0, [pc, #28]	; (8001304 <MX_GPIO_Init+0x78>)
 80012e8:	f000 fc6e 	bl	8001bc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2100      	movs	r1, #0
 80012f0:	200a      	movs	r0, #10
 80012f2:	f000 fc0a 	bl	8001b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80012f6:	200a      	movs	r0, #10
 80012f8:	f000 fc21 	bl	8001b3e <HAL_NVIC_EnableIRQ>

}
 80012fc:	bf00      	nop
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	48000400 	.word	0x48000400
 8001308:	10210000 	.word	0x10210000
 800130c:	48000800 	.word	0x48000800

08001310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <LL_RCC_HSE_SetCapacitorTuning>:
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800132c:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800132e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001336:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800133a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	021b      	lsls	r3, r3, #8
 8001342:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001346:	4313      	orrs	r3, r2
 8001348:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	cafecafe 	.word	0xcafecafe

0800135c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001368:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800136c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800137e:	b480      	push	{r7}
 8001380:	b085      	sub	sp, #20
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001386:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800138a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800138c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4313      	orrs	r3, r2
 8001394:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800139a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4013      	ands	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013a2:	68fb      	ldr	r3, [r7, #12]
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80013b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80013c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013d4:	68fb      	ldr	r3, [r7, #12]
}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */
	#warning “Following code is valid only for P-NUCLEO-WB55 boards and should be reimplemented depending on the target HW and HSE capacitor tuning value storage location.“
	OTP_ID0_t * p_otp;

	/* Read and use HSE_Tuning from OTP */
	p_otp = (OTP_ID0_t *) OTP_Read(0);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f004 fb33 	bl	8005a54 <OTP_Read>
 80013ee:	6078      	str	r0, [r7, #4]
	if (p_otp)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d004      	beq.n	8001400 <HAL_MspInit+0x1e>
	{
	  LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	799b      	ldrb	r3, [r3, #6]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ff90 	bl	8001320 <LL_RCC_HSE_SetCapacitorTuning>
	}
  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001400:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001404:	f7ff ffbb 	bl	800137e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	202e      	movs	r0, #46	; 0x2e
 800140e:	f000 fb7c 	bl	8001b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001412:	202e      	movs	r0, #46	; 0x2e
 8001414:	f000 fb93 	bl	8001b3e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a06      	ldr	r2, [pc, #24]	; (8001448 <HAL_RTC_MspInit+0x28>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d105      	bne.n	800143e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001432:	f7ff ff93 	bl	800135c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001436:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800143a:	f7ff ffb9 	bl	80013b0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40002800 	.word	0x40002800

0800144c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145e:	e7fe      	b.n	800145e <HardFault_Handler+0x4>

08001460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <MemManage_Handler+0x4>

08001466 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800146a:	e7fe      	b.n	800146a <BusFault_Handler+0x4>

0800146c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <UsageFault_Handler+0x4>

08001472 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a0:	f000 f9ac 	bl	80017fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80014ac:	2010      	movs	r0, #16
 80014ae:	f000 fd13 	bl	8001ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80014ba:	f000 fd25 	bl	8001f08 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <RTC_WKUP_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 80014c6:	f7ff faad 	bl	8000a24 <HW_TS_RTC_Wakeup_Handler>
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}

080014ce <IPCC_C1_RX_IRQHandler>:
/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 80014d2:	f005 f83d 	bl	8006550 <HW_IPCC_Rx_Handler>
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}

080014da <IPCC_C1_TX_IRQHandler>:
/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 80014de:	f005 f86f 	bl	80065c0 <HW_IPCC_Tx_Handler>
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80014ec:	4b26      	ldr	r3, [pc, #152]	; (8001588 <SystemInit+0xa0>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80014f2:	4b25      	ldr	r3, [pc, #148]	; (8001588 <SystemInit+0xa0>)
 80014f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014f8:	4a23      	ldr	r2, [pc, #140]	; (8001588 <SystemInit+0xa0>)
 80014fa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001516:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800151a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800151c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001526:	4b19      	ldr	r3, [pc, #100]	; (800158c <SystemInit+0xa4>)
 8001528:	4013      	ands	r3, r2
 800152a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800152c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001530:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001534:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001538:	f023 0305 	bic.w	r3, r3, #5
 800153c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001544:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001548:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800154c:	f023 0301 	bic.w	r3, r3, #1
 8001550:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001558:	4a0d      	ldr	r2, [pc, #52]	; (8001590 <SystemInit+0xa8>)
 800155a:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800155c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001560:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <SystemInit+0xa8>)
 8001562:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800156e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001572:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000ed00 	.word	0xe000ed00
 800158c:	faf6fefb 	.word	0xfaf6fefb
 8001590:	22041000 	.word	0x22041000

08001594 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 800159a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	091b      	lsrs	r3, r3, #4
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	4a47      	ldr	r2, [pc, #284]	; (80016c4 <SystemCoreClockUpdate+0x130>)
 80015a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ac:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f003 030c 	and.w	r3, r3, #12
 80015b8:	2b0c      	cmp	r3, #12
 80015ba:	d867      	bhi.n	800168c <SystemCoreClockUpdate+0xf8>
 80015bc:	a201      	add	r2, pc, #4	; (adr r2, 80015c4 <SystemCoreClockUpdate+0x30>)
 80015be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c2:	bf00      	nop
 80015c4:	080015f9 	.word	0x080015f9
 80015c8:	0800168d 	.word	0x0800168d
 80015cc:	0800168d 	.word	0x0800168d
 80015d0:	0800168d 	.word	0x0800168d
 80015d4:	08001601 	.word	0x08001601
 80015d8:	0800168d 	.word	0x0800168d
 80015dc:	0800168d 	.word	0x0800168d
 80015e0:	0800168d 	.word	0x0800168d
 80015e4:	08001609 	.word	0x08001609
 80015e8:	0800168d 	.word	0x0800168d
 80015ec:	0800168d 	.word	0x0800168d
 80015f0:	0800168d 	.word	0x0800168d
 80015f4:	08001611 	.word	0x08001611
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80015f8:	4a33      	ldr	r2, [pc, #204]	; (80016c8 <SystemCoreClockUpdate+0x134>)
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	6013      	str	r3, [r2, #0]
      break;
 80015fe:	e049      	b.n	8001694 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8001600:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <SystemCoreClockUpdate+0x134>)
 8001602:	4a32      	ldr	r2, [pc, #200]	; (80016cc <SystemCoreClockUpdate+0x138>)
 8001604:	601a      	str	r2, [r3, #0]
      break;
 8001606:	e045      	b.n	8001694 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001608:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <SystemCoreClockUpdate+0x134>)
 800160a:	4a31      	ldr	r2, [pc, #196]	; (80016d0 <SystemCoreClockUpdate+0x13c>)
 800160c:	601a      	str	r2, [r3, #0]
      break;
 800160e:	e041      	b.n	8001694 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 800161c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	3301      	adds	r3, #1
 800162a:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b02      	cmp	r3, #2
 8001630:	d105      	bne.n	800163e <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8001632:	4a26      	ldr	r2, [pc, #152]	; (80016cc <SystemCoreClockUpdate+0x138>)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	fbb2 f3f3 	udiv	r3, r2, r3
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	e00d      	b.n	800165a <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2b03      	cmp	r3, #3
 8001642:	d105      	bne.n	8001650 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8001644:	4a22      	ldr	r2, [pc, #136]	; (80016d0 <SystemCoreClockUpdate+0x13c>)
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	fbb2 f3f3 	udiv	r3, r2, r3
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	e004      	b.n	800165a <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	fbb2 f3f3 	udiv	r3, r2, r3
 8001658:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800165a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	fb02 f303 	mul.w	r3, r2, r3
 800166c:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 800166e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	0f5b      	lsrs	r3, r3, #29
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	3301      	adds	r3, #1
 800167c:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	fbb2 f3f3 	udiv	r3, r2, r3
 8001686:	4a10      	ldr	r2, [pc, #64]	; (80016c8 <SystemCoreClockUpdate+0x134>)
 8001688:	6013      	str	r3, [r2, #0]
      break;
 800168a:	e003      	b.n	8001694 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 800168c:	4a0e      	ldr	r2, [pc, #56]	; (80016c8 <SystemCoreClockUpdate+0x134>)
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	6013      	str	r3, [r2, #0]
      break;
 8001692:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	091b      	lsrs	r3, r3, #4
 800169c:	f003 030f 	and.w	r3, r3, #15
 80016a0:	4a0c      	ldr	r2, [pc, #48]	; (80016d4 <SystemCoreClockUpdate+0x140>)
 80016a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a6:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <SystemCoreClockUpdate+0x134>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <SystemCoreClockUpdate+0x134>)
 80016b4:	6013      	str	r3, [r2, #0]

}
 80016b6:	bf00      	nop
 80016b8:	371c      	adds	r7, #28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	08006ee4 	.word	0x08006ee4
 80016c8:	20000004 	.word	0x20000004
 80016cc:	00f42400 	.word	0x00f42400
 80016d0:	01e84800 	.word	0x01e84800
 80016d4:	08006ea4 	.word	0x08006ea4

080016d8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80016d8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016da:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016dc:	3304      	adds	r3, #4

080016de <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016de:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80016e2:	d3f9      	bcc.n	80016d8 <CopyDataInit>
  bx lr
 80016e4:	4770      	bx	lr

080016e6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80016e6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80016e8:	3004      	adds	r0, #4

080016ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80016ea:	4288      	cmp	r0, r1
  bcc FillZerobss
 80016ec:	d3fb      	bcc.n	80016e6 <FillZerobss>
  bx lr
 80016ee:	4770      	bx	lr

080016f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016f0:	480c      	ldr	r0, [pc, #48]	; (8001724 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80016f2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80016f4:	f7ff fef8 	bl	80014e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80016f8:	480b      	ldr	r0, [pc, #44]	; (8001728 <LoopForever+0x8>)
 80016fa:	490c      	ldr	r1, [pc, #48]	; (800172c <LoopForever+0xc>)
 80016fc:	4a0c      	ldr	r2, [pc, #48]	; (8001730 <LoopForever+0x10>)
 80016fe:	2300      	movs	r3, #0
 8001700:	f7ff ffed 	bl	80016de <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001704:	480b      	ldr	r0, [pc, #44]	; (8001734 <LoopForever+0x14>)
 8001706:	490c      	ldr	r1, [pc, #48]	; (8001738 <LoopForever+0x18>)
 8001708:	2300      	movs	r3, #0
 800170a:	f7ff ffee 	bl	80016ea <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800170e:	480b      	ldr	r0, [pc, #44]	; (800173c <LoopForever+0x1c>)
 8001710:	490b      	ldr	r1, [pc, #44]	; (8001740 <LoopForever+0x20>)
 8001712:	2300      	movs	r3, #0
 8001714:	f7ff ffe9 	bl	80016ea <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001718:	f005 fab8 	bl	8006c8c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800171c:	f7ff fcf4 	bl	8001108 <main>

08001720 <LoopForever>:

LoopForever:
  b LoopForever
 8001720:	e7fe      	b.n	8001720 <LoopForever>
 8001722:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001724:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001728:	20000004 	.word	0x20000004
 800172c:	20000028 	.word	0x20000028
 8001730:	08006f6c 	.word	0x08006f6c
  INIT_BSS _sbss, _ebss
 8001734:	200001b0 	.word	0x200001b0
 8001738:	20000324 	.word	0x20000324
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800173c:	200301e0 	.word	0x200301e0
 8001740:	20030a57 	.word	0x20030a57

08001744 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001744:	e7fe      	b.n	8001744 <ADC1_IRQHandler>
	...

08001748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <HAL_Init+0x3c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <HAL_Init+0x3c>)
 8001758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800175e:	2003      	movs	r0, #3
 8001760:	f000 f9c8 	bl	8001af4 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001764:	2000      	movs	r0, #0
 8001766:	f000 f80f 	bl	8001788 <HAL_InitTick>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d002      	beq.n	8001776 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	71fb      	strb	r3, [r7, #7]
 8001774:	e001      	b.n	800177a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001776:	f7ff fe34 	bl	80013e2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800177a:	79fb      	ldrb	r3, [r7, #7]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	58004000 	.word	0x58004000

08001788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001794:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <HAL_InitTick+0x6c>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d024      	beq.n	80017e6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 800179c:	f001 fcac 	bl	80030f8 <HAL_RCC_GetHCLKFreq>
 80017a0:	4602      	mov	r2, r0
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <HAL_InitTick+0x6c>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	4619      	mov	r1, r3
 80017a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b4:	4618      	mov	r0, r3
 80017b6:	f000 f9de 	bl	8001b76 <HAL_SYSTICK_Config>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10f      	bne.n	80017e0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b0f      	cmp	r3, #15
 80017c4:	d809      	bhi.n	80017da <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c6:	2200      	movs	r2, #0
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	f04f 30ff 	mov.w	r0, #4294967295
 80017ce:	f000 f99c 	bl	8001b0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017d2:	4a09      	ldr	r2, [pc, #36]	; (80017f8 <HAL_InitTick+0x70>)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	e007      	b.n	80017ea <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	73fb      	strb	r3, [r7, #15]
 80017de:	e004      	b.n	80017ea <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
 80017e4:	e001      	b.n	80017ea <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	2000000c 	.word	0x2000000c
 80017f8:	20000008 	.word	0x20000008

080017fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_IncTick+0x20>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_IncTick+0x24>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4413      	add	r3, r2
 800180c:	4a04      	ldr	r2, [pc, #16]	; (8001820 <HAL_IncTick+0x24>)
 800180e:	6013      	str	r3, [r2, #0]
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	2000000c 	.word	0x2000000c
 8001820:	2000031c 	.word	0x2000031c

08001824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return uwTick;
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <HAL_GetTick+0x14>)
 800182a:	681b      	ldr	r3, [r3, #0]
}
 800182c:	4618      	mov	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	2000031c 	.word	0x2000031c

0800183c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <HAL_GetTickPrio+0x14>)
 8001842:	681b      	ldr	r3, [r3, #0]
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000008 	.word	0x20000008

08001854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 800185c:	f7ff ffe2 	bl	8001824 <HAL_GetTick>
 8001860:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186c:	d005      	beq.n	800187a <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_Delay+0x40>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800187a:	bf00      	nop
 800187c:	f7ff ffd2 	bl	8001824 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	429a      	cmp	r2, r3
 800188a:	d8f7      	bhi.n	800187c <HAL_Delay+0x28>
    {
    }
  }
 800188c:	bf00      	nop
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	2000000c 	.word	0x2000000c

08001898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <__NVIC_SetPriorityGrouping+0x44>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018b4:	4013      	ands	r3, r2
 80018b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ca:	4a04      	ldr	r2, [pc, #16]	; (80018dc <__NVIC_SetPriorityGrouping+0x44>)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	60d3      	str	r3, [r2, #12]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <__NVIC_GetPriorityGrouping+0x18>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	0a1b      	lsrs	r3, r3, #8
 80018ea:	f003 0307 	and.w	r3, r3, #7
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	2b00      	cmp	r3, #0
 800190c:	db0b      	blt.n	8001926 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	f003 021f 	and.w	r2, r3, #31
 8001914:	4907      	ldr	r1, [pc, #28]	; (8001934 <__NVIC_EnableIRQ+0x38>)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	095b      	lsrs	r3, r3, #5
 800191c:	2001      	movs	r0, #1
 800191e:	fa00 f202 	lsl.w	r2, r0, r2
 8001922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000e100 	.word	0xe000e100

08001938 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	2b00      	cmp	r3, #0
 8001948:	db10      	blt.n	800196c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	f003 021f 	and.w	r2, r3, #31
 8001950:	4909      	ldr	r1, [pc, #36]	; (8001978 <__NVIC_DisableIRQ+0x40>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	2001      	movs	r0, #1
 800195a:	fa00 f202 	lsl.w	r2, r0, r2
 800195e:	3320      	adds	r3, #32
 8001960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001964:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001968:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000e100 	.word	0xe000e100

0800197c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	2b00      	cmp	r3, #0
 800198c:	db0c      	blt.n	80019a8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	f003 021f 	and.w	r2, r3, #31
 8001994:	4907      	ldr	r1, [pc, #28]	; (80019b4 <__NVIC_SetPendingIRQ+0x38>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	095b      	lsrs	r3, r3, #5
 800199c:	2001      	movs	r0, #1
 800199e:	fa00 f202 	lsl.w	r2, r0, r2
 80019a2:	3340      	adds	r3, #64	; 0x40
 80019a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000e100 	.word	0xe000e100

080019b8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	db0c      	blt.n	80019e4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	f003 021f 	and.w	r2, r3, #31
 80019d0:	4907      	ldr	r1, [pc, #28]	; (80019f0 <__NVIC_ClearPendingIRQ+0x38>)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	2001      	movs	r0, #1
 80019da:	fa00 f202 	lsl.w	r2, r0, r2
 80019de:	3360      	adds	r3, #96	; 0x60
 80019e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000e100 	.word	0xe000e100

080019f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	6039      	str	r1, [r7, #0]
 80019fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	db0a      	blt.n	8001a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	490c      	ldr	r1, [pc, #48]	; (8001a40 <__NVIC_SetPriority+0x4c>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	0112      	lsls	r2, r2, #4
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	440b      	add	r3, r1
 8001a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a1c:	e00a      	b.n	8001a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	4908      	ldr	r1, [pc, #32]	; (8001a44 <__NVIC_SetPriority+0x50>)
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	3b04      	subs	r3, #4
 8001a2c:	0112      	lsls	r2, r2, #4
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	440b      	add	r3, r1
 8001a32:	761a      	strb	r2, [r3, #24]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000e100 	.word	0xe000e100
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b089      	sub	sp, #36	; 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f1c3 0307 	rsb	r3, r3, #7
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	bf28      	it	cs
 8001a66:	2304      	movcs	r3, #4
 8001a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	2b06      	cmp	r3, #6
 8001a70:	d902      	bls.n	8001a78 <NVIC_EncodePriority+0x30>
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3b03      	subs	r3, #3
 8001a76:	e000      	b.n	8001a7a <NVIC_EncodePriority+0x32>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43da      	mvns	r2, r3
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a90:	f04f 31ff 	mov.w	r1, #4294967295
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	43d9      	mvns	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	4313      	orrs	r3, r2
         );
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3724      	adds	r7, #36	; 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ac0:	d301      	bcc.n	8001ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e00f      	b.n	8001ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <SysTick_Config+0x40>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ace:	210f      	movs	r1, #15
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	f7ff ff8e 	bl	80019f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <SysTick_Config+0x40>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ade:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <SysTick_Config+0x40>)
 8001ae0:	2207      	movs	r2, #7
 8001ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	e000e010 	.word	0xe000e010

08001af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff fecb 	bl	8001898 <__NVIC_SetPriorityGrouping>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b086      	sub	sp, #24
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
 8001b16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b18:	f7ff fee2 	bl	80018e0 <__NVIC_GetPriorityGrouping>
 8001b1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	6978      	ldr	r0, [r7, #20]
 8001b24:	f7ff ff90 	bl	8001a48 <NVIC_EncodePriority>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff5f 	bl	80019f4 <__NVIC_SetPriority>
}
 8001b36:	bf00      	nop
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fed5 	bl	80018fc <__NVIC_EnableIRQ>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fee5 	bl	8001938 <__NVIC_DisableIRQ>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ff96 	bl	8001ab0 <SysTick_Config>
 8001b84:	4603      	mov	r3, r0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4603      	mov	r3, r0
 8001b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff feed 	bl	800197c <__NVIC_SetPendingIRQ>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fefd 	bl	80019b8 <__NVIC_ClearPendingIRQ>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b087      	sub	sp, #28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd6:	e14c      	b.n	8001e72 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	2101      	movs	r1, #1
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	fa01 f303 	lsl.w	r3, r1, r3
 8001be4:	4013      	ands	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 813e 	beq.w	8001e6c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d00b      	beq.n	8001c10 <HAL_GPIO_Init+0x48>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d007      	beq.n	8001c10 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c04:	2b11      	cmp	r3, #17
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b12      	cmp	r3, #18
 8001c0e:	d130      	bne.n	8001c72 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c46:	2201      	movs	r2, #1
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	091b      	lsrs	r3, r3, #4
 8001c5c:	f003 0201 	and.w	r2, r3, #1
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0xea>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b12      	cmp	r3, #18
 8001cb0:	d123      	bne.n	8001cfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	08da      	lsrs	r2, r3, #3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3208      	adds	r2, #8
 8001cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	220f      	movs	r2, #15
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	691a      	ldr	r2, [r3, #16]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	08da      	lsrs	r2, r3, #3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3208      	adds	r2, #8
 8001cf4:	6939      	ldr	r1, [r7, #16]
 8001cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	2203      	movs	r2, #3
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0203 	and.w	r2, r3, #3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 8098 	beq.w	8001e6c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001d3c:	4a54      	ldr	r2, [pc, #336]	; (8001e90 <HAL_GPIO_Init+0x2c8>)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	089b      	lsrs	r3, r3, #2
 8001d42:	3302      	adds	r3, #2
 8001d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	220f      	movs	r2, #15
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d66:	d019      	beq.n	8001d9c <HAL_GPIO_Init+0x1d4>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a4a      	ldr	r2, [pc, #296]	; (8001e94 <HAL_GPIO_Init+0x2cc>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d013      	beq.n	8001d98 <HAL_GPIO_Init+0x1d0>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a49      	ldr	r2, [pc, #292]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d00d      	beq.n	8001d94 <HAL_GPIO_Init+0x1cc>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a48      	ldr	r2, [pc, #288]	; (8001e9c <HAL_GPIO_Init+0x2d4>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d007      	beq.n	8001d90 <HAL_GPIO_Init+0x1c8>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a47      	ldr	r2, [pc, #284]	; (8001ea0 <HAL_GPIO_Init+0x2d8>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d101      	bne.n	8001d8c <HAL_GPIO_Init+0x1c4>
 8001d88:	2304      	movs	r3, #4
 8001d8a:	e008      	b.n	8001d9e <HAL_GPIO_Init+0x1d6>
 8001d8c:	2307      	movs	r3, #7
 8001d8e:	e006      	b.n	8001d9e <HAL_GPIO_Init+0x1d6>
 8001d90:	2303      	movs	r3, #3
 8001d92:	e004      	b.n	8001d9e <HAL_GPIO_Init+0x1d6>
 8001d94:	2302      	movs	r3, #2
 8001d96:	e002      	b.n	8001d9e <HAL_GPIO_Init+0x1d6>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <HAL_GPIO_Init+0x1d6>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	f002 0203 	and.w	r2, r2, #3
 8001da4:	0092      	lsls	r2, r2, #2
 8001da6:	4093      	lsls	r3, r2
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dae:	4938      	ldr	r1, [pc, #224]	; (8001e90 <HAL_GPIO_Init+0x2c8>)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	089b      	lsrs	r3, r3, #2
 8001db4:	3302      	adds	r3, #2
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001dbc:	4b39      	ldr	r3, [pc, #228]	; (8001ea4 <HAL_GPIO_Init+0x2dc>)
 8001dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001de2:	4a30      	ldr	r2, [pc, #192]	; (8001ea4 <HAL_GPIO_Init+0x2dc>)
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001dea:	4b2e      	ldr	r3, [pc, #184]	; (8001ea4 <HAL_GPIO_Init+0x2dc>)
 8001dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e10:	4a24      	ldr	r2, [pc, #144]	; (8001ea4 <HAL_GPIO_Init+0x2dc>)
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e18:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <HAL_GPIO_Init+0x2dc>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e3c:	4a19      	ldr	r2, [pc, #100]	; (8001ea4 <HAL_GPIO_Init+0x2dc>)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e42:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <HAL_GPIO_Init+0x2dc>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e66:	4a0f      	ldr	r2, [pc, #60]	; (8001ea4 <HAL_GPIO_Init+0x2dc>)
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f47f aeab 	bne.w	8001bd8 <HAL_GPIO_Init+0x10>
  }
}
 8001e82:	bf00      	nop
 8001e84:	371c      	adds	r7, #28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40010000 	.word	0x40010000
 8001e94:	48000400 	.word	0x48000400
 8001e98:	48000800 	.word	0x48000800
 8001e9c:	48000c00 	.word	0x48000c00
 8001ea0:	48001000 	.word	0x48001000
 8001ea4:	58000800 	.word	0x58000800

08001ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	807b      	strh	r3, [r7, #2]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eb8:	787b      	ldrb	r3, [r7, #1]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ebe:	887a      	ldrh	r2, [r7, #2]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ec4:	e002      	b.n	8001ecc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ec6:	887a      	ldrh	r2, [r7, #2]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d006      	beq.n	8001efc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eee:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ef0:	88fb      	ldrh	r3, [r7, #6]
 8001ef2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ef4:	88fb      	ldrh	r3, [r7, #6]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe f99c 	bl	8000234 <HAL_GPIO_EXTI_Callback>
  }
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	58000800 	.word	0x58000800

08001f08 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <HAL_HSEM_IRQHandler+0x30>)
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <HAL_HSEM_IRQHandler+0x30>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	4906      	ldr	r1, [pc, #24]	; (8001f38 <HAL_HSEM_IRQHandler+0x30>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001f22:	4a05      	ldr	r2, [pc, #20]	; (8001f38 <HAL_HSEM_IRQHandler+0x30>)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f807 	bl	8001f3c <HAL_HSEM_FreeCallback>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	58001500 	.word	0x58001500

08001f3c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5e:	6013      	str	r3, [r2, #0]
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	58000400 	.word	0x58000400

08001f70 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f74:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	58000400 	.word	0x58000400

08001f8c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f9e:	d101      	bne.n	8001fa4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e000      	b.n	8001fa6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_RCC_HSE_EnableBypass>:
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc2:	6013      	str	r3, [r2, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <LL_RCC_HSE_DisableBypass>:
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe0:	6013      	str	r3, [r2, #0]
}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <LL_RCC_HSE_Enable>:
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffe:	6013      	str	r3, [r2, #0]
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <LL_RCC_HSE_Disable>:
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800200e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201c:	6013      	str	r3, [r2, #0]
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <LL_RCC_HSE_IsReady>:
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800202c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800203a:	d101      	bne.n	8002040 <LL_RCC_HSE_IsReady+0x18>
 800203c:	2301      	movs	r3, #1
 800203e:	e000      	b.n	8002042 <LL_RCC_HSE_IsReady+0x1a>
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <LL_RCC_HSI_Enable>:
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800205a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205e:	6013      	str	r3, [r2, #0]
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <LL_RCC_HSI_Disable>:
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800206e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800207c:	6013      	str	r3, [r2, #0]
}
 800207e:	bf00      	nop
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_RCC_HSI_IsReady>:
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800208c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209a:	d101      	bne.n	80020a0 <LL_RCC_HSI_IsReady+0x18>
 800209c:	2301      	movs	r3, #1
 800209e:	e000      	b.n	80020a2 <LL_RCC_HSI_IsReady+0x1a>
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_RCC_HSI_SetCalibTrimming>:
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80020b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	061b      	lsls	r3, r3, #24
 80020c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020c6:	4313      	orrs	r3, r2
 80020c8:	604b      	str	r3, [r1, #4]
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <LL_RCC_HSI48_Enable>:
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80020da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80020ee:	bf00      	nop
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_RCC_HSI48_Disable>:
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80020fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002100:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002104:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002108:	f023 0301 	bic.w	r3, r3, #1
 800210c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <LL_RCC_HSI48_IsReady>:
{
 800211a:	b480      	push	{r7}
 800211c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800211e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002122:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b02      	cmp	r3, #2
 800212c:	d101      	bne.n	8002132 <LL_RCC_HSI48_IsReady+0x18>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <LL_RCC_HSI48_IsReady+0x1a>
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <LL_RCC_LSE_Enable>:
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002156:	bf00      	nop
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_RCC_LSE_Disable>:
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002170:	f023 0301 	bic.w	r3, r3, #1
 8002174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <LL_RCC_LSE_EnableBypass>:
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002192:	f043 0304 	orr.w	r3, r3, #4
 8002196:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800219a:	bf00      	nop
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <LL_RCC_LSE_DisableBypass>:
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80021a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b4:	f023 0304 	bic.w	r3, r3, #4
 80021b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <LL_RCC_LSE_IsReady>:
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80021ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d101      	bne.n	80021de <LL_RCC_LSE_IsReady+0x18>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <LL_RCC_LSE_IsReady+0x1a>
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <LL_RCC_LSI1_Enable>:
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80021ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002202:	bf00      	nop
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <LL_RCC_LSI1_Disable>:
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800221c:	f023 0301 	bic.w	r3, r3, #1
 8002220:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <LL_RCC_LSI1_IsReady>:
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b02      	cmp	r3, #2
 8002240:	d101      	bne.n	8002246 <LL_RCC_LSI1_IsReady+0x18>
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <LL_RCC_LSI1_IsReady+0x1a>
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <LL_RCC_LSI2_Enable>:
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800225e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002262:	f043 0304 	orr.w	r3, r3, #4
 8002266:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800226a:	bf00      	nop
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <LL_RCC_LSI2_Disable>:
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002284:	f023 0304 	bic.w	r3, r3, #4
 8002288:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <LL_RCC_LSI2_IsReady>:
{
 8002296:	b480      	push	{r7}
 8002298:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800229a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d101      	bne.n	80022ae <LL_RCC_LSI2_IsReady+0x18>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <LL_RCC_LSI2_IsReady+0x1a>
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <LL_RCC_LSI2_SetTrimming>:
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80022c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <LL_RCC_MSI_Enable>:
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80022ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	6013      	str	r3, [r2, #0]
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <LL_RCC_MSI_Disable>:
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800230a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002314:	f023 0301 	bic.w	r3, r3, #1
 8002318:	6013      	str	r3, [r2, #0]
}
 800231a:	bf00      	nop
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <LL_RCC_MSI_IsReady>:
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b02      	cmp	r3, #2
 8002334:	d101      	bne.n	800233a <LL_RCC_MSI_IsReady+0x16>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <LL_RCC_MSI_IsReady+0x18>
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <LL_RCC_MSI_SetRange>:
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800234e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002358:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4313      	orrs	r3, r2
 8002360:	600b      	str	r3, [r1, #0]
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <LL_RCC_MSI_GetRange>:
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800237e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2bb0      	cmp	r3, #176	; 0xb0
 8002384:	d901      	bls.n	800238a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002386:	23b0      	movs	r3, #176	; 0xb0
 8002388:	607b      	str	r3, [r7, #4]
  return msiRange;
 800238a:	687b      	ldr	r3, [r7, #4]
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80023a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	021b      	lsls	r3, r3, #8
 80023ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023b2:	4313      	orrs	r3, r2
 80023b4:	604b      	str	r3, [r1, #4]
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <LL_RCC_SetSysClkSource>:
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80023ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f023 0203 	bic.w	r2, r3, #3
 80023d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4313      	orrs	r3, r2
 80023dc:	608b      	str	r3, [r1, #8]
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <LL_RCC_GetSysClkSource>:
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80023ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 030c 	and.w	r3, r3, #12
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <LL_RCC_SetAHBPrescaler>:
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800240a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002414:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4313      	orrs	r3, r2
 800241c:	608b      	str	r3, [r1, #8]
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <LL_C2_RCC_SetAHBPrescaler>:
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002436:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800243a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800243e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <LL_RCC_SetAHB4Prescaler>:
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800245e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002462:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002466:	f023 020f 	bic.w	r2, r3, #15
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <LL_RCC_SetAPB1Prescaler>:
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800248c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002496:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4313      	orrs	r3, r2
 800249e:	608b      	str	r3, [r1, #8]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_RCC_SetAPB2Prescaler>:
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80024b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	608b      	str	r3, [r1, #8]
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <LL_RCC_GetAHBPrescaler>:
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80024d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <LL_RCC_GetAHB4Prescaler>:
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80024f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800250c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800251a:	6013      	str	r3, [r2, #0]
}
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800252a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002534:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002538:	6013      	str	r3, [r2, #0]
}
 800253a:	bf00      	nop
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002552:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002556:	d101      	bne.n	800255c <LL_RCC_PLL_IsReady+0x18>
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <LL_RCC_PLL_IsReady+0x1a>
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800256c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800259e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80025b2:	b480      	push	{r7}
 80025b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80025b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f003 0303 	and.w	r3, r3, #3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80025ca:	b480      	push	{r7}
 80025cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80025ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025dc:	d101      	bne.n	80025e2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80025de:	2301      	movs	r3, #1
 80025e0:	e000      	b.n	80025e4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80025f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002602:	d101      	bne.n	8002608 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002628:	d101      	bne.n	800262e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800263a:	b480      	push	{r7}
 800263c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800263e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002648:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800264c:	d101      	bne.n	8002652 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800266c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002670:	d101      	bne.n	8002676 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002684:	b590      	push	{r4, r7, lr}
 8002686:	b08d      	sub	sp, #52	; 0x34
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e386      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0320 	and.w	r3, r3, #32
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 808f 	beq.w	80027c2 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026a4:	f7ff fea1 	bl	80023ea <LL_RCC_GetSysClkSource>
 80026a8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026aa:	f7ff ff82 	bl	80025b2 <LL_RCC_PLL_GetMainSource>
 80026ae:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80026b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_RCC_OscConfig+0x3e>
 80026b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b8:	2b0c      	cmp	r3, #12
 80026ba:	d149      	bne.n	8002750 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80026bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d146      	bne.n	8002750 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026c2:	f7ff fe2f 	bl	8002324 <LL_RCC_MSI_IsReady>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_OscConfig+0x54>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e365      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80026dc:	f7ff fe47 	bl	800236e <LL_RCC_MSI_GetRange>
 80026e0:	4603      	mov	r3, r0
 80026e2:	429c      	cmp	r4, r3
 80026e4:	d914      	bls.n	8002710 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 fd18 	bl	8003120 <RCC_SetFlashLatencyFromMSIRange>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e354      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fe21 	bl	8002346 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fe45 	bl	8002398 <LL_RCC_MSI_SetCalibTrimming>
 800270e:	e013      	b.n	8002738 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fe16 	bl	8002346 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff fe3a 	bl	8002398 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fcf9 	bl	8003120 <RCC_SetFlashLatencyFromMSIRange>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e335      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8002738:	f7fe ff2c 	bl	8001594 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800273c:	4bb4      	ldr	r3, [pc, #720]	; (8002a10 <HAL_RCC_OscConfig+0x38c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff f821 	bl	8001788 <HAL_InitTick>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d039      	beq.n	80027c0 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e329      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d01e      	beq.n	8002796 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002758:	f7ff fdc6 	bl	80022e8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800275c:	f7ff f862 	bl	8001824 <HAL_GetTick>
 8002760:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002764:	f7ff f85e 	bl	8001824 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e316      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002776:	f7ff fdd5 	bl	8002324 <LL_RCC_MSI_IsReady>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f1      	beq.n	8002764 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fdde 	bl	8002346 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fe02 	bl	8002398 <LL_RCC_MSI_SetCalibTrimming>
 8002794:	e015      	b.n	80027c2 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002796:	f7ff fdb6 	bl	8002306 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800279a:	f7ff f843 	bl	8001824 <HAL_GetTick>
 800279e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027a2:	f7ff f83f 	bl	8001824 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e2f7      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 80027b4:	f7ff fdb6 	bl	8002324 <LL_RCC_MSI_IsReady>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f1      	bne.n	80027a2 <HAL_RCC_OscConfig+0x11e>
 80027be:	e000      	b.n	80027c2 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d05a      	beq.n	8002884 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ce:	f7ff fe0c 	bl	80023ea <LL_RCC_GetSysClkSource>
 80027d2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027d4:	f7ff feed 	bl	80025b2 <LL_RCC_PLL_GetMainSource>
 80027d8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d005      	beq.n	80027ec <HAL_RCC_OscConfig+0x168>
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	2b0c      	cmp	r3, #12
 80027e4:	d10d      	bne.n	8002802 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d10a      	bne.n	8002802 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ec:	f7ff fc1c 	bl	8002028 <LL_RCC_HSE_IsReady>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d045      	beq.n	8002882 <HAL_RCC_OscConfig+0x1fe>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d141      	bne.n	8002882 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e2d0      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800280a:	d102      	bne.n	8002812 <HAL_RCC_OscConfig+0x18e>
 800280c:	f7ff fbee 	bl	8001fec <LL_RCC_HSE_Enable>
 8002810:	e00d      	b.n	800282e <HAL_RCC_OscConfig+0x1aa>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800281a:	d104      	bne.n	8002826 <HAL_RCC_OscConfig+0x1a2>
 800281c:	f7ff fbc8 	bl	8001fb0 <LL_RCC_HSE_EnableBypass>
 8002820:	f7ff fbe4 	bl	8001fec <LL_RCC_HSE_Enable>
 8002824:	e003      	b.n	800282e <HAL_RCC_OscConfig+0x1aa>
 8002826:	f7ff fbf0 	bl	800200a <LL_RCC_HSE_Disable>
 800282a:	f7ff fbd0 	bl	8001fce <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d012      	beq.n	800285c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002836:	f7fe fff5 	bl	8001824 <HAL_GetTick>
 800283a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800283e:	f7fe fff1 	bl	8001824 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b64      	cmp	r3, #100	; 0x64
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e2a9      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002850:	f7ff fbea 	bl	8002028 <LL_RCC_HSE_IsReady>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f1      	beq.n	800283e <HAL_RCC_OscConfig+0x1ba>
 800285a:	e013      	b.n	8002884 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285c:	f7fe ffe2 	bl	8001824 <HAL_GetTick>
 8002860:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002864:	f7fe ffde 	bl	8001824 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b64      	cmp	r3, #100	; 0x64
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e296      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002876:	f7ff fbd7 	bl	8002028 <LL_RCC_HSE_IsReady>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1f1      	bne.n	8002864 <HAL_RCC_OscConfig+0x1e0>
 8002880:	e000      	b.n	8002884 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002882:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d051      	beq.n	8002934 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002890:	f7ff fdab 	bl	80023ea <LL_RCC_GetSysClkSource>
 8002894:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002896:	f7ff fe8c 	bl	80025b2 <LL_RCC_PLL_GetMainSource>
 800289a:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d005      	beq.n	80028ae <HAL_RCC_OscConfig+0x22a>
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	2b0c      	cmp	r3, #12
 80028a6:	d113      	bne.n	80028d0 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d110      	bne.n	80028d0 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028ae:	f7ff fbeb 	bl	8002088 <LL_RCC_HSI_IsReady>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_RCC_OscConfig+0x240>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e26f      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fbef 	bl	80020ac <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028ce:	e031      	b.n	8002934 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d019      	beq.n	800290c <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028d8:	f7ff fbb8 	bl	800204c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7fe ffa2 	bl	8001824 <HAL_GetTick>
 80028e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e4:	f7fe ff9e 	bl	8001824 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e256      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 80028f6:	f7ff fbc7 	bl	8002088 <LL_RCC_HSI_IsReady>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f1      	beq.n	80028e4 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fbd1 	bl	80020ac <LL_RCC_HSI_SetCalibTrimming>
 800290a:	e013      	b.n	8002934 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800290c:	f7ff fbad 	bl	800206a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7fe ff88 	bl	8001824 <HAL_GetTick>
 8002914:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002918:	f7fe ff84 	bl	8001824 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e23c      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 800292a:	f7ff fbad 	bl	8002088 <LL_RCC_HSI_IsReady>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f1      	bne.n	8002918 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d106      	bne.n	800294e <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 80a2 	beq.w	8002a92 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d075      	beq.n	8002a42 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	2b00      	cmp	r3, #0
 8002960:	d046      	beq.n	80029f0 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002962:	f7ff fc64 	bl	800222e <LL_RCC_LSI1_IsReady>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d113      	bne.n	8002994 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800296c:	f7ff fc3d 	bl	80021ea <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002970:	f7fe ff58 	bl	8001824 <HAL_GetTick>
 8002974:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002978:	f7fe ff54 	bl	8001824 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e20c      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800298a:	f7ff fc50 	bl	800222e <LL_RCC_LSI1_IsReady>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f1      	beq.n	8002978 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002994:	f7ff fc5d 	bl	8002252 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7fe ff44 	bl	8001824 <HAL_GetTick>
 800299c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80029a0:	f7fe ff40 	bl	8001824 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e1f8      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80029b2:	f7ff fc70 	bl	8002296 <LL_RCC_LSI2_IsReady>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0f1      	beq.n	80029a0 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fc7a 	bl	80022ba <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80029c6:	f7ff fc21 	bl	800220c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ca:	f7fe ff2b 	bl	8001824 <HAL_GetTick>
 80029ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80029d2:	f7fe ff27 	bl	8001824 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e1df      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80029e4:	f7ff fc23 	bl	800222e <LL_RCC_LSI1_IsReady>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f1      	bne.n	80029d2 <HAL_RCC_OscConfig+0x34e>
 80029ee:	e050      	b.n	8002a92 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80029f0:	f7ff fbfb 	bl	80021ea <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f4:	f7fe ff16 	bl	8001824 <HAL_GetTick>
 80029f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80029fa:	e00b      	b.n	8002a14 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80029fc:	f7fe ff12 	bl	8001824 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d904      	bls.n	8002a14 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e1ca      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
 8002a0e:	bf00      	nop
 8002a10:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002a14:	f7ff fc0b 	bl	800222e <LL_RCC_LSI1_IsReady>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0ee      	beq.n	80029fc <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002a1e:	f7ff fc29 	bl	8002274 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002a24:	f7fe fefe 	bl	8001824 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e1b6      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002a36:	f7ff fc2e 	bl	8002296 <LL_RCC_LSI2_IsReady>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f1      	bne.n	8002a24 <HAL_RCC_OscConfig+0x3a0>
 8002a40:	e027      	b.n	8002a92 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002a42:	f7ff fc17 	bl	8002274 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a46:	f7fe feed 	bl	8001824 <HAL_GetTick>
 8002a4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002a4c:	e008      	b.n	8002a60 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002a4e:	f7fe fee9 	bl	8001824 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e1a1      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002a60:	f7ff fc19 	bl	8002296 <LL_RCC_LSI2_IsReady>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f1      	bne.n	8002a4e <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002a6a:	f7ff fbcf 	bl	800220c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6e:	f7fe fed9 	bl	8001824 <HAL_GetTick>
 8002a72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002a76:	f7fe fed5 	bl	8001824 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e18d      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002a88:	f7ff fbd1 	bl	800222e <LL_RCC_LSI1_IsReady>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f1      	bne.n	8002a76 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d05b      	beq.n	8002b56 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a9e:	4bb5      	ldr	r3, [pc, #724]	; (8002d74 <HAL_RCC_OscConfig+0x6f0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d114      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002aaa:	f7ff fa51 	bl	8001f50 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aae:	f7fe feb9 	bl	8001824 <HAL_GetTick>
 8002ab2:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab6:	f7fe feb5 	bl	8001824 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e16d      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ac8:	4baa      	ldr	r3, [pc, #680]	; (8002d74 <HAL_RCC_OscConfig+0x6f0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d102      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x45e>
 8002adc:	f7ff fb2f 	bl	800213e <LL_RCC_LSE_Enable>
 8002ae0:	e00c      	b.n	8002afc <HAL_RCC_OscConfig+0x478>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b05      	cmp	r3, #5
 8002ae8:	d104      	bne.n	8002af4 <HAL_RCC_OscConfig+0x470>
 8002aea:	f7ff fb4a 	bl	8002182 <LL_RCC_LSE_EnableBypass>
 8002aee:	f7ff fb26 	bl	800213e <LL_RCC_LSE_Enable>
 8002af2:	e003      	b.n	8002afc <HAL_RCC_OscConfig+0x478>
 8002af4:	f7ff fb34 	bl	8002160 <LL_RCC_LSE_Disable>
 8002af8:	f7ff fb54 	bl	80021a4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d014      	beq.n	8002b2e <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b04:	f7fe fe8e 	bl	8001824 <HAL_GetTick>
 8002b08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002b0a:	e00a      	b.n	8002b22 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0c:	f7fe fe8a 	bl	8001824 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e140      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002b22:	f7ff fb50 	bl	80021c6 <LL_RCC_LSE_IsReady>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0ef      	beq.n	8002b0c <HAL_RCC_OscConfig+0x488>
 8002b2c:	e013      	b.n	8002b56 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2e:	f7fe fe79 	bl	8001824 <HAL_GetTick>
 8002b32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002b34:	e00a      	b.n	8002b4c <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b36:	f7fe fe75 	bl	8001824 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e12b      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002b4c:	f7ff fb3b 	bl	80021c6 <LL_RCC_LSE_IsReady>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1ef      	bne.n	8002b36 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d02c      	beq.n	8002bbc <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d014      	beq.n	8002b94 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b6a:	f7ff fab4 	bl	80020d6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6e:	f7fe fe59 	bl	8001824 <HAL_GetTick>
 8002b72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b76:	f7fe fe55 	bl	8001824 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e10d      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002b88:	f7ff fac7 	bl	800211a <LL_RCC_HSI48_IsReady>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f1      	beq.n	8002b76 <HAL_RCC_OscConfig+0x4f2>
 8002b92:	e013      	b.n	8002bbc <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b94:	f7ff fab0 	bl	80020f8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b98:	f7fe fe44 	bl	8001824 <HAL_GetTick>
 8002b9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ba0:	f7fe fe40 	bl	8001824 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e0f8      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002bb2:	f7ff fab2 	bl	800211a <LL_RCC_HSI48_IsReady>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1f1      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 80ee 	beq.w	8002da2 <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bc6:	f7ff fc10 	bl	80023ea <LL_RCC_GetSysClkSource>
 8002bca:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	f040 80af 	bne.w	8002d3c <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f003 0203 	and.w	r2, r3, #3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d123      	bne.n	8002c34 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d11c      	bne.n	8002c34 <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	0a1b      	lsrs	r3, r3, #8
 8002bfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d114      	bne.n	8002c34 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d10d      	bne.n	8002c34 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d106      	bne.n	8002c34 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d05d      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	2b0c      	cmp	r3, #12
 8002c38:	d058      	beq.n	8002cec <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0ab      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c4c:	f7ff fc6b 	bl	8002526 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c50:	f7fe fde8 	bl	8001824 <HAL_GetTick>
 8002c54:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fe fde4 	bl	8001824 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e09c      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1ef      	bne.n	8002c58 <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	4b3e      	ldr	r3, [pc, #248]	; (8002d78 <HAL_RCC_OscConfig+0x6f4>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c8a:	4311      	orrs	r1, r2
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c90:	0212      	lsls	r2, r2, #8
 8002c92:	4311      	orrs	r1, r2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c98:	4311      	orrs	r1, r2
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c9e:	4311      	orrs	r1, r2
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002caa:	4313      	orrs	r3, r2
 8002cac:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cae:	f7ff fc2b 	bl	8002508 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc0:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cc2:	f7fe fdaf 	bl	8001824 <HAL_GetTick>
 8002cc6:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cca:	f7fe fdab 	bl	8001824 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e063      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0ef      	beq.n	8002cca <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cea:	e05a      	b.n	8002da2 <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e059      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d151      	bne.n	8002da2 <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cfe:	f7ff fc03 	bl	8002508 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d10:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d12:	f7fe fd87 	bl	8001824 <HAL_GetTick>
 8002d16:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1a:	f7fe fd83 	bl	8001824 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e03b      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0ef      	beq.n	8002d1a <HAL_RCC_OscConfig+0x696>
 8002d3a:	e032      	b.n	8002da2 <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	2b0c      	cmp	r3, #12
 8002d40:	d02d      	beq.n	8002d9e <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d42:	f7ff fbf0 	bl	8002526 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d50:	f023 0303 	bic.w	r3, r3, #3
 8002d54:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d60:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d68:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6a:	f7fe fd5b 	bl	8001824 <HAL_GetTick>
 8002d6e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d70:	e00d      	b.n	8002d8e <HAL_RCC_OscConfig+0x70a>
 8002d72:	bf00      	nop
 8002d74:	58000400 	.word	0x58000400
 8002d78:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7c:	f7fe fd52 	bl	8001824 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e00a      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1ef      	bne.n	8002d7c <HAL_RCC_OscConfig+0x6f8>
 8002d9c:	e001      	b.n	8002da2 <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3734      	adds	r7, #52	; 0x34
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd90      	pop	{r4, r7, pc}

08002dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e12a      	b.n	8003016 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc0:	4b97      	ldr	r3, [pc, #604]	; (8003020 <HAL_RCC_ClockConfig+0x274>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d91b      	bls.n	8002e06 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dce:	4b94      	ldr	r3, [pc, #592]	; (8003020 <HAL_RCC_ClockConfig+0x274>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f023 0207 	bic.w	r2, r3, #7
 8002dd6:	4992      	ldr	r1, [pc, #584]	; (8003020 <HAL_RCC_ClockConfig+0x274>)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dde:	f7fe fd21 	bl	8001824 <HAL_GetTick>
 8002de2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002de6:	f7fe fd1d 	bl	8001824 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e10e      	b.n	8003016 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df8:	4b89      	ldr	r3, [pc, #548]	; (8003020 <HAL_RCC_ClockConfig+0x274>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d1ef      	bne.n	8002de6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d016      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff faf3 	bl	8002402 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e1c:	f7fe fd02 	bl	8001824 <HAL_GetTick>
 8002e20:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e24:	f7fe fcfe 	bl	8001824 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e0ef      	b.n	8003016 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002e36:	f7ff fbc8 	bl	80025ca <LL_RCC_IsActiveFlag_HPRE>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f1      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d016      	beq.n	8002e7a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff faea 	bl	800242a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e56:	f7fe fce5 	bl	8001824 <HAL_GetTick>
 8002e5a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e5e:	f7fe fce1 	bl	8001824 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e0d2      	b.n	8003016 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002e70:	f7ff fbbd 	bl	80025ee <LL_RCC_IsActiveFlag_C2HPRE>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f1      	beq.n	8002e5e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d016      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff fae3 	bl	8002456 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e90:	f7fe fcc8 	bl	8001824 <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e98:	f7fe fcc4 	bl	8001824 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e0b5      	b.n	8003016 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002eaa:	f7ff fbb3 	bl	8002614 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f1      	beq.n	8002e98 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d016      	beq.n	8002eee <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fadd 	bl	8002484 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002eca:	f7fe fcab 	bl	8001824 <HAL_GetTick>
 8002ece:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ed2:	f7fe fca7 	bl	8001824 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e098      	b.n	8003016 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002ee4:	f7ff fba9 	bl	800263a <LL_RCC_IsActiveFlag_PPRE1>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f1      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d017      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff fad3 	bl	80024ac <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f06:	f7fe fc8d 	bl	8001824 <HAL_GetTick>
 8002f0a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f0e:	f7fe fc89 	bl	8001824 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e07a      	b.n	8003016 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002f20:	f7ff fb9d 	bl	800265e <LL_RCC_IsActiveFlag_PPRE2>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f1      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d043      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d106      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002f3e:	f7ff f873 	bl	8002028 <LL_RCC_HSE_IsReady>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d11e      	bne.n	8002f86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e064      	b.n	8003016 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d106      	bne.n	8002f62 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002f54:	f7ff faf6 	bl	8002544 <LL_RCC_PLL_IsReady>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d113      	bne.n	8002f86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e059      	b.n	8003016 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002f6a:	f7ff f9db 	bl	8002324 <LL_RCC_MSI_IsReady>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d108      	bne.n	8002f86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e04e      	b.n	8003016 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002f78:	f7ff f886 	bl	8002088 <LL_RCC_HSI_IsReady>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e047      	b.n	8003016 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff fa19 	bl	80023c2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f90:	f7fe fc48 	bl	8001824 <HAL_GetTick>
 8002f94:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f96:	e00a      	b.n	8002fae <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f98:	f7fe fc44 	bl	8001824 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e033      	b.n	8003016 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fae:	f7ff fa1c 	bl	80023ea <LL_RCC_GetSysClkSource>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d1ec      	bne.n	8002f98 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fbe:	4b18      	ldr	r3, [pc, #96]	; (8003020 <HAL_RCC_ClockConfig+0x274>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d21b      	bcs.n	8003004 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fcc:	4b14      	ldr	r3, [pc, #80]	; (8003020 <HAL_RCC_ClockConfig+0x274>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f023 0207 	bic.w	r2, r3, #7
 8002fd4:	4912      	ldr	r1, [pc, #72]	; (8003020 <HAL_RCC_ClockConfig+0x274>)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fdc:	f7fe fc22 	bl	8001824 <HAL_GetTick>
 8002fe0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002fe4:	f7fe fc1e 	bl	8001824 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e00f      	b.n	8003016 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <HAL_RCC_ClockConfig+0x274>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d1ef      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8003004:	f7fe fac6 	bl	8001594 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003008:	f7fe fc18 	bl	800183c <HAL_GetTickPrio>
 800300c:	4603      	mov	r3, r0
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe fbba 	bl	8001788 <HAL_InitTick>
 8003014:	4603      	mov	r3, r0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	58004000 	.word	0x58004000

08003024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003024:	b590      	push	{r4, r7, lr}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800302a:	f7ff f9de 	bl	80023ea <LL_RCC_GetSysClkSource>
 800302e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10a      	bne.n	800304c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003036:	f7ff f99a 	bl	800236e <LL_RCC_MSI_GetRange>
 800303a:	4603      	mov	r3, r0
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	4a2a      	ldr	r2, [pc, #168]	; (80030ec <HAL_RCC_GetSysClockFreq+0xc8>)
 8003044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	e04a      	b.n	80030e2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b04      	cmp	r3, #4
 8003050:	d102      	bne.n	8003058 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003052:	4b27      	ldr	r3, [pc, #156]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	e044      	b.n	80030e2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b08      	cmp	r3, #8
 800305c:	d10a      	bne.n	8003074 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800305e:	f7fe ff95 	bl	8001f8c <LL_RCC_HSE_IsEnabledDiv2>
 8003062:	4603      	mov	r3, r0
 8003064:	2b01      	cmp	r3, #1
 8003066:	d102      	bne.n	800306e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003068:	4b21      	ldr	r3, [pc, #132]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	e039      	b.n	80030e2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800306e:	4b21      	ldr	r3, [pc, #132]	; (80030f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	e036      	b.n	80030e2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003074:	f7ff fa9d 	bl	80025b2 <LL_RCC_PLL_GetMainSource>
 8003078:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b02      	cmp	r3, #2
 800307e:	d002      	beq.n	8003086 <HAL_RCC_GetSysClockFreq+0x62>
 8003080:	2b03      	cmp	r3, #3
 8003082:	d003      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0x68>
 8003084:	e00d      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003086:	4b1a      	ldr	r3, [pc, #104]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003088:	60bb      	str	r3, [r7, #8]
        break;
 800308a:	e015      	b.n	80030b8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800308c:	f7fe ff7e 	bl	8001f8c <LL_RCC_HSE_IsEnabledDiv2>
 8003090:	4603      	mov	r3, r0
 8003092:	2b01      	cmp	r3, #1
 8003094:	d102      	bne.n	800309c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003096:	4b16      	ldr	r3, [pc, #88]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003098:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800309a:	e00d      	b.n	80030b8 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800309c:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800309e:	60bb      	str	r3, [r7, #8]
        break;
 80030a0:	e00a      	b.n	80030b8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80030a2:	f7ff f964 	bl	800236e <LL_RCC_MSI_GetRange>
 80030a6:	4603      	mov	r3, r0
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	4a0f      	ldr	r2, [pc, #60]	; (80030ec <HAL_RCC_GetSysClockFreq+0xc8>)
 80030b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b4:	60bb      	str	r3, [r7, #8]
        break;
 80030b6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80030b8:	f7ff fa56 	bl	8002568 <LL_RCC_PLL_GetN>
 80030bc:	4602      	mov	r2, r0
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	fb03 f402 	mul.w	r4, r3, r2
 80030c4:	f7ff fa69 	bl	800259a <LL_RCC_PLL_GetDivider>
 80030c8:	4603      	mov	r3, r0
 80030ca:	091b      	lsrs	r3, r3, #4
 80030cc:	3301      	adds	r3, #1
 80030ce:	fbb4 f4f3 	udiv	r4, r4, r3
 80030d2:	f7ff fa56 	bl	8002582 <LL_RCC_PLL_GetR>
 80030d6:	4603      	mov	r3, r0
 80030d8:	0f5b      	lsrs	r3, r3, #29
 80030da:	3301      	adds	r3, #1
 80030dc:	fbb4 f3f3 	udiv	r3, r4, r3
 80030e0:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80030e2:	68fb      	ldr	r3, [r7, #12]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd90      	pop	{r4, r7, pc}
 80030ec:	08006ee4 	.word	0x08006ee4
 80030f0:	00f42400 	.word	0x00f42400
 80030f4:	01e84800 	.word	0x01e84800

080030f8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f8:	b598      	push	{r3, r4, r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80030fc:	f7ff ff92 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8003100:	4604      	mov	r4, r0
 8003102:	f7ff f9e7 	bl	80024d4 <LL_RCC_GetAHBPrescaler>
 8003106:	4603      	mov	r3, r0
 8003108:	091b      	lsrs	r3, r3, #4
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	4a03      	ldr	r2, [pc, #12]	; (800311c <HAL_RCC_GetHCLKFreq+0x24>)
 8003110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003114:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd98      	pop	{r3, r4, r7, pc}
 800311c:	08006ea4 	.word	0x08006ea4

08003120 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003120:	b590      	push	{r4, r7, lr}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2bb0      	cmp	r3, #176	; 0xb0
 800312c:	d903      	bls.n	8003136 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800312e:	4b15      	ldr	r3, [pc, #84]	; (8003184 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	e007      	b.n	8003146 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	4a11      	ldr	r2, [pc, #68]	; (8003184 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003144:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003146:	f7ff f9d1 	bl	80024ec <LL_RCC_GetAHB4Prescaler>
 800314a:	4603      	mov	r3, r0
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	4a0d      	ldr	r2, [pc, #52]	; (8003188 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	fbb2 f3f3 	udiv	r3, r2, r3
 800315e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	4a0a      	ldr	r2, [pc, #40]	; (800318c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	0c9c      	lsrs	r4, r3, #18
 800316a:	f7fe ff01 	bl	8001f70 <HAL_PWREx_GetVoltageRange>
 800316e:	4603      	mov	r3, r0
 8003170:	4619      	mov	r1, r3
 8003172:	4620      	mov	r0, r4
 8003174:	f000 f80c 	bl	8003190 <RCC_SetFlashLatency>
 8003178:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	bd90      	pop	{r4, r7, pc}
 8003182:	bf00      	nop
 8003184:	08006ee4 	.word	0x08006ee4
 8003188:	08006ea4 	.word	0x08006ea4
 800318c:	431bde83 	.word	0x431bde83

08003190 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b093      	sub	sp, #76	; 0x4c
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800319a:	4b39      	ldr	r3, [pc, #228]	; (8003280 <RCC_SetFlashLatency+0xf0>)
 800319c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80031a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80031a6:	4a37      	ldr	r2, [pc, #220]	; (8003284 <RCC_SetFlashLatency+0xf4>)
 80031a8:	f107 031c 	add.w	r3, r7, #28
 80031ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80031ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80031b2:	4b35      	ldr	r3, [pc, #212]	; (8003288 <RCC_SetFlashLatency+0xf8>)
 80031b4:	f107 040c 	add.w	r4, r7, #12
 80031b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80031be:	2300      	movs	r3, #0
 80031c0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031c8:	d11c      	bne.n	8003204 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80031ca:	2300      	movs	r3, #0
 80031cc:	643b      	str	r3, [r7, #64]	; 0x40
 80031ce:	e015      	b.n	80031fc <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80031d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80031d8:	4413      	add	r3, r2
 80031da:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d808      	bhi.n	80031f6 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80031e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80031ec:	4413      	add	r3, r2
 80031ee:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80031f2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80031f4:	e022      	b.n	800323c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80031f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031f8:	3301      	adds	r3, #1
 80031fa:	643b      	str	r3, [r7, #64]	; 0x40
 80031fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d9e6      	bls.n	80031d0 <RCC_SetFlashLatency+0x40>
 8003202:	e01b      	b.n	800323c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003204:	2300      	movs	r3, #0
 8003206:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003208:	e015      	b.n	8003236 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800320a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003212:	4413      	add	r3, r2
 8003214:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	429a      	cmp	r2, r3
 800321c:	d808      	bhi.n	8003230 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800321e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003226:	4413      	add	r3, r2
 8003228:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800322c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800322e:	e005      	b.n	800323c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003232:	3301      	adds	r3, #1
 8003234:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003238:	2b02      	cmp	r3, #2
 800323a:	d9e6      	bls.n	800320a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800323c:	4b13      	ldr	r3, [pc, #76]	; (800328c <RCC_SetFlashLatency+0xfc>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f023 0207 	bic.w	r2, r3, #7
 8003244:	4911      	ldr	r1, [pc, #68]	; (800328c <RCC_SetFlashLatency+0xfc>)
 8003246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003248:	4313      	orrs	r3, r2
 800324a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800324c:	f7fe faea 	bl	8001824 <HAL_GetTick>
 8003250:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003252:	e008      	b.n	8003266 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003254:	f7fe fae6 	bl	8001824 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e007      	b.n	8003276 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003266:	4b09      	ldr	r3, [pc, #36]	; (800328c <RCC_SetFlashLatency+0xfc>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003270:	429a      	cmp	r2, r3
 8003272:	d1ef      	bne.n	8003254 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	374c      	adds	r7, #76	; 0x4c
 800327a:	46bd      	mov	sp, r7
 800327c:	bd90      	pop	{r4, r7, pc}
 800327e:	bf00      	nop
 8003280:	08006d30 	.word	0x08006d30
 8003284:	08006d40 	.word	0x08006d40
 8003288:	08006d4c 	.word	0x08006d4c
 800328c:	58004000 	.word	0x58004000

08003290 <LL_RCC_LSE_IsEnabled>:
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <LL_RCC_LSE_IsEnabled+0x18>
 80032a4:	2301      	movs	r3, #1
 80032a6:	e000      	b.n	80032aa <LL_RCC_LSE_IsEnabled+0x1a>
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <LL_RCC_LSE_IsReady>:
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80032b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d101      	bne.n	80032cc <LL_RCC_LSE_IsReady+0x18>
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <LL_RCC_LSE_IsReady+0x1a>
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <LL_RCC_SetRFWKPClockSource>:
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80032e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <LL_RCC_SetSMPSClockSource>:
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800330c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	f023 0203 	bic.w	r2, r3, #3
 8003316:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4313      	orrs	r3, r2
 800331e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <LL_RCC_SetSMPSPrescaler>:
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800333e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4313      	orrs	r3, r2
 8003346:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <LL_RCC_SetUSARTClockSource>:
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800335c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003364:	f023 0203 	bic.w	r2, r3, #3
 8003368:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <LL_RCC_SetLPUARTClockSource>:
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800338c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003390:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003394:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <LL_RCC_SetI2CClockSource>:
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80033b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	091b      	lsrs	r3, r3, #4
 80033c0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80033c4:	43db      	mvns	r3, r3
 80033c6:	401a      	ands	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80033d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <LL_RCC_SetLPTIMClockSource>:
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80033ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	0c1b      	lsrs	r3, r3, #16
 80033fa:	041b      	lsls	r3, r3, #16
 80033fc:	43db      	mvns	r3, r3
 80033fe:	401a      	ands	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	041b      	lsls	r3, r3, #16
 8003404:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <LL_RCC_SetSAIClockSource>:
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800342e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <LL_RCC_SetRNGClockSource>:
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800344e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003456:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800345a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <LL_RCC_SetCLK48ClockSource>:
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800347a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003486:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <LL_RCC_SetUSBClockSource>:
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff ffe3 	bl	8003472 <LL_RCC_SetCLK48ClockSource>
}
 80034ac:	bf00      	nop
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <LL_RCC_SetADCClockSource>:
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80034bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <LL_RCC_SetRTCClockSource>:
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80034e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <LL_RCC_GetRTCClockSource>:
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003518:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800351c:	4618      	mov	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <LL_RCC_ForceBackupDomainReset>:
{
 8003526:	b480      	push	{r7}
 8003528:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800352a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800352e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003532:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800353a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800353e:	bf00      	nop
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800354c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003554:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800355c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <LL_RCC_PLLSAI1_Enable>:
{
 800356a:	b480      	push	{r7}
 800356c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800356e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003578:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800357c:	6013      	str	r3, [r2, #0]
}
 800357e:	bf00      	nop
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <LL_RCC_PLLSAI1_Disable>:
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800358c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003596:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800359a:	6013      	str	r3, [r2, #0]
}
 800359c:	bf00      	nop
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <LL_RCC_PLLSAI1_IsReady>:
{
 80035a6:	b480      	push	{r7}
 80035a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80035aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035b8:	d101      	bne.n	80035be <LL_RCC_PLLSAI1_IsReady+0x18>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b088      	sub	sp, #32
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80035d2:	2300      	movs	r3, #0
 80035d4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80035d6:	2300      	movs	r3, #0
 80035d8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d033      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ee:	d00c      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x40>
 80035f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035f4:	d802      	bhi.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x32>
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d010      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x52>
 80035fa:	e017      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x62>
 80035fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003600:	d017      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003602:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003606:	d016      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003608:	e010      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800360a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003618:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800361a:	e00d      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3304      	adds	r3, #4
 8003620:	4618      	mov	r0, r3
 8003622:	f000 f947 	bl	80038b4 <RCCEx_PLLSAI1_ConfigNP>
 8003626:	4603      	mov	r3, r0
 8003628:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800362a:	e005      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	77fb      	strb	r3, [r7, #31]
        break;
 8003630:	e002      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8003632:	bf00      	nop
 8003634:	e000      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8003636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003638:	7ffb      	ldrb	r3, [r7, #31]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d105      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff fee9 	bl	800341a <LL_RCC_SetSAIClockSource>
 8003648:	e001      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364a:	7ffb      	ldrb	r3, [r7, #31]
 800364c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003656:	2b00      	cmp	r3, #0
 8003658:	d046      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800365a:	f7ff ff57 	bl	800350c <LL_RCC_GetRTCClockSource>
 800365e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	429a      	cmp	r2, r3
 8003668:	d03c      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800366a:	f7fe fc71 	bl	8001f50 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d105      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff ff31 	bl	80034e0 <LL_RCC_SetRTCClockSource>
 800367e:	e02e      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003688:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800368a:	f7ff ff4c 	bl	8003526 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800368e:	f7ff ff5b 	bl	8003548 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80036a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80036aa:	f7ff fdf1 	bl	8003290 <LL_RCC_LSE_IsEnabled>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d114      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036b4:	f7fe f8b6 	bl	8001824 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80036ba:	e00b      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036bc:	f7fe f8b2 	bl	8001824 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d902      	bls.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	77fb      	strb	r3, [r7, #31]
              break;
 80036d2:	e004      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 80036d4:	f7ff fdee 	bl	80032b4 <LL_RCC_LSE_IsReady>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d1ee      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80036de:	7ffb      	ldrb	r3, [r7, #31]
 80036e0:	77bb      	strb	r3, [r7, #30]
 80036e2:	e001      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e4:	7ffb      	ldrb	r3, [r7, #31]
 80036e6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d004      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff fe2b 	bl	8003354 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d004      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff fe36 	bl	8003380 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0310 	and.w	r3, r3, #16
 800371c:	2b00      	cmp	r3, #0
 800371e:	d004      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff fe5e 	bl	80033e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	d004      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff fe53 	bl	80033e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b00      	cmp	r3, #0
 800374a:	d004      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff fe2b 	bl	80033ac <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	d004      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff fe20 	bl	80033ac <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003774:	2b00      	cmp	r3, #0
 8003776:	d022      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff fe8e 	bl	800349e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800378a:	d107      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800378c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800379a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037a4:	d10b      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3304      	adds	r3, #4
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 f8dd 	bl	800396a <RCCEx_PLLSAI1_ConfigNQ>
 80037b0:	4603      	mov	r3, r0
 80037b2:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80037b4:	7ffb      	ldrb	r3, [r7, #31]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 80037ba:	7ffb      	ldrb	r3, [r7, #31]
 80037bc:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d02b      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d2:	d008      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037dc:	d003      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d105      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff fe2b 	bl	8003446 <LL_RCC_SetRNGClockSource>
 80037f0:	e00a      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	2000      	movs	r0, #0
 80037fe:	f7ff fe22 	bl	8003446 <LL_RCC_SetRNGClockSource>
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f7ff fe35 	bl	8003472 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003810:	d107      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800381c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003820:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382a:	2b00      	cmp	r3, #0
 800382c:	d022      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fe3e 	bl	80034b4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003840:	d107      	bne.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800384c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003850:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003856:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800385a:	d10b      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3304      	adds	r3, #4
 8003860:	4618      	mov	r0, r3
 8003862:	f000 f8dd 	bl	8003a20 <RCCEx_PLLSAI1_ConfigNR>
 8003866:	4603      	mov	r3, r0
 8003868:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800386a:	7ffb      	ldrb	r3, [r7, #31]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8003870:	7ffb      	ldrb	r3, [r7, #31]
 8003872:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d004      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff fd27 	bl	80032d8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d009      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff fd46 	bl	800332c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff fd2d 	bl	8003304 <LL_RCC_SetSMPSClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 80038aa:	7fbb      	ldrb	r3, [r7, #30]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3720      	adds	r7, #32
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80038c0:	f7ff fe62 	bl	8003588 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80038c4:	f7fd ffae 	bl	8001824 <HAL_GetTick>
 80038c8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80038ca:	e009      	b.n	80038e0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038cc:	f7fd ffaa 	bl	8001824 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d902      	bls.n	80038e0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	73fb      	strb	r3, [r7, #15]
      break;
 80038de:	e004      	b.n	80038ea <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80038e0:	f7ff fe61 	bl	80035a6 <LL_RCC_PLLSAI1_IsReady>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f0      	bne.n	80038cc <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d137      	bne.n	8003960 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80038f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	021b      	lsls	r3, r3, #8
 8003900:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003904:	4313      	orrs	r3, r2
 8003906:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800391a:	4313      	orrs	r3, r2
 800391c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800391e:	f7ff fe24 	bl	800356a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003922:	f7fd ff7f 	bl	8001824 <HAL_GetTick>
 8003926:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003928:	e009      	b.n	800393e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800392a:	f7fd ff7b 	bl	8001824 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d902      	bls.n	800393e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	73fb      	strb	r3, [r7, #15]
        break;
 800393c:	e004      	b.n	8003948 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800393e:	f7ff fe32 	bl	80035a6 <LL_RCC_PLLSAI1_IsReady>
 8003942:	4603      	mov	r3, r0
 8003944:	2b01      	cmp	r3, #1
 8003946:	d1f0      	bne.n	800392a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003948:	7bfb      	ldrb	r3, [r7, #15]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d108      	bne.n	8003960 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800394e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800395c:	4313      	orrs	r3, r2
 800395e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003960:	7bfb      	ldrb	r3, [r7, #15]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003976:	f7ff fe07 	bl	8003588 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800397a:	f7fd ff53 	bl	8001824 <HAL_GetTick>
 800397e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003980:	e009      	b.n	8003996 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003982:	f7fd ff4f 	bl	8001824 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d902      	bls.n	8003996 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	73fb      	strb	r3, [r7, #15]
      break;
 8003994:	e004      	b.n	80039a0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003996:	f7ff fe06 	bl	80035a6 <LL_RCC_PLLSAI1_IsReady>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1f0      	bne.n	8003982 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d137      	bne.n	8003a16 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80039a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	021b      	lsls	r3, r3, #8
 80039b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039ba:	4313      	orrs	r3, r2
 80039bc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80039be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039d0:	4313      	orrs	r3, r2
 80039d2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80039d4:	f7ff fdc9 	bl	800356a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039d8:	f7fd ff24 	bl	8001824 <HAL_GetTick>
 80039dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80039de:	e009      	b.n	80039f4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039e0:	f7fd ff20 	bl	8001824 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d902      	bls.n	80039f4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	73fb      	strb	r3, [r7, #15]
        break;
 80039f2:	e004      	b.n	80039fe <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80039f4:	f7ff fdd7 	bl	80035a6 <LL_RCC_PLLSAI1_IsReady>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d1f0      	bne.n	80039e0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d108      	bne.n	8003a16 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a08:	691a      	ldr	r2, [r3, #16]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a12:	4313      	orrs	r3, r2
 8003a14:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003a2c:	f7ff fdac 	bl	8003588 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a30:	f7fd fef8 	bl	8001824 <HAL_GetTick>
 8003a34:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a36:	e009      	b.n	8003a4c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a38:	f7fd fef4 	bl	8001824 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d902      	bls.n	8003a4c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	73fb      	strb	r3, [r7, #15]
      break;
 8003a4a:	e004      	b.n	8003a56 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a4c:	f7ff fdab 	bl	80035a6 <LL_RCC_PLLSAI1_IsReady>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d137      	bne.n	8003acc <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	021b      	lsls	r3, r3, #8
 8003a6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a70:	4313      	orrs	r3, r2
 8003a72:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a86:	4313      	orrs	r3, r2
 8003a88:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003a8a:	f7ff fd6e 	bl	800356a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a8e:	f7fd fec9 	bl	8001824 <HAL_GetTick>
 8003a92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a94:	e009      	b.n	8003aaa <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a96:	f7fd fec5 	bl	8001824 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d902      	bls.n	8003aaa <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	73fb      	strb	r3, [r7, #15]
        break;
 8003aa8:	e004      	b.n	8003ab4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003aaa:	f7ff fd7c 	bl	80035a6 <LL_RCC_PLLSAI1_IsReady>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d1f0      	bne.n	8003a96 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d108      	bne.n	8003acc <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e090      	b.n	8003c0a <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d106      	bne.n	8003b02 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7fd fc8f 	bl	8001420 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2202      	movs	r2, #2
 8003b06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	22ca      	movs	r2, #202	; 0xca
 8003b10:	625a      	str	r2, [r3, #36]	; 0x24
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2253      	movs	r2, #83	; 0x53
 8003b18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f89f 	bl	8003c5e <RTC_EnterInitMode>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d009      	beq.n	8003b3a <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	22ff      	movs	r2, #255	; 0xff
 8003b2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2204      	movs	r2, #4
 8003b32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e067      	b.n	8003c0a <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6812      	ldr	r2, [r2, #0]
 8003b44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b4c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6899      	ldr	r1, [r3, #8]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	68d2      	ldr	r2, [r2, #12]
 8003b74:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6919      	ldr	r1, [r3, #16]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	041a      	lsls	r2, r3, #16
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68da      	ldr	r2, [r3, #12]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b98:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0203 	bic.w	r2, r2, #3
 8003ba8:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69da      	ldr	r2, [r3, #28]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 0320 	and.w	r3, r3, #32
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d113      	bne.n	8003bf8 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f81e 	bl	8003c12 <HAL_RTC_WaitForSynchro>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00d      	beq.n	8003bf8 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	22ff      	movs	r2, #255	; 0xff
 8003be2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2204      	movs	r2, #4
 8003be8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e008      	b.n	8003c0a <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	22ff      	movs	r2, #255	; 0xff
 8003bfe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8003c08:	2300      	movs	r3, #0
  }
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b084      	sub	sp, #16
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c28:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003c2a:	f7fd fdfb 	bl	8001824 <HAL_GetTick>
 8003c2e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003c30:	e009      	b.n	8003c46 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003c32:	f7fd fdf7 	bl	8001824 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c40:	d901      	bls.n	8003c46 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e007      	b.n	8003c56 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f003 0320 	and.w	r3, r3, #32
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0ee      	beq.n	8003c32 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b084      	sub	sp, #16
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d119      	bne.n	8003ca8 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f04f 32ff 	mov.w	r2, #4294967295
 8003c7c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003c7e:	f7fd fdd1 	bl	8001824 <HAL_GetTick>
 8003c82:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003c84:	e009      	b.n	8003c9a <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003c86:	f7fd fdcd 	bl	8001824 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c94:	d901      	bls.n	8003c9a <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e007      	b.n	8003caa <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0ee      	beq.n	8003c86 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b088      	sub	sp, #32
 8003cb6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003cbc:	f107 0308 	add.w	r3, r7, #8
 8003cc0:	2218      	movs	r2, #24
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 ff45 	bl	8004b54 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003cca:	233f      	movs	r3, #63	; 0x3f
 8003ccc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8003cce:	2381      	movs	r3, #129	; 0x81
 8003cd0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8003cd2:	1dfb      	adds	r3, r7, #7
 8003cd4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003cda:	f107 0308 	add.w	r3, r7, #8
 8003cde:	2100      	movs	r1, #0
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f001 fa11 	bl	8005108 <hci_send_req>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	da01      	bge.n	8003cf0 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8003cec:	23ff      	movs	r3, #255	; 0xff
 8003cee:	e000      	b.n	8003cf2 <aci_gap_set_non_discoverable+0x40>
  return status;
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3720      	adds	r7, #32
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8003cfa:	b5b0      	push	{r4, r5, r7, lr}
 8003cfc:	b0ce      	sub	sp, #312	; 0x138
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	4605      	mov	r5, r0
 8003d02:	460c      	mov	r4, r1
 8003d04:	4610      	mov	r0, r2
 8003d06:	4619      	mov	r1, r3
 8003d08:	1dfb      	adds	r3, r7, #7
 8003d0a:	462a      	mov	r2, r5
 8003d0c:	701a      	strb	r2, [r3, #0]
 8003d0e:	1d3b      	adds	r3, r7, #4
 8003d10:	4622      	mov	r2, r4
 8003d12:	801a      	strh	r2, [r3, #0]
 8003d14:	1cbb      	adds	r3, r7, #2
 8003d16:	4602      	mov	r2, r0
 8003d18:	801a      	strh	r2, [r3, #0]
 8003d1a:	1dbb      	adds	r3, r7, #6
 8003d1c:	460a      	mov	r2, r1
 8003d1e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8003d20:	f107 0310 	add.w	r3, r7, #16
 8003d24:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8003d28:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	f107 0210 	add.w	r2, r7, #16
 8003d32:	4413      	add	r3, r2
 8003d34:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8003d38:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8003d3c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8003d40:	4413      	add	r3, r2
 8003d42:	3309      	adds	r3, #9
 8003d44:	f107 0210 	add.w	r2, r7, #16
 8003d48:	4413      	add	r3, r2
 8003d4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003d4e:	f107 030f 	add.w	r3, r7, #15
 8003d52:	2200      	movs	r2, #0
 8003d54:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003d56:	2300      	movs	r3, #0
 8003d58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8003d5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003d60:	1dfa      	adds	r2, r7, #7
 8003d62:	7812      	ldrb	r2, [r2, #0]
 8003d64:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003d66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8003d70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003d74:	1d3a      	adds	r2, r7, #4
 8003d76:	8812      	ldrh	r2, [r2, #0]
 8003d78:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8003d7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003d80:	3302      	adds	r3, #2
 8003d82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8003d86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003d8a:	1cba      	adds	r2, r7, #2
 8003d8c:	8812      	ldrh	r2, [r2, #0]
 8003d8e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8003d92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003d96:	3302      	adds	r3, #2
 8003d98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8003d9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003da0:	1dba      	adds	r2, r7, #6
 8003da2:	7812      	ldrb	r2, [r2, #0]
 8003da4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8003da6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003daa:	3301      	adds	r3, #1
 8003dac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8003db0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003db4:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8003db8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8003dba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8003dc4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003dc8:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8003dcc:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8003dce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8003dd8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003ddc:	3308      	adds	r3, #8
 8003dde:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8003de2:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fea4 	bl	8004b34 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8003dec:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8003df0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003df4:	4413      	add	r3, r2
 8003df6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8003dfa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003dfe:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8003e02:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8003e04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e08:	3301      	adds	r3, #1
 8003e0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8003e0e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003e12:	3301      	adds	r3, #1
 8003e14:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8003e18:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 fe89 	bl	8004b34 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8003e22:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8003e26:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8003e30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e34:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8003e38:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8003e3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e3e:	3302      	adds	r3, #2
 8003e40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8003e44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e48:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8003e4c:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8003e4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e52:	3302      	adds	r3, #2
 8003e54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003e58:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003e5c:	2218      	movs	r2, #24
 8003e5e:	2100      	movs	r1, #0
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fe77 	bl	8004b54 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003e66:	233f      	movs	r3, #63	; 0x3f
 8003e68:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8003e6c:	2383      	movs	r3, #131	; 0x83
 8003e6e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003e72:	f107 0310 	add.w	r3, r7, #16
 8003e76:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003e7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003e82:	f107 030f 	add.w	r3, r7, #15
 8003e86:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003e90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003e94:	2100      	movs	r1, #0
 8003e96:	4618      	mov	r0, r3
 8003e98:	f001 f936 	bl	8005108 <hci_send_req>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	da01      	bge.n	8003ea6 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8003ea2:	23ff      	movs	r3, #255	; 0xff
 8003ea4:	e002      	b.n	8003eac <aci_gap_set_discoverable+0x1b2>
  return status;
 8003ea6:	f107 030f 	add.w	r3, r7, #15
 8003eaa:	781b      	ldrb	r3, [r3, #0]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bdb0      	pop	{r4, r5, r7, pc}

08003eb6 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b0cc      	sub	sp, #304	; 0x130
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	1dfb      	adds	r3, r7, #7
 8003ec0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8003ec2:	f107 0310 	add.w	r3, r7, #16
 8003ec6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003eca:	f107 030f 	add.w	r3, r7, #15
 8003ece:	2200      	movs	r2, #0
 8003ed0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8003ed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003edc:	1dfa      	adds	r2, r7, #7
 8003ede:	7812      	ldrb	r2, [r2, #0]
 8003ee0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003ee2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003eec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003ef0:	2218      	movs	r2, #24
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 fe2d 	bl	8004b54 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003efa:	233f      	movs	r3, #63	; 0x3f
 8003efc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8003f00:	2385      	movs	r3, #133	; 0x85
 8003f02:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003f06:	f107 0310 	add.w	r3, r7, #16
 8003f0a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003f0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f12:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003f16:	f107 030f 	add.w	r3, r7, #15
 8003f1a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003f24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003f28:	2100      	movs	r1, #0
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f001 f8ec 	bl	8005108 <hci_send_req>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	da01      	bge.n	8003f3a <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8003f36:	23ff      	movs	r3, #255	; 0xff
 8003f38:	e002      	b.n	8003f40 <aci_gap_set_io_capability+0x8a>
  return status;
 8003f3a:	f107 030f 	add.w	r3, r7, #15
 8003f3e:	781b      	ldrb	r3, [r3, #0]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8003f4a:	b5b0      	push	{r4, r5, r7, lr}
 8003f4c:	b0cc      	sub	sp, #304	; 0x130
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	4605      	mov	r5, r0
 8003f52:	460c      	mov	r4, r1
 8003f54:	4610      	mov	r0, r2
 8003f56:	4619      	mov	r1, r3
 8003f58:	1dfb      	adds	r3, r7, #7
 8003f5a:	462a      	mov	r2, r5
 8003f5c:	701a      	strb	r2, [r3, #0]
 8003f5e:	1dbb      	adds	r3, r7, #6
 8003f60:	4622      	mov	r2, r4
 8003f62:	701a      	strb	r2, [r3, #0]
 8003f64:	1d7b      	adds	r3, r7, #5
 8003f66:	4602      	mov	r2, r0
 8003f68:	701a      	strb	r2, [r3, #0]
 8003f6a:	1d3b      	adds	r3, r7, #4
 8003f6c:	460a      	mov	r2, r1
 8003f6e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8003f70:	f107 0310 	add.w	r3, r7, #16
 8003f74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003f78:	f107 030f 	add.w	r3, r7, #15
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003f80:	2300      	movs	r3, #0
 8003f82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8003f86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f8a:	1dfa      	adds	r2, r7, #7
 8003f8c:	7812      	ldrb	r2, [r2, #0]
 8003f8e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003f90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f94:	3301      	adds	r3, #1
 8003f96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8003f9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f9e:	1dba      	adds	r2, r7, #6
 8003fa0:	7812      	ldrb	r2, [r2, #0]
 8003fa2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8003fa4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003fa8:	3301      	adds	r3, #1
 8003faa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8003fae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fb2:	1d7a      	adds	r2, r7, #5
 8003fb4:	7812      	ldrb	r2, [r2, #0]
 8003fb6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8003fb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8003fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fc6:	1d3a      	adds	r2, r7, #4
 8003fc8:	7812      	ldrb	r2, [r2, #0]
 8003fca:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8003fcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8003fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fda:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8003fde:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8003fe0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8003fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fee:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8003ff2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8003ff4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8003ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004002:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8004006:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8004008:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800400c:	3301      	adds	r3, #1
 800400e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8004012:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004016:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800401a:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800401e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004022:	3304      	adds	r3, #4
 8004024:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8004028:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800402c:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8004030:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8004032:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004036:	3301      	adds	r3, #1
 8004038:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800403c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004040:	2218      	movs	r2, #24
 8004042:	2100      	movs	r1, #0
 8004044:	4618      	mov	r0, r3
 8004046:	f000 fd85 	bl	8004b54 <Osal_MemSet>
  rq.ogf = 0x3f;
 800404a:	233f      	movs	r3, #63	; 0x3f
 800404c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8004050:	2386      	movs	r3, #134	; 0x86
 8004052:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004056:	f107 0310 	add.w	r3, r7, #16
 800405a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800405e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004062:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004066:	f107 030f 	add.w	r3, r7, #15
 800406a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800406e:	2301      	movs	r3, #1
 8004070:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004074:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004078:	2100      	movs	r1, #0
 800407a:	4618      	mov	r0, r3
 800407c:	f001 f844 	bl	8005108 <hci_send_req>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	da01      	bge.n	800408a <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8004086:	23ff      	movs	r3, #255	; 0xff
 8004088:	e002      	b.n	8004090 <aci_gap_set_authentication_requirement+0x146>
  return status;
 800408a:	f107 030f 	add.w	r3, r7, #15
 800408e:	781b      	ldrb	r3, [r3, #0]
}
 8004090:	4618      	mov	r0, r3
 8004092:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004096:	46bd      	mov	sp, r7
 8004098:	bdb0      	pop	{r4, r5, r7, pc}

0800409a <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800409a:	b590      	push	{r4, r7, lr}
 800409c:	b0cd      	sub	sp, #308	; 0x134
 800409e:	af00      	add	r7, sp, #0
 80040a0:	4604      	mov	r4, r0
 80040a2:	4608      	mov	r0, r1
 80040a4:	4611      	mov	r1, r2
 80040a6:	463a      	mov	r2, r7
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	1dfb      	adds	r3, r7, #7
 80040ac:	4622      	mov	r2, r4
 80040ae:	701a      	strb	r2, [r3, #0]
 80040b0:	1dbb      	adds	r3, r7, #6
 80040b2:	4602      	mov	r2, r0
 80040b4:	701a      	strb	r2, [r3, #0]
 80040b6:	1d7b      	adds	r3, r7, #5
 80040b8:	460a      	mov	r2, r1
 80040ba:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80040bc:	f107 0310 	add.w	r3, r7, #16
 80040c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80040c4:	f107 0308 	add.w	r3, r7, #8
 80040c8:	2207      	movs	r2, #7
 80040ca:	2100      	movs	r1, #0
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 fd41 	bl	8004b54 <Osal_MemSet>
  int index_input = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80040d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040dc:	1dfa      	adds	r2, r7, #7
 80040de:	7812      	ldrb	r2, [r2, #0]
 80040e0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80040e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80040e6:	3301      	adds	r3, #1
 80040e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80040ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040f0:	1dba      	adds	r2, r7, #6
 80040f2:	7812      	ldrb	r2, [r2, #0]
 80040f4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80040f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80040fa:	3301      	adds	r3, #1
 80040fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8004100:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004104:	1d7a      	adds	r2, r7, #5
 8004106:	7812      	ldrb	r2, [r2, #0]
 8004108:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800410a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800410e:	3301      	adds	r3, #1
 8004110:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004114:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004118:	2218      	movs	r2, #24
 800411a:	2100      	movs	r1, #0
 800411c:	4618      	mov	r0, r3
 800411e:	f000 fd19 	bl	8004b54 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004122:	233f      	movs	r3, #63	; 0x3f
 8004124:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8004128:	238a      	movs	r3, #138	; 0x8a
 800412a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800412e:	f107 0310 	add.w	r3, r7, #16
 8004132:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004136:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800413a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800413e:	f107 0308 	add.w	r3, r7, #8
 8004142:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8004146:	2307      	movs	r3, #7
 8004148:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800414c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004150:	2100      	movs	r1, #0
 8004152:	4618      	mov	r0, r3
 8004154:	f000 ffd8 	bl	8005108 <hci_send_req>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	da01      	bge.n	8004162 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800415e:	23ff      	movs	r3, #255	; 0xff
 8004160:	e021      	b.n	80041a6 <aci_gap_init+0x10c>
  if ( resp.Status )
 8004162:	f107 0308 	add.w	r3, r7, #8
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <aci_gap_init+0xda>
    return resp.Status;
 800416c:	f107 0308 	add.w	r3, r7, #8
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	e018      	b.n	80041a6 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8004174:	f107 0308 	add.w	r3, r7, #8
 8004178:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800417c:	b29a      	uxth	r2, r3
 800417e:	463b      	mov	r3, r7
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8004184:	f107 0308 	add.w	r3, r7, #8
 8004188:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800418c:	b29a      	uxth	r2, r3
 800418e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004192:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8004194:	f107 0308 	add.w	r3, r7, #8
 8004198:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800419c:	b29a      	uxth	r2, r3
 800419e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80041a2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd90      	pop	{r4, r7, pc}

080041b0 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b0cc      	sub	sp, #304	; 0x130
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4602      	mov	r2, r0
 80041b8:	463b      	mov	r3, r7
 80041ba:	6019      	str	r1, [r3, #0]
 80041bc:	1dfb      	adds	r3, r7, #7
 80041be:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80041c0:	f107 0310 	add.w	r3, r7, #16
 80041c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80041c8:	f107 030f 	add.w	r3, r7, #15
 80041cc:	2200      	movs	r2, #0
 80041ce:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 80041d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041da:	1dfa      	adds	r2, r7, #7
 80041dc:	7812      	ldrb	r2, [r2, #0]
 80041de:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80041e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041e4:	3301      	adds	r3, #1
 80041e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80041ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041ee:	1c58      	adds	r0, r3, #1
 80041f0:	1dfb      	adds	r3, r7, #7
 80041f2:	781a      	ldrb	r2, [r3, #0]
 80041f4:	463b      	mov	r3, r7
 80041f6:	6819      	ldr	r1, [r3, #0]
 80041f8:	f000 fc9c 	bl	8004b34 <Osal_MemCpy>
  index_input += AdvDataLen;
 80041fc:	1dfb      	adds	r3, r7, #7
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004204:	4413      	add	r3, r2
 8004206:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800420a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800420e:	2218      	movs	r2, #24
 8004210:	2100      	movs	r1, #0
 8004212:	4618      	mov	r0, r3
 8004214:	f000 fc9e 	bl	8004b54 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004218:	233f      	movs	r3, #63	; 0x3f
 800421a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800421e:	238e      	movs	r3, #142	; 0x8e
 8004220:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004224:	f107 0310 	add.w	r3, r7, #16
 8004228:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800422c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004230:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004234:	f107 030f 	add.w	r3, r7, #15
 8004238:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800423c:	2301      	movs	r3, #1
 800423e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004242:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004246:	2100      	movs	r1, #0
 8004248:	4618      	mov	r0, r3
 800424a:	f000 ff5d 	bl	8005108 <hci_send_req>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	da01      	bge.n	8004258 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8004254:	23ff      	movs	r3, #255	; 0xff
 8004256:	e002      	b.n	800425e <aci_gap_update_adv_data+0xae>
  return status;
 8004258:	f107 030f 	add.w	r3, r7, #15
 800425c:	781b      	ldrb	r3, [r3, #0]
}
 800425e:	4618      	mov	r0, r3
 8004260:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b088      	sub	sp, #32
 800426c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800426e:	2300      	movs	r3, #0
 8004270:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004272:	f107 0308 	add.w	r3, r7, #8
 8004276:	2218      	movs	r2, #24
 8004278:	2100      	movs	r1, #0
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fc6a 	bl	8004b54 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004280:	233f      	movs	r3, #63	; 0x3f
 8004282:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8004284:	2392      	movs	r3, #146	; 0x92
 8004286:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004288:	1dfb      	adds	r3, r7, #7
 800428a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800428c:	2301      	movs	r3, #1
 800428e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004290:	f107 0308 	add.w	r3, r7, #8
 8004294:	2100      	movs	r1, #0
 8004296:	4618      	mov	r0, r3
 8004298:	f000 ff36 	bl	8005108 <hci_send_req>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	da01      	bge.n	80042a6 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 80042a2:	23ff      	movs	r3, #255	; 0xff
 80042a4:	e000      	b.n	80042a8 <aci_gap_configure_whitelist+0x40>
  return status;
 80042a6:	79fb      	ldrb	r3, [r7, #7]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3720      	adds	r7, #32
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b088      	sub	sp, #32
 80042b4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80042b6:	2300      	movs	r3, #0
 80042b8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80042ba:	f107 0308 	add.w	r3, r7, #8
 80042be:	2218      	movs	r2, #24
 80042c0:	2100      	movs	r1, #0
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fc46 	bl	8004b54 <Osal_MemSet>
  rq.ogf = 0x3f;
 80042c8:	233f      	movs	r3, #63	; 0x3f
 80042ca:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80042cc:	f240 1301 	movw	r3, #257	; 0x101
 80042d0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80042d2:	1dfb      	adds	r3, r7, #7
 80042d4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80042d6:	2301      	movs	r3, #1
 80042d8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80042da:	f107 0308 	add.w	r3, r7, #8
 80042de:	2100      	movs	r1, #0
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 ff11 	bl	8005108 <hci_send_req>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	da01      	bge.n	80042f0 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80042ec:	23ff      	movs	r3, #255	; 0xff
 80042ee:	e000      	b.n	80042f2 <aci_gatt_init+0x42>
  return status;
 80042f0:	79fb      	ldrb	r3, [r7, #7]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3720      	adds	r7, #32
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80042fa:	b590      	push	{r4, r7, lr}
 80042fc:	b0cf      	sub	sp, #316	; 0x13c
 80042fe:	af00      	add	r7, sp, #0
 8004300:	4604      	mov	r4, r0
 8004302:	4638      	mov	r0, r7
 8004304:	6001      	str	r1, [r0, #0]
 8004306:	4610      	mov	r0, r2
 8004308:	4619      	mov	r1, r3
 800430a:	1dfb      	adds	r3, r7, #7
 800430c:	4622      	mov	r2, r4
 800430e:	701a      	strb	r2, [r3, #0]
 8004310:	1dbb      	adds	r3, r7, #6
 8004312:	4602      	mov	r2, r0
 8004314:	701a      	strb	r2, [r3, #0]
 8004316:	1d7b      	adds	r3, r7, #5
 8004318:	460a      	mov	r2, r1
 800431a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800431c:	f107 0310 	add.w	r3, r7, #16
 8004320:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8004324:	1dfb      	adds	r3, r7, #7
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d007      	beq.n	800433c <aci_gatt_add_service+0x42>
 800432c:	1dfb      	adds	r3, r7, #7
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b02      	cmp	r3, #2
 8004332:	d101      	bne.n	8004338 <aci_gatt_add_service+0x3e>
 8004334:	2311      	movs	r3, #17
 8004336:	e002      	b.n	800433e <aci_gatt_add_service+0x44>
 8004338:	2301      	movs	r3, #1
 800433a:	e000      	b.n	800433e <aci_gatt_add_service+0x44>
 800433c:	2303      	movs	r3, #3
 800433e:	f107 0210 	add.w	r2, r7, #16
 8004342:	4413      	add	r3, r2
 8004344:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004348:	f107 030c 	add.w	r3, r7, #12
 800434c:	2203      	movs	r2, #3
 800434e:	2100      	movs	r1, #0
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fbff 	bl	8004b54 <Osal_MemSet>
  int index_input = 0;
 8004356:	2300      	movs	r3, #0
 8004358:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800435c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004360:	1dfa      	adds	r2, r7, #7
 8004362:	7812      	ldrb	r2, [r2, #0]
 8004364:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004366:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800436a:	3301      	adds	r3, #1
 800436c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8004370:	1dfb      	adds	r3, r7, #7
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d002      	beq.n	800437e <aci_gatt_add_service+0x84>
 8004378:	2b02      	cmp	r3, #2
 800437a:	d004      	beq.n	8004386 <aci_gatt_add_service+0x8c>
 800437c:	e007      	b.n	800438e <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 800437e:	2302      	movs	r3, #2
 8004380:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8004384:	e005      	b.n	8004392 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8004386:	2310      	movs	r3, #16
 8004388:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800438c:	e001      	b.n	8004392 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800438e:	2347      	movs	r3, #71	; 0x47
 8004390:	e05d      	b.n	800444e <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8004392:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004396:	1c58      	adds	r0, r3, #1
 8004398:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800439c:	463b      	mov	r3, r7
 800439e:	6819      	ldr	r1, [r3, #0]
 80043a0:	f000 fbc8 	bl	8004b34 <Osal_MemCpy>
    index_input += size;
 80043a4:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80043a8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80043ac:	4413      	add	r3, r2
 80043ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 80043b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043b6:	1dba      	adds	r2, r7, #6
 80043b8:	7812      	ldrb	r2, [r2, #0]
 80043ba:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80043bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043c0:	3301      	adds	r3, #1
 80043c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80043c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043ca:	1d7a      	adds	r2, r7, #5
 80043cc:	7812      	ldrb	r2, [r2, #0]
 80043ce:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80043d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043d4:	3301      	adds	r3, #1
 80043d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80043da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80043de:	2218      	movs	r2, #24
 80043e0:	2100      	movs	r1, #0
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fbb6 	bl	8004b54 <Osal_MemSet>
  rq.ogf = 0x3f;
 80043e8:	233f      	movs	r3, #63	; 0x3f
 80043ea:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80043ee:	f44f 7381 	mov.w	r3, #258	; 0x102
 80043f2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80043f6:	f107 0310 	add.w	r3, r7, #16
 80043fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80043fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004402:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8004406:	f107 030c 	add.w	r3, r7, #12
 800440a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800440e:	2303      	movs	r3, #3
 8004410:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004414:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004418:	2100      	movs	r1, #0
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fe74 	bl	8005108 <hci_send_req>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	da01      	bge.n	800442a <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8004426:	23ff      	movs	r3, #255	; 0xff
 8004428:	e011      	b.n	800444e <aci_gatt_add_service+0x154>
  if ( resp.Status )
 800442a:	f107 030c 	add.w	r3, r7, #12
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <aci_gatt_add_service+0x142>
    return resp.Status;
 8004434:	f107 030c 	add.w	r3, r7, #12
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	e008      	b.n	800444e <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 800443c:	f107 030c 	add.w	r3, r7, #12
 8004440:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004444:	b29a      	uxth	r2, r3
 8004446:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800444a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8004454:	46bd      	mov	sp, r7
 8004456:	bd90      	pop	{r4, r7, pc}

08004458 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b0d1      	sub	sp, #324	; 0x144
 800445c:	af00      	add	r7, sp, #0
 800445e:	4604      	mov	r4, r0
 8004460:	4608      	mov	r0, r1
 8004462:	f107 0108 	add.w	r1, r7, #8
 8004466:	600a      	str	r2, [r1, #0]
 8004468:	4619      	mov	r1, r3
 800446a:	f107 030e 	add.w	r3, r7, #14
 800446e:	4622      	mov	r2, r4
 8004470:	801a      	strh	r2, [r3, #0]
 8004472:	f107 030d 	add.w	r3, r7, #13
 8004476:	4602      	mov	r2, r0
 8004478:	701a      	strb	r2, [r3, #0]
 800447a:	1dbb      	adds	r3, r7, #6
 800447c:	460a      	mov	r2, r1
 800447e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8004480:	f107 0318 	add.w	r3, r7, #24
 8004484:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8004488:	f107 030d 	add.w	r3, r7, #13
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d008      	beq.n	80044a4 <aci_gatt_add_char+0x4c>
 8004492:	f107 030d 	add.w	r3, r7, #13
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b02      	cmp	r3, #2
 800449a:	d101      	bne.n	80044a0 <aci_gatt_add_char+0x48>
 800449c:	2313      	movs	r3, #19
 800449e:	e002      	b.n	80044a6 <aci_gatt_add_char+0x4e>
 80044a0:	2303      	movs	r3, #3
 80044a2:	e000      	b.n	80044a6 <aci_gatt_add_char+0x4e>
 80044a4:	2305      	movs	r3, #5
 80044a6:	f107 0218 	add.w	r2, r7, #24
 80044aa:	4413      	add	r3, r2
 80044ac:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80044b0:	f107 0314 	add.w	r3, r7, #20
 80044b4:	2203      	movs	r2, #3
 80044b6:	2100      	movs	r1, #0
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 fb4b 	bl	8004b54 <Osal_MemSet>
  int index_input = 0;
 80044be:	2300      	movs	r3, #0
 80044c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 80044c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80044c8:	f107 020e 	add.w	r2, r7, #14
 80044cc:	8812      	ldrh	r2, [r2, #0]
 80044ce:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80044d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80044d4:	3302      	adds	r3, #2
 80044d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80044da:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80044de:	f107 020d 	add.w	r2, r7, #13
 80044e2:	7812      	ldrb	r2, [r2, #0]
 80044e4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80044e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80044ea:	3301      	adds	r3, #1
 80044ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80044f0:	f107 030d 	add.w	r3, r7, #13
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d002      	beq.n	8004500 <aci_gatt_add_char+0xa8>
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d004      	beq.n	8004508 <aci_gatt_add_char+0xb0>
 80044fe:	e007      	b.n	8004510 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 8004500:	2302      	movs	r3, #2
 8004502:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8004506:	e005      	b.n	8004514 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8004508:	2310      	movs	r3, #16
 800450a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800450e:	e001      	b.n	8004514 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 8004510:	2347      	movs	r3, #71	; 0x47
 8004512:	e086      	b.n	8004622 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8004514:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004518:	1cd8      	adds	r0, r3, #3
 800451a:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800451e:	f107 0308 	add.w	r3, r7, #8
 8004522:	6819      	ldr	r1, [r3, #0]
 8004524:	f000 fb06 	bl	8004b34 <Osal_MemCpy>
    index_input += size;
 8004528:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800452c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004530:	4413      	add	r3, r2
 8004532:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8004536:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800453a:	1dba      	adds	r2, r7, #6
 800453c:	8812      	ldrh	r2, [r2, #0]
 800453e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004540:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004544:	3302      	adds	r3, #2
 8004546:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800454a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800454e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8004552:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8004554:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004558:	3301      	adds	r3, #1
 800455a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800455e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004562:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004566:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8004568:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800456c:	3301      	adds	r3, #1
 800456e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8004572:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004576:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800457a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800457c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004580:	3301      	adds	r3, #1
 8004582:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8004586:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800458a:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800458e:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8004590:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004594:	3301      	adds	r3, #1
 8004596:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800459a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800459e:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80045a2:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80045a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80045a8:	3301      	adds	r3, #1
 80045aa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80045ae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80045b2:	2218      	movs	r2, #24
 80045b4:	2100      	movs	r1, #0
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 facc 	bl	8004b54 <Osal_MemSet>
  rq.ogf = 0x3f;
 80045bc:	233f      	movs	r3, #63	; 0x3f
 80045be:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 80045c2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80045c6:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80045ca:	f107 0318 	add.w	r3, r7, #24
 80045ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80045d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80045d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80045da:	f107 0314 	add.w	r3, r7, #20
 80045de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80045e2:	2303      	movs	r3, #3
 80045e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80045e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80045ec:	2100      	movs	r1, #0
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fd8a 	bl	8005108 <hci_send_req>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	da01      	bge.n	80045fe <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 80045fa:	23ff      	movs	r3, #255	; 0xff
 80045fc:	e011      	b.n	8004622 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 80045fe:	f107 0314 	add.w	r3, r7, #20
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8004608:	f107 0314 	add.w	r3, r7, #20
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	e008      	b.n	8004622 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 8004610:	f107 0314 	add.w	r3, r7, #20
 8004614:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004618:	b29a      	uxth	r2, r3
 800461a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800461e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8004628:	46bd      	mov	sp, r7
 800462a:	bd90      	pop	{r4, r7, pc}

0800462c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800462c:	b5b0      	push	{r4, r5, r7, lr}
 800462e:	b0cc      	sub	sp, #304	; 0x130
 8004630:	af00      	add	r7, sp, #0
 8004632:	4605      	mov	r5, r0
 8004634:	460c      	mov	r4, r1
 8004636:	4610      	mov	r0, r2
 8004638:	4619      	mov	r1, r3
 800463a:	1dbb      	adds	r3, r7, #6
 800463c:	462a      	mov	r2, r5
 800463e:	801a      	strh	r2, [r3, #0]
 8004640:	1d3b      	adds	r3, r7, #4
 8004642:	4622      	mov	r2, r4
 8004644:	801a      	strh	r2, [r3, #0]
 8004646:	1cfb      	adds	r3, r7, #3
 8004648:	4602      	mov	r2, r0
 800464a:	701a      	strb	r2, [r3, #0]
 800464c:	1cbb      	adds	r3, r7, #2
 800464e:	460a      	mov	r2, r1
 8004650:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8004652:	f107 0310 	add.w	r3, r7, #16
 8004656:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800465a:	f107 030f 	add.w	r3, r7, #15
 800465e:	2200      	movs	r2, #0
 8004660:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004662:	2300      	movs	r3, #0
 8004664:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8004668:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800466c:	1dba      	adds	r2, r7, #6
 800466e:	8812      	ldrh	r2, [r2, #0]
 8004670:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004672:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004676:	3302      	adds	r3, #2
 8004678:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800467c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004680:	1d3a      	adds	r2, r7, #4
 8004682:	8812      	ldrh	r2, [r2, #0]
 8004684:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8004686:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800468a:	3302      	adds	r3, #2
 800468c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8004690:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004694:	1cfa      	adds	r2, r7, #3
 8004696:	7812      	ldrb	r2, [r2, #0]
 8004698:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800469a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800469e:	3301      	adds	r3, #1
 80046a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80046a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046a8:	1cba      	adds	r2, r7, #2
 80046aa:	7812      	ldrb	r2, [r2, #0]
 80046ac:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80046ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046b2:	3301      	adds	r3, #1
 80046b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80046b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046bc:	1d98      	adds	r0, r3, #6
 80046be:	1cbb      	adds	r3, r7, #2
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	461a      	mov	r2, r3
 80046c4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80046c8:	f000 fa34 	bl	8004b34 <Osal_MemCpy>
  index_input += Char_Value_Length;
 80046cc:	1cbb      	adds	r3, r7, #2
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80046d4:	4413      	add	r3, r2
 80046d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80046da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80046de:	2218      	movs	r2, #24
 80046e0:	2100      	movs	r1, #0
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fa36 	bl	8004b54 <Osal_MemSet>
  rq.ogf = 0x3f;
 80046e8:	233f      	movs	r3, #63	; 0x3f
 80046ea:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80046ee:	f44f 7383 	mov.w	r3, #262	; 0x106
 80046f2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80046f6:	f107 0310 	add.w	r3, r7, #16
 80046fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80046fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004702:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004706:	f107 030f 	add.w	r3, r7, #15
 800470a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800470e:	2301      	movs	r3, #1
 8004710:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004714:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004718:	2100      	movs	r1, #0
 800471a:	4618      	mov	r0, r3
 800471c:	f000 fcf4 	bl	8005108 <hci_send_req>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	da01      	bge.n	800472a <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8004726:	23ff      	movs	r3, #255	; 0xff
 8004728:	e002      	b.n	8004730 <aci_gatt_update_char_value+0x104>
  return status;
 800472a:	f107 030f 	add.w	r3, r7, #15
 800472e:	781b      	ldrb	r3, [r3, #0]
}
 8004730:	4618      	mov	r0, r3
 8004732:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004736:	46bd      	mov	sp, r7
 8004738:	bdb0      	pop	{r4, r5, r7, pc}

0800473a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b0cc      	sub	sp, #304	; 0x130
 800473e:	af00      	add	r7, sp, #0
 8004740:	463b      	mov	r3, r7
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	1dfb      	adds	r3, r7, #7
 8004746:	4602      	mov	r2, r0
 8004748:	701a      	strb	r2, [r3, #0]
 800474a:	1dbb      	adds	r3, r7, #6
 800474c:	460a      	mov	r2, r1
 800474e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8004750:	f107 0310 	add.w	r3, r7, #16
 8004754:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004758:	f107 030f 	add.w	r3, r7, #15
 800475c:	2200      	movs	r2, #0
 800475e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004760:	2300      	movs	r3, #0
 8004762:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8004766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800476a:	1dfa      	adds	r2, r7, #7
 800476c:	7812      	ldrb	r2, [r2, #0]
 800476e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004770:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004774:	3301      	adds	r3, #1
 8004776:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800477a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800477e:	1dba      	adds	r2, r7, #6
 8004780:	7812      	ldrb	r2, [r2, #0]
 8004782:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004784:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004788:	3301      	adds	r3, #1
 800478a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800478e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004792:	1c98      	adds	r0, r3, #2
 8004794:	1dbb      	adds	r3, r7, #6
 8004796:	781a      	ldrb	r2, [r3, #0]
 8004798:	463b      	mov	r3, r7
 800479a:	6819      	ldr	r1, [r3, #0]
 800479c:	f000 f9ca 	bl	8004b34 <Osal_MemCpy>
  index_input += Length;
 80047a0:	1dbb      	adds	r3, r7, #6
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80047a8:	4413      	add	r3, r2
 80047aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80047ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80047b2:	2218      	movs	r2, #24
 80047b4:	2100      	movs	r1, #0
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 f9cc 	bl	8004b54 <Osal_MemSet>
  rq.ogf = 0x3f;
 80047bc:	233f      	movs	r3, #63	; 0x3f
 80047be:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80047c2:	230c      	movs	r3, #12
 80047c4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80047c8:	f107 0310 	add.w	r3, r7, #16
 80047cc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80047d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80047d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80047d8:	f107 030f 	add.w	r3, r7, #15
 80047dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80047e0:	2301      	movs	r3, #1
 80047e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80047e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80047ea:	2100      	movs	r1, #0
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 fc8b 	bl	8005108 <hci_send_req>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	da01      	bge.n	80047fc <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 80047f8:	23ff      	movs	r3, #255	; 0xff
 80047fa:	e002      	b.n	8004802 <aci_hal_write_config_data+0xc8>
  return status;
 80047fc:	f107 030f 	add.w	r3, r7, #15
 8004800:	781b      	ldrb	r3, [r3, #0]
}
 8004802:	4618      	mov	r0, r3
 8004804:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b0cc      	sub	sp, #304	; 0x130
 8004810:	af00      	add	r7, sp, #0
 8004812:	4602      	mov	r2, r0
 8004814:	1dfb      	adds	r3, r7, #7
 8004816:	701a      	strb	r2, [r3, #0]
 8004818:	1dbb      	adds	r3, r7, #6
 800481a:	460a      	mov	r2, r1
 800481c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800481e:	f107 0310 	add.w	r3, r7, #16
 8004822:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004826:	f107 030f 	add.w	r3, r7, #15
 800482a:	2200      	movs	r2, #0
 800482c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800482e:	2300      	movs	r3, #0
 8004830:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8004834:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004838:	1dfa      	adds	r2, r7, #7
 800483a:	7812      	ldrb	r2, [r2, #0]
 800483c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800483e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004842:	3301      	adds	r3, #1
 8004844:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8004848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800484c:	1dba      	adds	r2, r7, #6
 800484e:	7812      	ldrb	r2, [r2, #0]
 8004850:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004852:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004856:	3301      	adds	r3, #1
 8004858:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800485c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004860:	2218      	movs	r2, #24
 8004862:	2100      	movs	r1, #0
 8004864:	4618      	mov	r0, r3
 8004866:	f000 f975 	bl	8004b54 <Osal_MemSet>
  rq.ogf = 0x3f;
 800486a:	233f      	movs	r3, #63	; 0x3f
 800486c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8004870:	230f      	movs	r3, #15
 8004872:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004876:	f107 0310 	add.w	r3, r7, #16
 800487a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800487e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004882:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004886:	f107 030f 	add.w	r3, r7, #15
 800488a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800488e:	2301      	movs	r3, #1
 8004890:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004894:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004898:	2100      	movs	r1, #0
 800489a:	4618      	mov	r0, r3
 800489c:	f000 fc34 	bl	8005108 <hci_send_req>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	da01      	bge.n	80048aa <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 80048a6:	23ff      	movs	r3, #255	; 0xff
 80048a8:	e002      	b.n	80048b0 <aci_hal_set_tx_power_level+0xa4>
  return status;
 80048aa:	f107 030f 	add.w	r3, r7, #15
 80048ae:	781b      	ldrb	r3, [r3, #0]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b0cc      	sub	sp, #304	; 0x130
 80048be:	af00      	add	r7, sp, #0
 80048c0:	4602      	mov	r2, r0
 80048c2:	1dbb      	adds	r3, r7, #6
 80048c4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80048c6:	f107 0310 	add.w	r3, r7, #16
 80048ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80048ce:	f107 030f 	add.w	r3, r7, #15
 80048d2:	2200      	movs	r2, #0
 80048d4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80048d6:	2300      	movs	r3, #0
 80048d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80048dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048e0:	1dba      	adds	r2, r7, #6
 80048e2:	8812      	ldrh	r2, [r2, #0]
 80048e4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80048e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80048ea:	3302      	adds	r3, #2
 80048ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80048f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048f4:	2218      	movs	r2, #24
 80048f6:	2100      	movs	r1, #0
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 f92b 	bl	8004b54 <Osal_MemSet>
  rq.ogf = 0x3f;
 80048fe:	233f      	movs	r3, #63	; 0x3f
 8004900:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8004904:	2318      	movs	r3, #24
 8004906:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800490a:	f107 0310 	add.w	r3, r7, #16
 800490e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004912:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004916:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800491a:	f107 030f 	add.w	r3, r7, #15
 800491e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004922:	2301      	movs	r3, #1
 8004924:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004928:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800492c:	2100      	movs	r1, #0
 800492e:	4618      	mov	r0, r3
 8004930:	f000 fbea 	bl	8005108 <hci_send_req>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	da01      	bge.n	800493e <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 800493a:	23ff      	movs	r3, #255	; 0xff
 800493c:	e002      	b.n	8004944 <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 800493e:	f107 030f 	add.w	r3, r7, #15
 8004942:	781b      	ldrb	r3, [r3, #0]
}
 8004944:	4618      	mov	r0, r3
 8004946:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b088      	sub	sp, #32
 8004952:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004954:	2300      	movs	r3, #0
 8004956:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004958:	f107 0308 	add.w	r3, r7, #8
 800495c:	2218      	movs	r2, #24
 800495e:	2100      	movs	r1, #0
 8004960:	4618      	mov	r0, r3
 8004962:	f000 f8f7 	bl	8004b54 <Osal_MemSet>
  rq.ogf = 0x03;
 8004966:	2303      	movs	r3, #3
 8004968:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800496a:	2303      	movs	r3, #3
 800496c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800496e:	1dfb      	adds	r3, r7, #7
 8004970:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004972:	2301      	movs	r3, #1
 8004974:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004976:	f107 0308 	add.w	r3, r7, #8
 800497a:	2100      	movs	r1, #0
 800497c:	4618      	mov	r0, r3
 800497e:	f000 fbc3 	bl	8005108 <hci_send_req>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	da01      	bge.n	800498c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8004988:	23ff      	movs	r3, #255	; 0xff
 800498a:	e000      	b.n	800498e <hci_reset+0x40>
  return status;
 800498c:	79fb      	ldrb	r3, [r7, #7]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3720      	adds	r7, #32
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b0ce      	sub	sp, #312	; 0x138
 800499a:	af00      	add	r7, sp, #0
 800499c:	f107 0308 	add.w	r3, r7, #8
 80049a0:	6019      	str	r1, [r3, #0]
 80049a2:	1d3b      	adds	r3, r7, #4
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	f107 030e 	add.w	r3, r7, #14
 80049aa:	4602      	mov	r2, r0
 80049ac:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 80049ae:	f107 0318 	add.w	r3, r7, #24
 80049b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80049b6:	f107 0310 	add.w	r3, r7, #16
 80049ba:	2205      	movs	r2, #5
 80049bc:	2100      	movs	r1, #0
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 f8c8 	bl	8004b54 <Osal_MemSet>
  int index_input = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 80049ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80049ce:	f107 020e 	add.w	r2, r7, #14
 80049d2:	8812      	ldrh	r2, [r2, #0]
 80049d4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80049d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80049da:	3302      	adds	r3, #2
 80049dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80049e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80049e4:	2218      	movs	r2, #24
 80049e6:	2100      	movs	r1, #0
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 f8b3 	bl	8004b54 <Osal_MemSet>
  rq.ogf = 0x08;
 80049ee:	2308      	movs	r3, #8
 80049f0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 80049f4:	2330      	movs	r3, #48	; 0x30
 80049f6:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80049fa:	f107 0318 	add.w	r3, r7, #24
 80049fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8004a02:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004a06:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8004a0a:	f107 0310 	add.w	r3, r7, #16
 8004a0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8004a12:	2305      	movs	r3, #5
 8004a14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004a18:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fb72 	bl	8005108 <hci_send_req>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	da01      	bge.n	8004a2e <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 8004a2a:	23ff      	movs	r3, #255	; 0xff
 8004a2c:	e016      	b.n	8004a5c <hci_le_read_phy+0xc6>
  if ( resp.Status )
 8004a2e:	f107 0310 	add.w	r3, r7, #16
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <hci_le_read_phy+0xaa>
    return resp.Status;
 8004a38:	f107 0310 	add.w	r3, r7, #16
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	e00d      	b.n	8004a5c <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 8004a40:	f107 0310 	add.w	r3, r7, #16
 8004a44:	78da      	ldrb	r2, [r3, #3]
 8004a46:	f107 0308 	add.w	r3, r7, #8
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 8004a4e:	f107 0310 	add.w	r3, r7, #16
 8004a52:	791a      	ldrb	r2, [r3, #4]
 8004a54:	1d3b      	adds	r3, r7, #4
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8004a66:	b590      	push	{r4, r7, lr}
 8004a68:	b0cd      	sub	sp, #308	; 0x134
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	4608      	mov	r0, r1
 8004a70:	4611      	mov	r1, r2
 8004a72:	1dfb      	adds	r3, r7, #7
 8004a74:	4622      	mov	r2, r4
 8004a76:	701a      	strb	r2, [r3, #0]
 8004a78:	1dbb      	adds	r3, r7, #6
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	701a      	strb	r2, [r3, #0]
 8004a7e:	1d7b      	adds	r3, r7, #5
 8004a80:	460a      	mov	r2, r1
 8004a82:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8004a84:	f107 0310 	add.w	r3, r7, #16
 8004a88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004a8c:	f107 030f 	add.w	r3, r7, #15
 8004a90:	2200      	movs	r2, #0
 8004a92:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004a94:	2300      	movs	r3, #0
 8004a96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8004a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a9e:	1dfa      	adds	r2, r7, #7
 8004aa0:	7812      	ldrb	r2, [r2, #0]
 8004aa2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004aa4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8004aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ab2:	1dba      	adds	r2, r7, #6
 8004ab4:	7812      	ldrb	r2, [r2, #0]
 8004ab6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004ab8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004abc:	3301      	adds	r3, #1
 8004abe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8004ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ac6:	1d7a      	adds	r2, r7, #5
 8004ac8:	7812      	ldrb	r2, [r2, #0]
 8004aca:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004acc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004ad6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ada:	2218      	movs	r2, #24
 8004adc:	2100      	movs	r1, #0
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 f838 	bl	8004b54 <Osal_MemSet>
  rq.ogf = 0x08;
 8004ae4:	2308      	movs	r3, #8
 8004ae6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8004aea:	2331      	movs	r3, #49	; 0x31
 8004aec:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004af0:	f107 0310 	add.w	r3, r7, #16
 8004af4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004af8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004afc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004b00:	f107 030f 	add.w	r3, r7, #15
 8004b04:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004b0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b12:	2100      	movs	r1, #0
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 faf7 	bl	8005108 <hci_send_req>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	da01      	bge.n	8004b24 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8004b20:	23ff      	movs	r3, #255	; 0xff
 8004b22:	e002      	b.n	8004b2a <hci_le_set_default_phy+0xc4>
  return status;
 8004b24:	f107 030f 	add.w	r3, r7, #15
 8004b28:	781b      	ldrb	r3, [r3, #0]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd90      	pop	{r4, r7, pc}

08004b34 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	68b9      	ldr	r1, [r7, #8]
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f002 f8c5 	bl	8006cd4 <memcpy>
 8004b4a:	4603      	mov	r3, r0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f002 f8c0 	bl	8006cea <memset>
 8004b6a:	4603      	mov	r3, r0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b08a      	sub	sp, #40	; 0x28
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	3301      	adds	r3, #1
 8004b86:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2bff      	cmp	r3, #255	; 0xff
 8004b8e:	d000      	beq.n	8004b92 <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8004b90:	e04a      	b.n	8004c28 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	3302      	adds	r3, #2
 8004b96:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f640 4301 	movw	r3, #3073	; 0xc01
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d000      	beq.n	8004baa <PeerToPeer_Event_Handler+0x36>
          break;
 8004ba8:	e03d      	b.n	8004c26 <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	3302      	adds	r3, #2
 8004bae:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	885b      	ldrh	r3, [r3, #2]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	4b1e      	ldr	r3, [pc, #120]	; (8004c34 <PeerToPeer_Event_Handler+0xc0>)
 8004bba:	889b      	ldrh	r3, [r3, #4]
 8004bbc:	3302      	adds	r3, #2
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d118      	bne.n	8004bf4 <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	7a1b      	ldrb	r3, [r3, #8]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d007      	beq.n	8004be4 <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8004bd8:	f107 0308 	add.w	r3, r7, #8
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f001 fb77 	bl	80062d0 <P2PS_STM_App_Notification>
        break;
 8004be2:	e01f      	b.n	8004c24 <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8004be4:	2301      	movs	r3, #1
 8004be6:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8004be8:	f107 0308 	add.w	r3, r7, #8
 8004bec:	4618      	mov	r0, r3
 8004bee:	f001 fb6f 	bl	80062d0 <P2PS_STM_App_Notification>
        break;
 8004bf2:	e017      	b.n	8004c24 <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	885b      	ldrh	r3, [r3, #2]
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	4b0d      	ldr	r3, [pc, #52]	; (8004c34 <PeerToPeer_Event_Handler+0xc0>)
 8004bfe:	885b      	ldrh	r3, [r3, #2]
 8004c00:	3301      	adds	r3, #1
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d10e      	bne.n	8004c24 <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	88db      	ldrh	r3, [r3, #6]
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	3308      	adds	r3, #8
 8004c18:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8004c1a:	f107 0308 	add.w	r3, r7, #8
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f001 fb56 	bl	80062d0 <P2PS_STM_App_Notification>
        break;
 8004c24:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 8004c26:	bf00      	nop
  }

  return(return_value);
 8004c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3728      	adds	r7, #40	; 0x28
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	200000c4 	.word	0x200000c4

08004c38 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08a      	sub	sp, #40	; 0x28
 8004c3c:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8004c3e:	484a      	ldr	r0, [pc, #296]	; (8004d68 <P2PS_STM_Init+0x130>)
 8004c40:	f000 f95a 	bl	8004ef8 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8004c44:	238f      	movs	r3, #143	; 0x8f
 8004c46:	703b      	strb	r3, [r7, #0]
 8004c48:	23e5      	movs	r3, #229	; 0xe5
 8004c4a:	707b      	strb	r3, [r7, #1]
 8004c4c:	23b3      	movs	r3, #179	; 0xb3
 8004c4e:	70bb      	strb	r3, [r7, #2]
 8004c50:	23d5      	movs	r3, #213	; 0xd5
 8004c52:	70fb      	strb	r3, [r7, #3]
 8004c54:	232e      	movs	r3, #46	; 0x2e
 8004c56:	713b      	strb	r3, [r7, #4]
 8004c58:	237f      	movs	r3, #127	; 0x7f
 8004c5a:	717b      	strb	r3, [r7, #5]
 8004c5c:	234a      	movs	r3, #74	; 0x4a
 8004c5e:	71bb      	strb	r3, [r7, #6]
 8004c60:	2398      	movs	r3, #152	; 0x98
 8004c62:	71fb      	strb	r3, [r7, #7]
 8004c64:	232a      	movs	r3, #42	; 0x2a
 8004c66:	723b      	strb	r3, [r7, #8]
 8004c68:	2348      	movs	r3, #72	; 0x48
 8004c6a:	727b      	strb	r3, [r7, #9]
 8004c6c:	237a      	movs	r3, #122	; 0x7a
 8004c6e:	72bb      	strb	r3, [r7, #10]
 8004c70:	23cc      	movs	r3, #204	; 0xcc
 8004c72:	72fb      	strb	r3, [r7, #11]
 8004c74:	2340      	movs	r3, #64	; 0x40
 8004c76:	733b      	strb	r3, [r7, #12]
 8004c78:	23fe      	movs	r3, #254	; 0xfe
 8004c7a:	737b      	strb	r3, [r7, #13]
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	73bb      	strb	r3, [r7, #14]
 8004c80:	2300      	movs	r3, #0
 8004c82:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8004c84:	4639      	mov	r1, r7
 8004c86:	4b39      	ldr	r3, [pc, #228]	; (8004d6c <P2PS_STM_Init+0x134>)
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	2308      	movs	r3, #8
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	2002      	movs	r0, #2
 8004c90:	f7ff fb33 	bl	80042fa <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8004c94:	2319      	movs	r3, #25
 8004c96:	703b      	strb	r3, [r7, #0]
 8004c98:	23ed      	movs	r3, #237	; 0xed
 8004c9a:	707b      	strb	r3, [r7, #1]
 8004c9c:	2382      	movs	r3, #130	; 0x82
 8004c9e:	70bb      	strb	r3, [r7, #2]
 8004ca0:	23ae      	movs	r3, #174	; 0xae
 8004ca2:	70fb      	strb	r3, [r7, #3]
 8004ca4:	23ed      	movs	r3, #237	; 0xed
 8004ca6:	713b      	strb	r3, [r7, #4]
 8004ca8:	2321      	movs	r3, #33	; 0x21
 8004caa:	717b      	strb	r3, [r7, #5]
 8004cac:	234c      	movs	r3, #76	; 0x4c
 8004cae:	71bb      	strb	r3, [r7, #6]
 8004cb0:	239d      	movs	r3, #157	; 0x9d
 8004cb2:	71fb      	strb	r3, [r7, #7]
 8004cb4:	2341      	movs	r3, #65	; 0x41
 8004cb6:	723b      	strb	r3, [r7, #8]
 8004cb8:	2345      	movs	r3, #69	; 0x45
 8004cba:	727b      	strb	r3, [r7, #9]
 8004cbc:	2322      	movs	r3, #34	; 0x22
 8004cbe:	72bb      	strb	r3, [r7, #10]
 8004cc0:	238e      	movs	r3, #142	; 0x8e
 8004cc2:	72fb      	strb	r3, [r7, #11]
 8004cc4:	2341      	movs	r3, #65	; 0x41
 8004cc6:	733b      	strb	r3, [r7, #12]
 8004cc8:	23fe      	movs	r3, #254	; 0xfe
 8004cca:	737b      	strb	r3, [r7, #13]
 8004ccc:	2300      	movs	r3, #0
 8004cce:	73bb      	strb	r3, [r7, #14]
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8004cd4:	4b25      	ldr	r3, [pc, #148]	; (8004d6c <P2PS_STM_Init+0x134>)
 8004cd6:	8818      	ldrh	r0, [r3, #0]
 8004cd8:	463a      	mov	r2, r7
 8004cda:	4b25      	ldr	r3, [pc, #148]	; (8004d70 <P2PS_STM_Init+0x138>)
 8004cdc:	9305      	str	r3, [sp, #20]
 8004cde:	2301      	movs	r3, #1
 8004ce0:	9304      	str	r3, [sp, #16]
 8004ce2:	230a      	movs	r3, #10
 8004ce4:	9303      	str	r3, [sp, #12]
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	9302      	str	r3, [sp, #8]
 8004cea:	2300      	movs	r3, #0
 8004cec:	9301      	str	r3, [sp, #4]
 8004cee:	2306      	movs	r3, #6
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	2102      	movs	r1, #2
 8004cf6:	f7ff fbaf 	bl	8004458 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8004cfa:	2319      	movs	r3, #25
 8004cfc:	703b      	strb	r3, [r7, #0]
 8004cfe:	23ed      	movs	r3, #237	; 0xed
 8004d00:	707b      	strb	r3, [r7, #1]
 8004d02:	2382      	movs	r3, #130	; 0x82
 8004d04:	70bb      	strb	r3, [r7, #2]
 8004d06:	23ae      	movs	r3, #174	; 0xae
 8004d08:	70fb      	strb	r3, [r7, #3]
 8004d0a:	23ed      	movs	r3, #237	; 0xed
 8004d0c:	713b      	strb	r3, [r7, #4]
 8004d0e:	2321      	movs	r3, #33	; 0x21
 8004d10:	717b      	strb	r3, [r7, #5]
 8004d12:	234c      	movs	r3, #76	; 0x4c
 8004d14:	71bb      	strb	r3, [r7, #6]
 8004d16:	239d      	movs	r3, #157	; 0x9d
 8004d18:	71fb      	strb	r3, [r7, #7]
 8004d1a:	2341      	movs	r3, #65	; 0x41
 8004d1c:	723b      	strb	r3, [r7, #8]
 8004d1e:	2345      	movs	r3, #69	; 0x45
 8004d20:	727b      	strb	r3, [r7, #9]
 8004d22:	2322      	movs	r3, #34	; 0x22
 8004d24:	72bb      	strb	r3, [r7, #10]
 8004d26:	238e      	movs	r3, #142	; 0x8e
 8004d28:	72fb      	strb	r3, [r7, #11]
 8004d2a:	2342      	movs	r3, #66	; 0x42
 8004d2c:	733b      	strb	r3, [r7, #12]
 8004d2e:	23fe      	movs	r3, #254	; 0xfe
 8004d30:	737b      	strb	r3, [r7, #13]
 8004d32:	2300      	movs	r3, #0
 8004d34:	73bb      	strb	r3, [r7, #14]
 8004d36:	2300      	movs	r3, #0
 8004d38:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8004d3a:	4b0c      	ldr	r3, [pc, #48]	; (8004d6c <P2PS_STM_Init+0x134>)
 8004d3c:	8818      	ldrh	r0, [r3, #0]
 8004d3e:	463a      	mov	r2, r7
 8004d40:	4b0c      	ldr	r3, [pc, #48]	; (8004d74 <P2PS_STM_Init+0x13c>)
 8004d42:	9305      	str	r3, [sp, #20]
 8004d44:	2301      	movs	r3, #1
 8004d46:	9304      	str	r3, [sp, #16]
 8004d48:	230a      	movs	r3, #10
 8004d4a:	9303      	str	r3, [sp, #12]
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	9302      	str	r3, [sp, #8]
 8004d50:	2300      	movs	r3, #0
 8004d52:	9301      	str	r3, [sp, #4]
 8004d54:	2310      	movs	r3, #16
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	2302      	movs	r3, #2
 8004d5a:	2102      	movs	r1, #2
 8004d5c:	f7ff fb7c 	bl	8004458 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8004d60:	bf00      	nop
}
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	08004b75 	.word	0x08004b75
 8004d6c:	200000c4 	.word	0x200000c4
 8004d70:	200000c6 	.word	0x200000c6
 8004d74:	200000c8 	.word	0x200000c8

08004d78 <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af02      	add	r7, sp, #8
 8004d7e:	4603      	mov	r3, r0
 8004d80:	6039      	str	r1, [r7, #0]
 8004d82:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8004d84:	2342      	movs	r3, #66	; 0x42
 8004d86:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 8004d88:	88fb      	ldrh	r3, [r7, #6]
 8004d8a:	f64f 6242 	movw	r2, #65090	; 0xfe42
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d000      	beq.n	8004d94 <P2PS_STM_App_Update_Char+0x1c>
                             (uint8_t *)  pPayload);
    
      break;

    default:
      break;
 8004d92:	e00c      	b.n	8004dae <P2PS_STM_App_Update_Char+0x36>
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 8004d94:	4b08      	ldr	r3, [pc, #32]	; (8004db8 <P2PS_STM_App_Update_Char+0x40>)
 8004d96:	8818      	ldrh	r0, [r3, #0]
 8004d98:	4b07      	ldr	r3, [pc, #28]	; (8004db8 <P2PS_STM_App_Update_Char+0x40>)
 8004d9a:	8899      	ldrh	r1, [r3, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	2302      	movs	r3, #2
 8004da2:	2200      	movs	r2, #0
 8004da4:	f7ff fc42 	bl	800462c <aci_gatt_update_char_value>
 8004da8:	4603      	mov	r3, r0
 8004daa:	73fb      	strb	r3, [r7, #15]
      break;
 8004dac:	bf00      	nop
  }

  return result;
 8004dae:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	200000c4 	.word	0x200000c4

08004dbc <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  return;
 8004dc0:	bf00      	nop
}
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8004dca:	b480      	push	{r7}
 8004dcc:	af00      	add	r7, sp, #0
  return;
 8004dce:	bf00      	nop
}
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <DIS_Init>:
__weak void DIS_Init( void )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  return;
 8004ddc:	bf00      	nop
}
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 8004de6:	b480      	push	{r7}
 8004de8:	af00      	add	r7, sp, #0
  return;
 8004dea:	bf00      	nop
}
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
  return;
 8004df8:	bf00      	nop
}
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <HRS_Init>:
__weak void HRS_Init( void )
{
 8004e02:	b480      	push	{r7}
 8004e04:	af00      	add	r7, sp, #0
  return;
 8004e06:	bf00      	nop
}
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <HTS_Init>:
__weak void HTS_Init( void )
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
  return;
 8004e14:	bf00      	nop
}
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <IAS_Init>:
__weak void IAS_Init( void )
{
 8004e1e:	b480      	push	{r7}
 8004e20:	af00      	add	r7, sp, #0
  return;
 8004e22:	bf00      	nop
}
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <LLS_Init>:
__weak void LLS_Init( void )
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
  return;
 8004e30:	bf00      	nop
}
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <TPS_Init>:
__weak void TPS_Init( void )
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	af00      	add	r7, sp, #0
  return;
 8004e3e:	bf00      	nop
}
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
  return;
 8004e4c:	bf00      	nop
}
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 8004e56:	b480      	push	{r7}
 8004e58:	af00      	add	r7, sp, #0
  return;
 8004e5a:	bf00      	nop
}
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <MESH_Init>:
__weak void MESH_Init( void )
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  return;
 8004e68:	bf00      	nop
}
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8004e72:	b480      	push	{r7}
 8004e74:	af00      	add	r7, sp, #0
  return;
 8004e76:	bf00      	nop
}
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  return;
 8004e84:	bf00      	nop
}
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
	...

08004e90 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8004e94:	4b04      	ldr	r3, [pc, #16]	; (8004ea8 <SVCCTL_Init+0x18>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8004e9a:	4b04      	ldr	r3, [pc, #16]	; (8004eac <SVCCTL_Init+0x1c>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8004ea0:	f000 f806 	bl	8004eb0 <SVCCTL_SvcInit>

  return;
 8004ea4:	bf00      	nop
}
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	200000cc 	.word	0x200000cc
 8004eac:	200000ec 	.word	0x200000ec

08004eb0 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  BLS_Init();
 8004eb4:	f7ff ff82 	bl	8004dbc <BLS_Init>

  CRS_STM_Init();
 8004eb8:	f7ff ff87 	bl	8004dca <CRS_STM_Init>

  DIS_Init();
 8004ebc:	f7ff ff8c 	bl	8004dd8 <DIS_Init>

  EDS_STM_Init();
 8004ec0:	f7ff ff91 	bl	8004de6 <EDS_STM_Init>

  HIDS_Init();
 8004ec4:	f7ff ff96 	bl	8004df4 <HIDS_Init>

  HRS_Init();
 8004ec8:	f7ff ff9b 	bl	8004e02 <HRS_Init>

  HTS_Init();
 8004ecc:	f7ff ffa0 	bl	8004e10 <HTS_Init>

  IAS_Init();
 8004ed0:	f7ff ffa5 	bl	8004e1e <IAS_Init>

  LLS_Init();
 8004ed4:	f7ff ffaa 	bl	8004e2c <LLS_Init>

  TPS_Init();
 8004ed8:	f7ff ffaf 	bl	8004e3a <TPS_Init>

  MOTENV_STM_Init();
 8004edc:	f7ff ffb4 	bl	8004e48 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8004ee0:	f7ff feaa 	bl	8004c38 <P2PS_STM_Init>

  OTAS_STM_Init();
 8004ee4:	f7ff ffb7 	bl	8004e56 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8004ee8:	f7ff ffc3 	bl	8004e72 <BVOPUS_STM_Init>

  MESH_Init();
 8004eec:	f7ff ffba 	bl	8004e64 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8004ef0:	f7ff ffc6 	bl	8004e80 <SVCCTL_InitCustomSvc>
  
  return;
 8004ef4:	bf00      	nop
}
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8004f00:	4b09      	ldr	r3, [pc, #36]	; (8004f28 <SVCCTL_RegisterSvcHandler+0x30>)
 8004f02:	7f1b      	ldrb	r3, [r3, #28]
 8004f04:	4619      	mov	r1, r3
 8004f06:	4a08      	ldr	r2, [pc, #32]	; (8004f28 <SVCCTL_RegisterSvcHandler+0x30>)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8004f0e:	4b06      	ldr	r3, [pc, #24]	; (8004f28 <SVCCTL_RegisterSvcHandler+0x30>)
 8004f10:	7f1b      	ldrb	r3, [r3, #28]
 8004f12:	3301      	adds	r3, #1
 8004f14:	b2da      	uxtb	r2, r3
 8004f16:	4b04      	ldr	r3, [pc, #16]	; (8004f28 <SVCCTL_RegisterSvcHandler+0x30>)
 8004f18:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8004f1a:	bf00      	nop
}
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	200000cc 	.word	0x200000cc

08004f2c <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3301      	adds	r3, #1
 8004f38:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	2bff      	cmp	r3, #255	; 0xff
 8004f44:	d000      	beq.n	8004f48 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8004f46:	e025      	b.n	8004f94 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	3302      	adds	r3, #2
 8004f4c:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004f58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f5c:	d000      	beq.n	8004f60 <SVCCTL_UserEvtRx+0x34>
          break;
 8004f5e:	e018      	b.n	8004f92 <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8004f60:	2300      	movs	r3, #0
 8004f62:	757b      	strb	r3, [r7, #21]
 8004f64:	e00d      	b.n	8004f82 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8004f66:	7d7b      	ldrb	r3, [r7, #21]
 8004f68:	4a18      	ldr	r2, [pc, #96]	; (8004fcc <SVCCTL_UserEvtRx+0xa0>)
 8004f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	4798      	blx	r3
 8004f72:	4603      	mov	r3, r0
 8004f74:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 8004f76:	7dfb      	ldrb	r3, [r7, #23]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d108      	bne.n	8004f8e <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8004f7c:	7d7b      	ldrb	r3, [r7, #21]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	757b      	strb	r3, [r7, #21]
 8004f82:	4b12      	ldr	r3, [pc, #72]	; (8004fcc <SVCCTL_UserEvtRx+0xa0>)
 8004f84:	7f1b      	ldrb	r3, [r3, #28]
 8004f86:	7d7a      	ldrb	r2, [r7, #21]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d3ec      	bcc.n	8004f66 <SVCCTL_UserEvtRx+0x3a>
          break;
 8004f8c:	e000      	b.n	8004f90 <SVCCTL_UserEvtRx+0x64>
              break;
 8004f8e:	bf00      	nop
          break;
 8004f90:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 8004f92:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8004f94:	7dfb      	ldrb	r3, [r7, #23]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d009      	beq.n	8004fae <SVCCTL_UserEvtRx+0x82>
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d00a      	beq.n	8004fb4 <SVCCTL_UserEvtRx+0x88>
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10b      	bne.n	8004fba <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 febe 	bl	8005d24 <SVCCTL_App_Notification>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	75bb      	strb	r3, [r7, #22]
      break;
 8004fac:	e008      	b.n	8004fc0 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	75bb      	strb	r3, [r7, #22]
      break;
 8004fb2:	e005      	b.n	8004fc0 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	75bb      	strb	r3, [r7, #22]
      break;
 8004fb8:	e002      	b.n	8004fc0 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	75bb      	strb	r3, [r7, #22]
      break;
 8004fbe:	bf00      	nop
  }

  return (return_status);
 8004fc0:	7dbb      	ldrb	r3, [r7, #22]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	200000cc 	.word	0x200000cc

08004fd0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8004fd8:	f107 030c 	add.w	r3, r7, #12
 8004fdc:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	2121      	movs	r1, #33	; 0x21
 8004fe8:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8004fec:	f000 fa5e 	bl	80054ac <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	330b      	adds	r3, #11
 8004ff4:	78db      	ldrb	r3, [r3, #3]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3720      	adds	r7, #32
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b088      	sub	sp, #32
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8005006:	f107 030c 	add.w	r3, r7, #12
 800500a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	210f      	movs	r1, #15
 8005016:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800501a:	f000 fa47 	bl	80054ac <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	330b      	adds	r3, #11
 8005022:	78db      	ldrb	r3, [r3, #3]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3720      	adds	r7, #32
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <hci_init>:
static void OutputRspTrace(TL_EvtPacket_t *hcievt);
static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer);

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	4a08      	ldr	r2, [pc, #32]	; (800505c <hci_init+0x30>)
 800503c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800503e:	4a08      	ldr	r2, [pc, #32]	; (8005060 <hci_init+0x34>)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8005044:	4806      	ldr	r0, [pc, #24]	; (8005060 <hci_init+0x34>)
 8005046:	f000 f9af 	bl	80053a8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4618      	mov	r0, r3
 8005050:	f000 f8dc 	bl	800520c <TlInit>

  return;
 8005054:	bf00      	nop
}
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	20000200 	.word	0x20000200
 8005060:	200001d8 	.word	0x200001d8

08005064 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800506a:	4824      	ldr	r0, [pc, #144]	; (80050fc <hci_user_evt_proc+0x98>)
 800506c:	f000 fd2a 	bl	8005ac4 <LST_is_empty>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d12f      	bne.n	80050d6 <hci_user_evt_proc+0x72>
 8005076:	4b22      	ldr	r3, [pc, #136]	; (8005100 <hci_user_evt_proc+0x9c>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d02b      	beq.n	80050d6 <hci_user_evt_proc+0x72>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800507e:	f107 030c 	add.w	r3, r7, #12
 8005082:	4619      	mov	r1, r3
 8005084:	481d      	ldr	r0, [pc, #116]	; (80050fc <hci_user_evt_proc+0x98>)
 8005086:	f000 fda4 	bl	8005bd2 <LST_remove_head>

    OutputEvtTrace(phcievtbuffer);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4618      	mov	r0, r3
 800508e:	f000 f97b 	bl	8005388 <OutputEvtTrace>

    if (hciContext.UserEvtRx != NULL)
 8005092:	4b1c      	ldr	r3, [pc, #112]	; (8005104 <hci_user_evt_proc+0xa0>)
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00c      	beq.n	80050b4 <hci_user_evt_proc+0x50>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800509e:	2301      	movs	r3, #1
 80050a0:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80050a2:	4b18      	ldr	r3, [pc, #96]	; (8005104 <hci_user_evt_proc+0xa0>)
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	1d3a      	adds	r2, r7, #4
 80050a8:	4610      	mov	r0, r2
 80050aa:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80050ac:	793a      	ldrb	r2, [r7, #4]
 80050ae:	4b14      	ldr	r3, [pc, #80]	; (8005100 <hci_user_evt_proc+0x9c>)
 80050b0:	701a      	strb	r2, [r3, #0]
 80050b2:	e002      	b.n	80050ba <hci_user_evt_proc+0x56>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80050b4:	4b12      	ldr	r3, [pc, #72]	; (8005100 <hci_user_evt_proc+0x9c>)
 80050b6:	2201      	movs	r2, #1
 80050b8:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80050ba:	4b11      	ldr	r3, [pc, #68]	; (8005100 <hci_user_evt_proc+0x9c>)
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d004      	beq.n	80050cc <hci_user_evt_proc+0x68>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fc41 	bl	800594c <TL_MM_EvtDone>
 80050ca:	e004      	b.n	80050d6 <hci_user_evt_proc+0x72>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4619      	mov	r1, r3
 80050d0:	480a      	ldr	r0, [pc, #40]	; (80050fc <hci_user_evt_proc+0x98>)
 80050d2:	f000 fd17 	bl	8005b04 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80050d6:	4809      	ldr	r0, [pc, #36]	; (80050fc <hci_user_evt_proc+0x98>)
 80050d8:	f000 fcf4 	bl	8005ac4 <LST_is_empty>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d107      	bne.n	80050f2 <hci_user_evt_proc+0x8e>
 80050e2:	4b07      	ldr	r3, [pc, #28]	; (8005100 <hci_user_evt_proc+0x9c>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <hci_user_evt_proc+0x8e>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80050ea:	4804      	ldr	r0, [pc, #16]	; (80050fc <hci_user_evt_proc+0x98>)
 80050ec:	f001 f897 	bl	800621e <hci_notify_asynch_evt>
  }


  return;
 80050f0:	bf00      	nop
 80050f2:	bf00      	nop
}
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	200000f4 	.word	0x200000f4
 8005100:	20000100 	.word	0x20000100
 8005104:	200001d8 	.word	0x200001d8

08005108 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	460b      	mov	r3, r1
 8005112:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8005114:	2000      	movs	r0, #0
 8005116:	f000 f8d5 	bl	80052c4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800511a:	2300      	movs	r3, #0
 800511c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	885b      	ldrh	r3, [r3, #2]
 8005122:	b21b      	sxth	r3, r3
 8005124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005128:	b21a      	sxth	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	029b      	lsls	r3, r3, #10
 8005130:	b21b      	sxth	r3, r3
 8005132:	4313      	orrs	r3, r2
 8005134:	b21b      	sxth	r3, r3
 8005136:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	b2d9      	uxtb	r1, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	8bbb      	ldrh	r3, [r7, #28]
 8005144:	4618      	mov	r0, r3
 8005146:	f000 f891 	bl	800526c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800514a:	e052      	b.n	80051f2 <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800514c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8005150:	f001 f87c 	bl	800624c <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8005154:	e047      	b.n	80051e6 <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8005156:	f107 030c 	add.w	r3, r7, #12
 800515a:	4619      	mov	r1, r3
 800515c:	482a      	ldr	r0, [pc, #168]	; (8005208 <hci_send_req+0x100>)
 800515e:	f000 fd38 	bl	8005bd2 <LST_remove_head>

      OutputRspTrace(pevtpacket);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4618      	mov	r0, r3
 8005166:	f000 f8fb 	bl	8005360 <OutputRspTrace>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	7a5b      	ldrb	r3, [r3, #9]
 800516e:	2b0f      	cmp	r3, #15
 8005170:	d114      	bne.n	800519c <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	330b      	adds	r3, #11
 8005176:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	885b      	ldrh	r3, [r3, #2]
 800517c:	b29b      	uxth	r3, r3
 800517e:	8bba      	ldrh	r2, [r7, #28]
 8005180:	429a      	cmp	r2, r3
 8005182:	d104      	bne.n	800518e <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	7812      	ldrb	r2, [r2, #0]
 800518c:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	785b      	ldrb	r3, [r3, #1]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d027      	beq.n	80051e6 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8005196:	2301      	movs	r3, #1
 8005198:	77fb      	strb	r3, [r7, #31]
 800519a:	e024      	b.n	80051e6 <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	330b      	adds	r3, #11
 80051a0:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	8bba      	ldrh	r2, [r7, #28]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d114      	bne.n	80051da <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	7a9b      	ldrb	r3, [r3, #10]
 80051b4:	3b03      	subs	r3, #3
 80051b6:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	695a      	ldr	r2, [r3, #20]
 80051bc:	7dfb      	ldrb	r3, [r7, #23]
 80051be:	429a      	cmp	r2, r3
 80051c0:	bfa8      	it	ge
 80051c2:	461a      	movge	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6918      	ldr	r0, [r3, #16]
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	1cd9      	adds	r1, r3, #3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	461a      	mov	r2, r3
 80051d6:	f001 fd7d 	bl	8006cd4 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80051e2:	2301      	movs	r3, #1
 80051e4:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80051e6:	4808      	ldr	r0, [pc, #32]	; (8005208 <hci_send_req+0x100>)
 80051e8:	f000 fc6c 	bl	8005ac4 <LST_is_empty>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d0b1      	beq.n	8005156 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80051f2:	7ffb      	ldrb	r3, [r7, #31]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0a9      	beq.n	800514c <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80051f8:	2001      	movs	r0, #1
 80051fa:	f000 f863 	bl	80052c4 <NotifyCmdStatus>

  return 0;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3720      	adds	r7, #32
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	200001f8 	.word	0x200001f8

0800520c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8005214:	480f      	ldr	r0, [pc, #60]	; (8005254 <TlInit+0x48>)
 8005216:	f000 fc45 	bl	8005aa4 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800521a:	4a0f      	ldr	r2, [pc, #60]	; (8005258 <TlInit+0x4c>)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8005220:	480e      	ldr	r0, [pc, #56]	; (800525c <TlInit+0x50>)
 8005222:	f000 fc3f 	bl	8005aa4 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8005226:	4b0e      	ldr	r3, [pc, #56]	; (8005260 <TlInit+0x54>)
 8005228:	2201      	movs	r2, #1
 800522a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800522c:	4b0d      	ldr	r3, [pc, #52]	; (8005264 <TlInit+0x58>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00a      	beq.n	800524a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8005238:	4b0b      	ldr	r3, [pc, #44]	; (8005268 <TlInit+0x5c>)
 800523a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800523c:	4b09      	ldr	r3, [pc, #36]	; (8005264 <TlInit+0x58>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f107 0208 	add.w	r2, r7, #8
 8005244:	4610      	mov	r0, r2
 8005246:	4798      	blx	r3
  }

  return;
 8005248:	bf00      	nop
 800524a:	bf00      	nop
}
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	200001f8 	.word	0x200001f8
 8005258:	200000fc 	.word	0x200000fc
 800525c:	200000f4 	.word	0x200000f4
 8005260:	20000100 	.word	0x20000100
 8005264:	200001d8 	.word	0x200001d8
 8005268:	08005305 	.word	0x08005305

0800526c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	4603      	mov	r3, r0
 8005274:	603a      	str	r2, [r7, #0]
 8005276:	80fb      	strh	r3, [r7, #6]
 8005278:	460b      	mov	r3, r1
 800527a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800527c:	4b0f      	ldr	r3, [pc, #60]	; (80052bc <SendCmd+0x50>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	88fa      	ldrh	r2, [r7, #6]
 8005282:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8005286:	4b0d      	ldr	r3, [pc, #52]	; (80052bc <SendCmd+0x50>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	797a      	ldrb	r2, [r7, #5]
 800528c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800528e:	4b0b      	ldr	r3, [pc, #44]	; (80052bc <SendCmd+0x50>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	330c      	adds	r3, #12
 8005294:	797a      	ldrb	r2, [r7, #5]
 8005296:	6839      	ldr	r1, [r7, #0]
 8005298:	4618      	mov	r0, r3
 800529a:	f001 fd1b 	bl	8006cd4 <memcpy>

  OutputCmdTrace(pCmdBuffer);
 800529e:	4b07      	ldr	r3, [pc, #28]	; (80052bc <SendCmd+0x50>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 f852 	bl	800534c <OutputCmdTrace>

  hciContext.io.Send(0,0);
 80052a8:	4b05      	ldr	r3, [pc, #20]	; (80052c0 <SendCmd+0x54>)
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	2100      	movs	r1, #0
 80052ae:	2000      	movs	r0, #0
 80052b0:	4798      	blx	r3

  return;
 80052b2:	bf00      	nop
}
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	200000fc 	.word	0x200000fc
 80052c0:	200001d8 	.word	0x200001d8

080052c4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	4603      	mov	r3, r0
 80052cc:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80052ce:	79fb      	ldrb	r3, [r7, #7]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d108      	bne.n	80052e6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80052d4:	4b0a      	ldr	r3, [pc, #40]	; (8005300 <NotifyCmdStatus+0x3c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00d      	beq.n	80052f8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80052dc:	4b08      	ldr	r3, [pc, #32]	; (8005300 <NotifyCmdStatus+0x3c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2000      	movs	r0, #0
 80052e2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80052e4:	e008      	b.n	80052f8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80052e6:	4b06      	ldr	r3, [pc, #24]	; (8005300 <NotifyCmdStatus+0x3c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d004      	beq.n	80052f8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80052ee:	4b04      	ldr	r3, [pc, #16]	; (8005300 <NotifyCmdStatus+0x3c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2001      	movs	r0, #1
 80052f4:	4798      	blx	r3
  return;
 80052f6:	bf00      	nop
 80052f8:	bf00      	nop
}
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	20000200 	.word	0x20000200

08005304 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	7a5b      	ldrb	r3, [r3, #9]
 8005310:	2b0f      	cmp	r3, #15
 8005312:	d003      	beq.n	800531c <TlEvtReceived+0x18>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	7a5b      	ldrb	r3, [r3, #9]
 8005318:	2b0e      	cmp	r3, #14
 800531a:	d107      	bne.n	800532c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800531c:	6879      	ldr	r1, [r7, #4]
 800531e:	4809      	ldr	r0, [pc, #36]	; (8005344 <TlEvtReceived+0x40>)
 8005320:	f000 fc14 	bl	8005b4c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8005324:	2000      	movs	r0, #0
 8005326:	f000 ff86 	bl	8006236 <hci_cmd_resp_release>
 800532a:	e006      	b.n	800533a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	4806      	ldr	r0, [pc, #24]	; (8005348 <TlEvtReceived+0x44>)
 8005330:	f000 fc0c 	bl	8005b4c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005334:	4804      	ldr	r0, [pc, #16]	; (8005348 <TlEvtReceived+0x44>)
 8005336:	f000 ff72 	bl	800621e <hci_notify_asynch_evt>
  }

  return;
 800533a:	bf00      	nop
}
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	200001f8 	.word	0x200001f8
 8005348:	200000f4 	.word	0x200000f4

0800534c <OutputCmdTrace>:

static void OutputCmdTrace(TL_CmdPacket_t *pCmdBuffer)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
    TL_HCI_CMD_DBG_MSG(" payload:");
    TL_HCI_CMD_DBG_BUF(pCmdBuffer->cmdserial.cmd.payload, pCmdBuffer->cmdserial.cmd.plen, "");
  }
  TL_HCI_CMD_DBG_MSG("\r\n");

  return;
 8005354:	bf00      	nop
}
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <OutputRspTrace>:

static void OutputRspTrace(TL_EvtPacket_t *hcievt)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  switch(hcievt->evtserial.evt.evtcode)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	7a5b      	ldrb	r3, [r3, #9]
 800536c:	2b0e      	cmp	r3, #14
 800536e:	d002      	beq.n	8005376 <OutputRspTrace+0x16>
 8005370:	2b0f      	cmp	r3, #15
 8005372:	d002      	beq.n	800537a <OutputRspTrace+0x1a>
      }
      break;

    default:
      TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", hcievt->evtserial.evt.evtcode);
      break;
 8005374:	e002      	b.n	800537c <OutputRspTrace+0x1c>
      break;
 8005376:	bf00      	nop
 8005378:	e000      	b.n	800537c <OutputRspTrace+0x1c>
      break;
 800537a:	bf00      	nop
  }

  TL_HCI_CMD_DBG_MSG("\r\n");

  return;
 800537c:	bf00      	nop
}
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <OutputEvtTrace>:

static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  if(phcievtbuffer->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	7a5b      	ldrb	r3, [r3, #9]
 8005394:	2bff      	cmp	r3, #255	; 0xff
 8005396:	d100      	bne.n	800539a <OutputEvtTrace+0x12>
    }
  }

  TL_HCI_EVT_DBG_MSG("\r\n");

  return;
 8005398:	bf00      	nop
 800539a:	bf00      	nop
}
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
	...

080053a8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a05      	ldr	r2, [pc, #20]	; (80053c8 <hci_register_io_bus+0x20>)
 80053b4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a04      	ldr	r2, [pc, #16]	; (80053cc <hci_register_io_bus+0x24>)
 80053ba:	611a      	str	r2, [r3, #16]

  return;
 80053bc:	bf00      	nop
}
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	08005725 	.word	0x08005725
 80053cc:	0800578d 	.word	0x0800578d

080053d0 <shci_init>:
static void OutputRspTrace(TL_EvtPacket_t *p_rsp);
static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer);

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	4a08      	ldr	r2, [pc, #32]	; (8005400 <shci_init+0x30>)
 80053e0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80053e2:	4a08      	ldr	r2, [pc, #32]	; (8005404 <shci_init+0x34>)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80053e8:	4806      	ldr	r0, [pc, #24]	; (8005404 <shci_init+0x34>)
 80053ea:	f000 f947 	bl	800567c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 f8a0 	bl	8005538 <TlInit>

  return;
 80053f8:	bf00      	nop
}
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	20000224 	.word	0x20000224
 8005404:	20000204 	.word	0x20000204

08005408 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800540e:	4824      	ldr	r0, [pc, #144]	; (80054a0 <shci_user_evt_proc+0x98>)
 8005410:	f000 fb58 	bl	8005ac4 <LST_is_empty>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d12f      	bne.n	800547a <shci_user_evt_proc+0x72>
 800541a:	4b22      	ldr	r3, [pc, #136]	; (80054a4 <shci_user_evt_proc+0x9c>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d02b      	beq.n	800547a <shci_user_evt_proc+0x72>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8005422:	f107 030c 	add.w	r3, r7, #12
 8005426:	4619      	mov	r1, r3
 8005428:	481d      	ldr	r0, [pc, #116]	; (80054a0 <shci_user_evt_proc+0x98>)
 800542a:	f000 fbd2 	bl	8005bd2 <LST_remove_head>

    OutputEvtTrace(phcievtbuffer);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4618      	mov	r0, r3
 8005432:	f000 f913 	bl	800565c <OutputEvtTrace>

    if (shciContext.UserEvtRx != NULL)
 8005436:	4b1c      	ldr	r3, [pc, #112]	; (80054a8 <shci_user_evt_proc+0xa0>)
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00c      	beq.n	8005458 <shci_user_evt_proc+0x50>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8005442:	2301      	movs	r3, #1
 8005444:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8005446:	4b18      	ldr	r3, [pc, #96]	; (80054a8 <shci_user_evt_proc+0xa0>)
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	1d3a      	adds	r2, r7, #4
 800544c:	4610      	mov	r0, r2
 800544e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8005450:	793a      	ldrb	r2, [r7, #4]
 8005452:	4b14      	ldr	r3, [pc, #80]	; (80054a4 <shci_user_evt_proc+0x9c>)
 8005454:	701a      	strb	r2, [r3, #0]
 8005456:	e002      	b.n	800545e <shci_user_evt_proc+0x56>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005458:	4b12      	ldr	r3, [pc, #72]	; (80054a4 <shci_user_evt_proc+0x9c>)
 800545a:	2201      	movs	r2, #1
 800545c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800545e:	4b11      	ldr	r3, [pc, #68]	; (80054a4 <shci_user_evt_proc+0x9c>)
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d004      	beq.n	8005470 <shci_user_evt_proc+0x68>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4618      	mov	r0, r3
 800546a:	f000 fa6f 	bl	800594c <TL_MM_EvtDone>
 800546e:	e004      	b.n	800547a <shci_user_evt_proc+0x72>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4619      	mov	r1, r3
 8005474:	480a      	ldr	r0, [pc, #40]	; (80054a0 <shci_user_evt_proc+0x98>)
 8005476:	f000 fb45 	bl	8005b04 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800547a:	4809      	ldr	r0, [pc, #36]	; (80054a0 <shci_user_evt_proc+0x98>)
 800547c:	f000 fb22 	bl	8005ac4 <LST_is_empty>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d107      	bne.n	8005496 <shci_user_evt_proc+0x8e>
 8005486:	4b07      	ldr	r3, [pc, #28]	; (80054a4 <shci_user_evt_proc+0x9c>)
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <shci_user_evt_proc+0x8e>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800548e:	4804      	ldr	r0, [pc, #16]	; (80054a0 <shci_user_evt_proc+0x98>)
 8005490:	f7fa ff4f 	bl	8000332 <shci_notify_asynch_evt>
  }


  return;
 8005494:	bf00      	nop
 8005496:	bf00      	nop
}
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20000104 	.word	0x20000104
 80054a4:	20000114 	.word	0x20000114
 80054a8:	20000204 	.word	0x20000204

080054ac <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60ba      	str	r2, [r7, #8]
 80054b4:	607b      	str	r3, [r7, #4]
 80054b6:	4603      	mov	r3, r0
 80054b8:	81fb      	strh	r3, [r7, #14]
 80054ba:	460b      	mov	r3, r1
 80054bc:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80054be:	2000      	movs	r0, #0
 80054c0:	f000 f86c 	bl	800559c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80054c4:	4b1a      	ldr	r3, [pc, #104]	; (8005530 <shci_send+0x84>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	89fa      	ldrh	r2, [r7, #14]
 80054ca:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80054ce:	4b18      	ldr	r3, [pc, #96]	; (8005530 <shci_send+0x84>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	7b7a      	ldrb	r2, [r7, #13]
 80054d4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80054d6:	4b16      	ldr	r3, [pc, #88]	; (8005530 <shci_send+0x84>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	330c      	adds	r3, #12
 80054dc:	7b7a      	ldrb	r2, [r7, #13]
 80054de:	68b9      	ldr	r1, [r7, #8]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f001 fbf7 	bl	8006cd4 <memcpy>

  OutputCmdTrace(pCmdBuffer);
 80054e6:	4b12      	ldr	r3, [pc, #72]	; (8005530 <shci_send+0x84>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 f89c 	bl	8005628 <OutputCmdTrace>

  shciContext.io.Send(0,0);
 80054f0:	4b10      	ldr	r3, [pc, #64]	; (8005534 <shci_send+0x88>)
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	2100      	movs	r1, #0
 80054f6:	2000      	movs	r0, #0
 80054f8:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80054fa:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80054fe:	f7fa ff2f 	bl	8000360 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f103 0008 	add.w	r0, r3, #8
 8005508:	4b09      	ldr	r3, [pc, #36]	; (8005530 <shci_send+0x84>)
 800550a:	6819      	ldr	r1, [r3, #0]
 800550c:	4b08      	ldr	r3, [pc, #32]	; (8005530 <shci_send+0x84>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	789b      	ldrb	r3, [r3, #2]
 8005512:	3303      	adds	r3, #3
 8005514:	461a      	mov	r2, r3
 8005516:	f001 fbdd 	bl	8006cd4 <memcpy>

  OutputRspTrace(p_rsp);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f88e 	bl	800563c <OutputRspTrace>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005520:	2001      	movs	r0, #1
 8005522:	f000 f83b 	bl	800559c <Cmd_SetStatus>

  return;
 8005526:	bf00      	nop
}
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20000110 	.word	0x20000110
 8005534:	20000204 	.word	0x20000204

08005538 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8005540:	4a10      	ldr	r2, [pc, #64]	; (8005584 <TlInit+0x4c>)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8005546:	4810      	ldr	r0, [pc, #64]	; (8005588 <TlInit+0x50>)
 8005548:	f000 faac 	bl	8005aa4 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800554c:	2001      	movs	r0, #1
 800554e:	f000 f825 	bl	800559c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005552:	4b0e      	ldr	r3, [pc, #56]	; (800558c <TlInit+0x54>)
 8005554:	2201      	movs	r2, #1
 8005556:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8005558:	4b0d      	ldr	r3, [pc, #52]	; (8005590 <TlInit+0x58>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00c      	beq.n	800557a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8005564:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <TlInit+0x5c>)
 8005566:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8005568:	4b0b      	ldr	r3, [pc, #44]	; (8005598 <TlInit+0x60>)
 800556a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800556c:	4b08      	ldr	r3, [pc, #32]	; (8005590 <TlInit+0x58>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f107 020c 	add.w	r2, r7, #12
 8005574:	4610      	mov	r0, r2
 8005576:	4798      	blx	r3
  }

  return;
 8005578:	bf00      	nop
 800557a:	bf00      	nop
}
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	20000110 	.word	0x20000110
 8005588:	20000104 	.word	0x20000104
 800558c:	20000114 	.word	0x20000114
 8005590:	20000204 	.word	0x20000204
 8005594:	080055ed 	.word	0x080055ed
 8005598:	08005605 	.word	0x08005605

0800559c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	4603      	mov	r3, r0
 80055a4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80055a6:	79fb      	ldrb	r3, [r7, #7]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10b      	bne.n	80055c4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80055ac:	4b0d      	ldr	r3, [pc, #52]	; (80055e4 <Cmd_SetStatus+0x48>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80055b4:	4b0b      	ldr	r3, [pc, #44]	; (80055e4 <Cmd_SetStatus+0x48>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2000      	movs	r0, #0
 80055ba:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80055bc:	4b0a      	ldr	r3, [pc, #40]	; (80055e8 <Cmd_SetStatus+0x4c>)
 80055be:	2200      	movs	r2, #0
 80055c0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80055c2:	e00b      	b.n	80055dc <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80055c4:	4b08      	ldr	r3, [pc, #32]	; (80055e8 <Cmd_SetStatus+0x4c>)
 80055c6:	2201      	movs	r2, #1
 80055c8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80055ca:	4b06      	ldr	r3, [pc, #24]	; (80055e4 <Cmd_SetStatus+0x48>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d004      	beq.n	80055dc <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80055d2:	4b04      	ldr	r3, [pc, #16]	; (80055e4 <Cmd_SetStatus+0x48>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2001      	movs	r0, #1
 80055d8:	4798      	blx	r3
  return;
 80055da:	bf00      	nop
 80055dc:	bf00      	nop
}
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	20000224 	.word	0x20000224
 80055e8:	2000010c 	.word	0x2000010c

080055ec <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80055f4:	2000      	movs	r0, #0
 80055f6:	f7fa fea8 	bl	800034a <shci_cmd_resp_release>

  return;
 80055fa:	bf00      	nop
}
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
	...

08005604 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800560c:	6879      	ldr	r1, [r7, #4]
 800560e:	4805      	ldr	r0, [pc, #20]	; (8005624 <TlUserEvtReceived+0x20>)
 8005610:	f000 fa9c 	bl	8005b4c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005614:	4803      	ldr	r0, [pc, #12]	; (8005624 <TlUserEvtReceived+0x20>)
 8005616:	f7fa fe8c 	bl	8000332 <shci_notify_asynch_evt>

  return;
 800561a:	bf00      	nop
}
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20000104 	.word	0x20000104

08005628 <OutputCmdTrace>:

static void OutputCmdTrace(TL_CmdPacket_t *pCmdBuffer)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
    TL_SHCI_CMD_DBG_MSG(" payload:");
    TL_SHCI_CMD_DBG_BUF(pCmdBuffer->cmdserial.cmd.payload, pCmdBuffer->cmdserial.cmd.plen, "");
  }
  TL_SHCI_CMD_DBG_MSG("\r\n");

  return;
 8005630:	bf00      	nop
}
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <OutputRspTrace>:

static void OutputRspTrace(TL_EvtPacket_t *p_rsp)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  switch(p_rsp->evtserial.evt.evtcode)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	7a5b      	ldrb	r3, [r3, #9]
 8005648:	2b0e      	cmp	r3, #14
 800564a:	d000      	beq.n	800564e <OutputRspTrace+0x12>
      }
      break;

    default:
      TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_rsp->evtserial.evt.evtcode);
      break;
 800564c:	e000      	b.n	8005650 <OutputRspTrace+0x14>
      break;
 800564e:	bf00      	nop
  }

  TL_SHCI_CMD_DBG_MSG("\r\n");

  return;
 8005650:	bf00      	nop
}
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <OutputEvtTrace>:

static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  if(phcievtbuffer->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	7a5b      	ldrb	r3, [r3, #9]
 8005668:	2bff      	cmp	r3, #255	; 0xff
 800566a:	d100      	bne.n	800566e <OutputEvtTrace+0x12>
    }
  }

  TL_SHCI_EVT_DBG_MSG("\r\n");

  return;
 800566c:	bf00      	nop
 800566e:	bf00      	nop
}
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
	...

0800567c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a05      	ldr	r2, [pc, #20]	; (800569c <shci_register_io_bus+0x20>)
 8005688:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a04      	ldr	r2, [pc, #16]	; (80056a0 <shci_register_io_bus+0x24>)
 800568e:	611a      	str	r2, [r3, #16]

  return;
 8005690:	bf00      	nop
}
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	08005801 	.word	0x08005801
 80056a0:	08005855 	.word	0x08005855

080056a4 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80056a8:	f000 ffd4 	bl	8006654 <HW_IPCC_Enable>

  return;
 80056ac:	bf00      	nop
}
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <TL_Init>:


void TL_Init( void )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80056b4:	4b10      	ldr	r3, [pc, #64]	; (80056f8 <TL_Init+0x48>)
 80056b6:	4a11      	ldr	r2, [pc, #68]	; (80056fc <TL_Init+0x4c>)
 80056b8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80056ba:	4b0f      	ldr	r3, [pc, #60]	; (80056f8 <TL_Init+0x48>)
 80056bc:	4a10      	ldr	r2, [pc, #64]	; (8005700 <TL_Init+0x50>)
 80056be:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80056c0:	4b0d      	ldr	r3, [pc, #52]	; (80056f8 <TL_Init+0x48>)
 80056c2:	4a10      	ldr	r2, [pc, #64]	; (8005704 <TL_Init+0x54>)
 80056c4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80056c6:	4b0c      	ldr	r3, [pc, #48]	; (80056f8 <TL_Init+0x48>)
 80056c8:	4a0f      	ldr	r2, [pc, #60]	; (8005708 <TL_Init+0x58>)
 80056ca:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 80056cc:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <TL_Init+0x48>)
 80056ce:	4a0f      	ldr	r2, [pc, #60]	; (800570c <TL_Init+0x5c>)
 80056d0:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80056d2:	4b09      	ldr	r3, [pc, #36]	; (80056f8 <TL_Init+0x48>)
 80056d4:	4a0e      	ldr	r2, [pc, #56]	; (8005710 <TL_Init+0x60>)
 80056d6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80056d8:	4b07      	ldr	r3, [pc, #28]	; (80056f8 <TL_Init+0x48>)
 80056da:	4a0e      	ldr	r2, [pc, #56]	; (8005714 <TL_Init+0x64>)
 80056dc:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80056de:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <TL_Init+0x48>)
 80056e0:	4a0d      	ldr	r2, [pc, #52]	; (8005718 <TL_Init+0x68>)
 80056e2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80056e4:	4b04      	ldr	r3, [pc, #16]	; (80056f8 <TL_Init+0x48>)
 80056e6:	4a0d      	ldr	r2, [pc, #52]	; (800571c <TL_Init+0x6c>)
 80056e8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80056ea:	4b03      	ldr	r3, [pc, #12]	; (80056f8 <TL_Init+0x48>)
 80056ec:	4a0c      	ldr	r2, [pc, #48]	; (8005720 <TL_Init+0x70>)
 80056ee:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80056f0:	f000 ffc0 	bl	8006674 <HW_IPCC_Init>

  return;
 80056f4:	bf00      	nop
}
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	20030000 	.word	0x20030000
 80056fc:	20030028 	.word	0x20030028
 8005700:	20030048 	.word	0x20030048
 8005704:	20030058 	.word	0x20030058
 8005708:	20030064 	.word	0x20030064
 800570c:	2003006c 	.word	0x2003006c
 8005710:	20030074 	.word	0x20030074
 8005714:	2003007c 	.word	0x2003007c
 8005718:	20030098 	.word	0x20030098
 800571c:	2003009c 	.word	0x2003009c
 8005720:	200300a8 	.word	0x200300a8

08005724 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8005730:	4811      	ldr	r0, [pc, #68]	; (8005778 <TL_BLE_Init+0x54>)
 8005732:	f000 f9b7 	bl	8005aa4 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8005736:	4b11      	ldr	r3, [pc, #68]	; (800577c <TL_BLE_Init+0x58>)
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	68da      	ldr	r2, [r3, #12]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	4a0c      	ldr	r2, [pc, #48]	; (8005780 <TL_BLE_Init+0x5c>)
 8005750:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	4a08      	ldr	r2, [pc, #32]	; (8005778 <TL_BLE_Init+0x54>)
 8005756:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8005758:	f000 ffa2 	bl	80066a0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a08      	ldr	r2, [pc, #32]	; (8005784 <TL_BLE_Init+0x60>)
 8005762:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	4a07      	ldr	r2, [pc, #28]	; (8005788 <TL_BLE_Init+0x64>)
 800576a:	6013      	str	r3, [r2, #0]

  return 0;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	200300c4 	.word	0x200300c4
 800577c:	20030000 	.word	0x20030000
 8005780:	20030a48 	.word	0x20030a48
 8005784:	20000230 	.word	0x20000230
 8005788:	20000234 	.word	0x20000234

0800578c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	460b      	mov	r3, r1
 8005796:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8005798:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <TL_BLE_SendCmd+0x24>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2201      	movs	r2, #1
 80057a0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 80057a2:	f000 ff87 	bl	80066b4 <HW_IPCC_BLE_SendCmd>

  return 0;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3708      	adds	r7, #8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	20030000 	.word	0x20030000

080057b4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80057ba:	e009      	b.n	80057d0 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80057bc:	1d3b      	adds	r3, r7, #4
 80057be:	4619      	mov	r1, r3
 80057c0:	4808      	ldr	r0, [pc, #32]	; (80057e4 <HW_IPCC_BLE_RxEvtNot+0x30>)
 80057c2:	f000 fa06 	bl	8005bd2 <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 80057c6:	4b08      	ldr	r3, [pc, #32]	; (80057e8 <HW_IPCC_BLE_RxEvtNot+0x34>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	4610      	mov	r0, r2
 80057ce:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80057d0:	4804      	ldr	r0, [pc, #16]	; (80057e4 <HW_IPCC_BLE_RxEvtNot+0x30>)
 80057d2:	f000 f977 	bl	8005ac4 <LST_is_empty>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0ef      	beq.n	80057bc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80057dc:	bf00      	nop
}
 80057de:	3708      	adds	r7, #8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	200300c4 	.word	0x200300c4
 80057e8:	20000230 	.word	0x20000230

080057ec <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80057f0:	4b02      	ldr	r3, [pc, #8]	; (80057fc <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4798      	blx	r3

  return;
 80057f6:	bf00      	nop
}
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	20000234 	.word	0x20000234

08005800 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800580c:	480d      	ldr	r0, [pc, #52]	; (8005844 <TL_SYS_Init+0x44>)
 800580e:	f000 f949 	bl	8005aa4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8005812:	4b0d      	ldr	r3, [pc, #52]	; (8005848 <TL_SYS_Init+0x48>)
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	4a08      	ldr	r2, [pc, #32]	; (8005844 <TL_SYS_Init+0x44>)
 8005824:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8005826:	f000 ff67 	bl	80066f8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a07      	ldr	r2, [pc, #28]	; (800584c <TL_SYS_Init+0x4c>)
 8005830:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	4a06      	ldr	r2, [pc, #24]	; (8005850 <TL_SYS_Init+0x50>)
 8005838:	6013      	str	r3, [r2, #0]

  return 0;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	200300cc 	.word	0x200300cc
 8005848:	20030000 	.word	0x20030000
 800584c:	20000238 	.word	0x20000238
 8005850:	2000023c 	.word	0x2000023c

08005854 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	460b      	mov	r3, r1
 800585e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8005860:	4b05      	ldr	r3, [pc, #20]	; (8005878 <TL_SYS_SendCmd+0x24>)
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2210      	movs	r2, #16
 8005868:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 800586a:	f000 ff4f 	bl	800670c <HW_IPCC_SYS_SendCmd>

  return 0;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	20030000 	.word	0x20030000

0800587c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005880:	4b04      	ldr	r3, [pc, #16]	; (8005894 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a04      	ldr	r2, [pc, #16]	; (8005898 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 8005886:	68d2      	ldr	r2, [r2, #12]
 8005888:	6812      	ldr	r2, [r2, #0]
 800588a:	4610      	mov	r0, r2
 800588c:	4798      	blx	r3

  return;
 800588e:	bf00      	nop
}
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	20000238 	.word	0x20000238
 8005898:	20030000 	.word	0x20030000

0800589c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80058a2:	e009      	b.n	80058b8 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80058a4:	1d3b      	adds	r3, r7, #4
 80058a6:	4619      	mov	r1, r3
 80058a8:	4808      	ldr	r0, [pc, #32]	; (80058cc <HW_IPCC_SYS_EvtNot+0x30>)
 80058aa:	f000 f992 	bl	8005bd2 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 80058ae:	4b08      	ldr	r3, [pc, #32]	; (80058d0 <HW_IPCC_SYS_EvtNot+0x34>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	4610      	mov	r0, r2
 80058b6:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80058b8:	4804      	ldr	r0, [pc, #16]	; (80058cc <HW_IPCC_SYS_EvtNot+0x30>)
 80058ba:	f000 f903 	bl	8005ac4 <LST_is_empty>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0ef      	beq.n	80058a4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80058c4:	bf00      	nop
}
 80058c6:	3708      	adds	r7, #8
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	200300cc 	.word	0x200300cc
 80058d0:	2000023c 	.word	0x2000023c

080058d4 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80058dc:	4817      	ldr	r0, [pc, #92]	; (800593c <TL_MM_Init+0x68>)
 80058de:	f000 f8e1 	bl	8005aa4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80058e2:	4817      	ldr	r0, [pc, #92]	; (8005940 <TL_MM_Init+0x6c>)
 80058e4:	f000 f8de 	bl	8005aa4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80058e8:	4b16      	ldr	r3, [pc, #88]	; (8005944 <TL_MM_Init+0x70>)
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	4a16      	ldr	r2, [pc, #88]	; (8005948 <TL_MM_Init+0x74>)
 80058ee:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80058f0:	4b15      	ldr	r3, [pc, #84]	; (8005948 <TL_MM_Init+0x74>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6892      	ldr	r2, [r2, #8]
 80058f8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80058fa:	4b13      	ldr	r3, [pc, #76]	; (8005948 <TL_MM_Init+0x74>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	68d2      	ldr	r2, [r2, #12]
 8005902:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8005904:	4b10      	ldr	r3, [pc, #64]	; (8005948 <TL_MM_Init+0x74>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a0c      	ldr	r2, [pc, #48]	; (800593c <TL_MM_Init+0x68>)
 800590a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800590c:	4b0e      	ldr	r3, [pc, #56]	; (8005948 <TL_MM_Init+0x74>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	6812      	ldr	r2, [r2, #0]
 8005914:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8005916:	4b0c      	ldr	r3, [pc, #48]	; (8005948 <TL_MM_Init+0x74>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6852      	ldr	r2, [r2, #4]
 800591e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8005920:	4b09      	ldr	r3, [pc, #36]	; (8005948 <TL_MM_Init+0x74>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6912      	ldr	r2, [r2, #16]
 8005928:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800592a:	4b07      	ldr	r3, [pc, #28]	; (8005948 <TL_MM_Init+0x74>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	6952      	ldr	r2, [r2, #20]
 8005932:	619a      	str	r2, [r3, #24]

  return;
 8005934:	bf00      	nop
}
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	200300b4 	.word	0x200300b4
 8005940:	20000228 	.word	0x20000228
 8005944:	20030000 	.word	0x20030000
 8005948:	20000240 	.word	0x20000240

0800594c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8005954:	6879      	ldr	r1, [r7, #4]
 8005956:	4806      	ldr	r0, [pc, #24]	; (8005970 <TL_MM_EvtDone+0x24>)
 8005958:	f000 f8f8 	bl	8005b4c <LST_insert_tail>

  OutputMemReleaseTrace(phcievt);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f82b 	bl	80059b8 <OutputMemReleaseTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8005962:	4804      	ldr	r0, [pc, #16]	; (8005974 <TL_MM_EvtDone+0x28>)
 8005964:	f000 fef8 	bl	8006758 <HW_IPCC_MM_SendFreeBuf>

  return;
 8005968:	bf00      	nop
}
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	20000228 	.word	0x20000228
 8005974:	08005979 	.word	0x08005979

08005978 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800597e:	e00c      	b.n	800599a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8005980:	1d3b      	adds	r3, r7, #4
 8005982:	4619      	mov	r1, r3
 8005984:	480a      	ldr	r0, [pc, #40]	; (80059b0 <SendFreeBuf+0x38>)
 8005986:	f000 f924 	bl	8005bd2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800598a:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <SendFreeBuf+0x3c>)
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	4611      	mov	r1, r2
 8005994:	4618      	mov	r0, r3
 8005996:	f000 f8d9 	bl	8005b4c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800599a:	4805      	ldr	r0, [pc, #20]	; (80059b0 <SendFreeBuf+0x38>)
 800599c:	f000 f892 	bl	8005ac4 <LST_is_empty>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0ec      	beq.n	8005980 <SendFreeBuf+0x8>
  }

  return;
 80059a6:	bf00      	nop
}
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20000228 	.word	0x20000228
 80059b4:	20030000 	.word	0x20030000

080059b8 <OutputMemReleaseTrace>:

static void OutputMemReleaseTrace(TL_EvtPacket_t * phcievt)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  switch(phcievt->evtserial.evt.evtcode)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	7a5b      	ldrb	r3, [r3, #9]
 80059c4:	2b0f      	cmp	r3, #15
 80059c6:	d004      	beq.n	80059d2 <OutputMemReleaseTrace+0x1a>
 80059c8:	2bff      	cmp	r3, #255	; 0xff
 80059ca:	d004      	beq.n	80059d6 <OutputMemReleaseTrace+0x1e>
 80059cc:	2b0e      	cmp	r3, #14
 80059ce:	d004      	beq.n	80059da <OutputMemReleaseTrace+0x22>
      break;

    default:
      TL_MM_DBG__MSG("mm evt released: 0x%02X", phcievt->evtserial.evt.evtcode);
      TL_MM_DBG__MSG(" buffer addr: 0x%08X", phcievt);
      break;
 80059d0:	e004      	b.n	80059dc <OutputMemReleaseTrace+0x24>
      break;
 80059d2:	bf00      	nop
 80059d4:	e002      	b.n	80059dc <OutputMemReleaseTrace+0x24>
      break;
 80059d6:	bf00      	nop
 80059d8:	e000      	b.n	80059dc <OutputMemReleaseTrace+0x24>
      break;
 80059da:	bf00      	nop
  }

  TL_MM_DBG__MSG("\r\n");

  return;
 80059dc:	bf00      	nop
}
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80059ec:	4805      	ldr	r0, [pc, #20]	; (8005a04 <TL_TRACES_Init+0x1c>)
 80059ee:	f000 f859 	bl	8005aa4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80059f2:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <TL_TRACES_Init+0x20>)
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	4a03      	ldr	r2, [pc, #12]	; (8005a04 <TL_TRACES_Init+0x1c>)
 80059f8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80059fa:	f000 fee3 	bl	80067c4 <HW_IPCC_TRACES_Init>

  return;
 80059fe:	bf00      	nop
}
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	200300bc 	.word	0x200300bc
 8005a08:	20030000 	.word	0x20030000

08005a0c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8005a12:	e008      	b.n	8005a26 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8005a14:	1d3b      	adds	r3, r7, #4
 8005a16:	4619      	mov	r1, r3
 8005a18:	4808      	ldr	r0, [pc, #32]	; (8005a3c <HW_IPCC_TRACES_EvtNot+0x30>)
 8005a1a:	f000 f8da 	bl	8005bd2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 f80d 	bl	8005a40 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8005a26:	4805      	ldr	r0, [pc, #20]	; (8005a3c <HW_IPCC_TRACES_EvtNot+0x30>)
 8005a28:	f000 f84c 	bl	8005ac4 <LST_is_empty>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d0f0      	beq.n	8005a14 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8005a32:	bf00      	nop
}
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	200300bc 	.word	0x200300bc

08005a40 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8005a5e:	4b0f      	ldr	r3, [pc, #60]	; (8005a9c <OTP_Read+0x48>)
 8005a60:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8005a62:	e002      	b.n	8005a6a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	3b08      	subs	r3, #8
 8005a68:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	3307      	adds	r3, #7
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	79fa      	ldrb	r2, [r7, #7]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d003      	beq.n	8005a7e <OTP_Read+0x2a>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4a09      	ldr	r2, [pc, #36]	; (8005aa0 <OTP_Read+0x4c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d1f2      	bne.n	8005a64 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	3307      	adds	r3, #7
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	79fa      	ldrb	r2, [r7, #7]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d001      	beq.n	8005a8e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	1fff73f8 	.word	0x1fff73f8
 8005aa0:	1fff7000 	.word	0x1fff7000

08005aa4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	605a      	str	r2, [r3, #4]
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b087      	sub	sp, #28
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005acc:	f3ef 8310 	mrs	r3, PRIMASK
 8005ad0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005ad4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ad6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d102      	bne.n	8005ae8 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	75fb      	strb	r3, [r7, #23]
 8005ae6:	e001      	b.n	8005aec <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	75fb      	strb	r3, [r7, #23]
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8005af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	371c      	adds	r7, #28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b12:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b14:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005b16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b18:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	605a      	str	r2, [r3, #4]
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005b40:	bf00      	nop
 8005b42:	371c      	adds	r7, #28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b56:	f3ef 8310 	mrs	r3, PRIMASK
 8005b5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005b5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b60:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	683a      	ldr	r2, [r7, #0]
 8005b74:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005b88:	bf00      	nop
 8005b8a:	371c      	adds	r7, #28
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8005ba0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005ba4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ba6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	6812      	ldr	r2, [r2, #0]
 8005bb0:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	6852      	ldr	r2, [r2, #4]
 8005bba:	605a      	str	r2, [r3, #4]
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005bc6:	bf00      	nop
 8005bc8:	371c      	adds	r7, #28
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b086      	sub	sp, #24
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8005be0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005be2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005be4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005be6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7ff ffcd 	bl	8005b94 <LST_remove_node>
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005c04:	bf00      	nop
 8005c06:	3718      	adds	r7, #24
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8005c10:	4b03      	ldr	r3, [pc, #12]	; (8005c20 <LL_FLASH_GetUDN+0x14>)
 8005c12:	681b      	ldr	r3, [r3, #0]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	1fff7580 	.word	0x1fff7580

08005c24 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8005c24:	b480      	push	{r7}
 8005c26:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8005c28:	4b03      	ldr	r3, [pc, #12]	; (8005c38 <LL_FLASH_GetDeviceID+0x14>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	b2db      	uxtb	r3, r3
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	1fff7584 	.word	0x1fff7584

08005c3c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8005c40:	4b03      	ldr	r3, [pc, #12]	; (8005c50 <LL_FLASH_GetSTCompanyID+0x14>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	0a1b      	lsrs	r3, r3, #8
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	1fff7584 	.word	0x1fff7584

08005c54 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8005c54:	b5b0      	push	{r4, r5, r7, lr}
 8005c56:	b08c      	sub	sp, #48	; 0x30
 8005c58:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8005c5a:	4b28      	ldr	r3, [pc, #160]	; (8005cfc <APP_BLE_Init+0xa8>)
 8005c5c:	463c      	mov	r4, r7
 8005c5e:	461d      	mov	r5, r3
 8005c60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c68:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005c6c:	c407      	stmia	r4!, {r0, r1, r2}
 8005c6e:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8005c70:	f000 f906 	bl	8005e80 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8005c74:	2101      	movs	r1, #1
 8005c76:	2002      	movs	r0, #2
 8005c78:	f000 fdcc 	bl	8006814 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8005c7c:	4a20      	ldr	r2, [pc, #128]	; (8005d00 <APP_BLE_Init+0xac>)
 8005c7e:	2100      	movs	r1, #0
 8005c80:	2004      	movs	r0, #4
 8005c82:	f000 fed5 	bl	8006a30 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 8005c86:	463b      	mov	r3, r7
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff f9a1 	bl	8004fd0 <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8005c8e:	f000 f90d 	bl	8005eac <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8005c92:	f7ff f8fd 	bl	8004e90 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8005c96:	4b1b      	ldr	r3, [pc, #108]	; (8005d04 <APP_BLE_Init+0xb0>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8005c9e:	4b19      	ldr	r3, [pc, #100]	; (8005d04 <APP_BLE_Init+0xb0>)
 8005ca0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ca4:	84da      	strh	r2, [r3, #38]	; 0x26
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8005ca6:	4a18      	ldr	r2, [pc, #96]	; (8005d08 <APP_BLE_Init+0xb4>)
 8005ca8:	2100      	movs	r1, #0
 8005caa:	2001      	movs	r0, #1
 8005cac:	f000 fec0 	bl	8006a30 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 8005cb0:	2006      	movs	r0, #6
 8005cb2:	f7fe fe02 	bl	80048ba <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8005cb6:	f000 fb47 	bl	8006348 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8005cba:	4b14      	ldr	r3, [pc, #80]	; (8005d0c <APP_BLE_Init+0xb8>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	4914      	ldr	r1, [pc, #80]	; (8005d10 <APP_BLE_Init+0xbc>)
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	f7fb f85f 	bl	8000d84 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8005cc6:	4b13      	ldr	r3, [pc, #76]	; (8005d14 <APP_BLE_Init+0xc0>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	4913      	ldr	r1, [pc, #76]	; (8005d18 <APP_BLE_Init+0xc4>)
 8005ccc:	2000      	movs	r0, #0
 8005cce:	f7fb f859 	bl	8000d84 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8005cd2:	4b0c      	ldr	r3, [pc, #48]	; (8005d04 <APP_BLE_Init+0xb0>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8005cda:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <APP_BLE_Init+0xb0>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8005ce2:	4b0e      	ldr	r3, [pc, #56]	; (8005d1c <APP_BLE_Init+0xc8>)
 8005ce4:	2280      	movs	r2, #128	; 0x80
 8005ce6:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8005ce8:	4b0d      	ldr	r3, [pc, #52]	; (8005d20 <APP_BLE_Init+0xcc>)
 8005cea:	22a0      	movs	r2, #160	; 0xa0
 8005cec:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8005cee:	2001      	movs	r0, #1
 8005cf0:	f000 f9b6 	bl	8006060 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8005cf4:	bf00      	nop
}
 8005cf6:	3730      	adds	r7, #48	; 0x30
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8005cfc:	08006d5c 	.word	0x08006d5c
 8005d00:	08005065 	.word	0x08005065
 8005d04:	20000118 	.word	0x20000118
 8005d08:	080061cd 	.word	0x080061cd
 8005d0c:	08006201 	.word	0x08006201
 8005d10:	200001a9 	.word	0x200001a9
 8005d14:	08006211 	.word	0x08006211
 8005d18:	200001aa 	.word	0x200001aa
 8005d1c:	200001ac 	.word	0x200001ac
 8005d20:	200001ae 	.word	0x200001ae

08005d24 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08a      	sub	sp, #40	; 0x28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8005d2c:	2342      	movs	r3, #66	; 0x42
 8005d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	3301      	adds	r3, #1
 8005d36:	623b      	str	r3, [r7, #32]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	2b3e      	cmp	r3, #62	; 0x3e
 8005d3e:	d024      	beq.n	8005d8a <SVCCTL_App_Notification+0x66>
 8005d40:	2bff      	cmp	r3, #255	; 0xff
 8005d42:	d070      	beq.n	8005e26 <SVCCTL_App_Notification+0x102>
 8005d44:	2b05      	cmp	r3, #5
 8005d46:	d000      	beq.n	8005d4a <SVCCTL_App_Notification+0x26>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
        break;
 8005d48:	e08f      	b.n	8005e6a <SVCCTL_App_Notification+0x146>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	3302      	adds	r3, #2
 8005d4e:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	4b46      	ldr	r3, [pc, #280]	; (8005e74 <SVCCTL_App_Notification+0x150>)
 8005d5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d106      	bne.n	8005d6e <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8005d60:	4b44      	ldr	r3, [pc, #272]	; (8005e74 <SVCCTL_App_Notification+0x150>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8005d66:	4b43      	ldr	r3, [pc, #268]	; (8005e74 <SVCCTL_App_Notification+0x150>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      Adv_Request(APP_BLE_FAST_ADV);
 8005d6e:	2001      	movs	r0, #1
 8005d70:	f000 f976 	bl	8006060 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8005d74:	4b40      	ldr	r3, [pc, #256]	; (8005e78 <SVCCTL_App_Notification+0x154>)
 8005d76:	2201      	movs	r2, #1
 8005d78:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8005d7a:	4b3e      	ldr	r3, [pc, #248]	; (8005e74 <SVCCTL_App_Notification+0x150>)
 8005d7c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8005d7e:	4b3e      	ldr	r3, [pc, #248]	; (8005e78 <SVCCTL_App_Notification+0x154>)
 8005d80:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 8005d82:	483d      	ldr	r0, [pc, #244]	; (8005e78 <SVCCTL_App_Notification+0x154>)
 8005d84:	f000 facc 	bl	8006320 <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 8005d88:	e06f      	b.n	8005e6a <SVCCTL_App_Notification+0x146>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	3302      	adds	r3, #2
 8005d8e:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b03      	cmp	r3, #3
 8005d96:	d042      	beq.n	8005e1e <SVCCTL_App_Notification+0xfa>
 8005d98:	2b0c      	cmp	r3, #12
 8005d9a:	d002      	beq.n	8005da2 <SVCCTL_App_Notification+0x7e>
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d016      	beq.n	8005dce <SVCCTL_App_Notification+0xaa>
          break;
 8005da0:	e040      	b.n	8005e24 <SVCCTL_App_Notification+0x100>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	3301      	adds	r3, #1
 8005da6:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 8005da8:	4b32      	ldr	r3, [pc, #200]	; (8005e74 <SVCCTL_App_Notification+0x150>)
 8005daa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dac:	f107 020a 	add.w	r2, r7, #10
 8005db0:	f107 010b 	add.w	r1, r7, #11
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7fe fdee 	bl	8004996 <hci_le_read_phy>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 8005dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d12c      	bne.n	8005e22 <SVCCTL_App_Notification+0xfe>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8005dc8:	7afb      	ldrb	r3, [r7, #11]
 8005dca:	2b02      	cmp	r3, #2
          break;
 8005dcc:	e029      	b.n	8005e22 <SVCCTL_App_Notification+0xfe>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8005dd4:	4b27      	ldr	r3, [pc, #156]	; (8005e74 <SVCCTL_App_Notification+0x150>)
 8005dd6:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fb f848 	bl	8000e70 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8005de0:	4b24      	ldr	r3, [pc, #144]	; (8005e74 <SVCCTL_App_Notification+0x150>)
 8005de2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	d104      	bne.n	8005df4 <SVCCTL_App_Notification+0xd0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8005dea:	4b22      	ldr	r3, [pc, #136]	; (8005e74 <SVCCTL_App_Notification+0x150>)
 8005dec:	2206      	movs	r2, #6
 8005dee:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8005df2:	e003      	b.n	8005dfc <SVCCTL_App_Notification+0xd8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8005df4:	4b1f      	ldr	r3, [pc, #124]	; (8005e74 <SVCCTL_App_Notification+0x150>)
 8005df6:	2205      	movs	r2, #5
 8005df8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	4b1b      	ldr	r3, [pc, #108]	; (8005e74 <SVCCTL_App_Notification+0x150>)
 8005e06:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8005e08:	4b1b      	ldr	r3, [pc, #108]	; (8005e78 <SVCCTL_App_Notification+0x154>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8005e0e:	4b19      	ldr	r3, [pc, #100]	; (8005e74 <SVCCTL_App_Notification+0x150>)
 8005e10:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8005e12:	4b19      	ldr	r3, [pc, #100]	; (8005e78 <SVCCTL_App_Notification+0x154>)
 8005e14:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8005e16:	4818      	ldr	r0, [pc, #96]	; (8005e78 <SVCCTL_App_Notification+0x154>)
 8005e18:	f000 fa82 	bl	8006320 <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 8005e1c:	e002      	b.n	8005e24 <SVCCTL_App_Notification+0x100>
          break;
 8005e1e:	bf00      	nop
 8005e20:	e023      	b.n	8005e6a <SVCCTL_App_Notification+0x146>
          break;
 8005e22:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 8005e24:	e021      	b.n	8005e6a <SVCCTL_App_Notification+0x146>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	3302      	adds	r3, #2
 8005e2a:	61fb      	str	r3, [r7, #28]
      switch (blue_evt->ecode)
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	f240 4207 	movw	r2, #1031	; 0x407
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d013      	beq.n	8005e62 <SVCCTL_App_Notification+0x13e>
 8005e3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e3e:	d012      	beq.n	8005e66 <SVCCTL_App_Notification+0x142>
 8005e40:	2b04      	cmp	r3, #4
 8005e42:	d000      	beq.n	8005e46 <SVCCTL_App_Notification+0x122>
      break; /* EVT_VENDOR */
 8005e44:	e010      	b.n	8005e68 <SVCCTL_App_Notification+0x144>
        	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8005e46:	2201      	movs	r2, #1
 8005e48:	2101      	movs	r1, #1
 8005e4a:	480c      	ldr	r0, [pc, #48]	; (8005e7c <SVCCTL_App_Notification+0x158>)
 8005e4c:	f7fc f82c 	bl	8001ea8 <HAL_GPIO_WritePin>
        	HAL_Delay(5);
 8005e50:	2005      	movs	r0, #5
 8005e52:	f7fb fcff 	bl	8001854 <HAL_Delay>
        	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8005e56:	2200      	movs	r2, #0
 8005e58:	2101      	movs	r1, #1
 8005e5a:	4808      	ldr	r0, [pc, #32]	; (8005e7c <SVCCTL_App_Notification+0x158>)
 8005e5c:	f7fc f824 	bl	8001ea8 <HAL_GPIO_WritePin>
          break; /* RADIO_ACTIVITY_EVENT */
 8005e60:	e002      	b.n	8005e68 <SVCCTL_App_Notification+0x144>
          break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 8005e62:	bf00      	nop
 8005e64:	e000      	b.n	8005e68 <SVCCTL_App_Notification+0x144>
      break;
 8005e66:	bf00      	nop
      break; /* EVT_VENDOR */
 8005e68:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8005e6a:	2301      	movs	r3, #1
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3728      	adds	r7, #40	; 0x28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	20000118 	.word	0x20000118
 8005e78:	20000320 	.word	0x20000320
 8005e7c:	48000400 	.word	0x48000400

08005e80 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8005e86:	4b06      	ldr	r3, [pc, #24]	; (8005ea0 <Ble_Tl_Init+0x20>)
 8005e88:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8005e8a:	4b06      	ldr	r3, [pc, #24]	; (8005ea4 <Ble_Tl_Init+0x24>)
 8005e8c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8005e8e:	463b      	mov	r3, r7
 8005e90:	4619      	mov	r1, r3
 8005e92:	4805      	ldr	r0, [pc, #20]	; (8005ea8 <Ble_Tl_Init+0x28>)
 8005e94:	f7ff f8ca 	bl	800502c <hci_init>

  return;
 8005e98:	bf00      	nop
}
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	200300d4 	.word	0x200300d4
 8005ea4:	0800629b 	.word	0x0800629b
 8005ea8:	08006263 	.word	0x08006263

08005eac <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8005eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eae:	b091      	sub	sp, #68	; 0x44
 8005eb0:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8005eb6:	f7fe fd4a 	bl	800494e <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 8005eba:	f000 f943 	bl	8006144 <BleGetBdAddress>
 8005ebe:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8005ec0:	6a3a      	ldr	r2, [r7, #32]
 8005ec2:	2106      	movs	r1, #6
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	f7fe fc38 	bl	800473a <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 8005eca:	6a3b      	ldr	r3, [r7, #32]
 8005ecc:	795a      	ldrb	r2, [r3, #5]
 8005ece:	4b5e      	ldr	r3, [pc, #376]	; (8006048 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8005ed0:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	791a      	ldrb	r2, [r3, #4]
 8005ed6:	4b5c      	ldr	r3, [pc, #368]	; (8006048 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8005ed8:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	78da      	ldrb	r2, [r3, #3]
 8005ede:	4b5a      	ldr	r3, [pc, #360]	; (8006048 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8005ee0:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	789a      	ldrb	r2, [r3, #2]
 8005ee6:	4b58      	ldr	r3, [pc, #352]	; (8006048 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8005ee8:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 8005eea:	6a3b      	ldr	r3, [r7, #32]
 8005eec:	785a      	ldrb	r2, [r3, #1]
 8005eee:	4b56      	ldr	r3, [pc, #344]	; (8006048 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8005ef0:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	781a      	ldrb	r2, [r3, #0]
 8005ef6:	4b54      	ldr	r3, [pc, #336]	; (8006048 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8005ef8:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8005efa:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8005efe:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8005f00:	f7ff fe84 	bl	8005c0c <LL_FLASH_GetUDN>
 8005f04:	4603      	mov	r3, r0
 8005f06:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 8005f08:	f107 0308 	add.w	r3, r7, #8
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	2106      	movs	r1, #6
 8005f10:	202e      	movs	r0, #46	; 0x2e
 8005f12:	f7fe fc12 	bl	800473a <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8005f16:	4a4d      	ldr	r2, [pc, #308]	; (800604c <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8005f18:	2110      	movs	r1, #16
 8005f1a:	2018      	movs	r0, #24
 8005f1c:	f7fe fc0d 	bl	800473a <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8005f20:	4a4b      	ldr	r2, [pc, #300]	; (8006050 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 8005f22:	2110      	movs	r1, #16
 8005f24:	2008      	movs	r0, #8
 8005f26:	f7fe fc08 	bl	800473a <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8005f2a:	2118      	movs	r1, #24
 8005f2c:	2001      	movs	r0, #1
 8005f2e:	f7fe fc6d 	bl	800480c <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8005f32:	f7fe f9bd 	bl	80042b0 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8005f36:	2300      	movs	r3, #0
 8005f38:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8005f3a:	7ffb      	ldrb	r3, [r7, #31]
 8005f3c:	f043 0301 	orr.w	r3, r3, #1
 8005f40:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8005f42:	7ffb      	ldrb	r3, [r7, #31]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01e      	beq.n	8005f86 <Ble_Hci_Gap_Gatt_Init+0xda>
  {
    const char *name = "P2PSRV1";
 8005f48:	4b42      	ldr	r3, [pc, #264]	; (8006054 <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 8005f4a:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 8005f4c:	f107 0216 	add.w	r2, r7, #22
 8005f50:	7ff8      	ldrb	r0, [r7, #31]
 8005f52:	f107 0312 	add.w	r3, r7, #18
 8005f56:	9301      	str	r3, [sp, #4]
 8005f58:	f107 0314 	add.w	r3, r7, #20
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	2207      	movs	r2, #7
 8005f62:	2100      	movs	r1, #0
 8005f64:	f7fe f899 	bl	800409a <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8005f68:	8afc      	ldrh	r4, [r7, #22]
 8005f6a:	8abd      	ldrh	r5, [r7, #20]
 8005f6c:	69b8      	ldr	r0, [r7, #24]
 8005f6e:	f7fa f905 	bl	800017c <strlen>
 8005f72:	4603      	mov	r3, r0
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	4629      	mov	r1, r5
 8005f80:	4620      	mov	r0, r4
 8005f82:	f7fe fb53 	bl	800462c <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8005f86:	8af8      	ldrh	r0, [r7, #22]
 8005f88:	8a79      	ldrh	r1, [r7, #18]
 8005f8a:	1d3b      	adds	r3, r7, #4
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	2302      	movs	r3, #2
 8005f90:	2200      	movs	r2, #0
 8005f92:	f7fe fb4b 	bl	800462c <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8005f96:	2202      	movs	r2, #2
 8005f98:	2102      	movs	r1, #2
 8005f9a:	2000      	movs	r0, #0
 8005f9c:	f7fe fd63 	bl	8004a66 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8005fa0:	4b2d      	ldr	r3, [pc, #180]	; (8006058 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8005fa6:	4b2c      	ldr	r3, [pc, #176]	; (8006058 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fd ff83 	bl	8003eb6 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8005fb0:	4b29      	ldr	r3, [pc, #164]	; (8006058 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 8005fb6:	4b28      	ldr	r3, [pc, #160]	; (8006058 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8005fbc:	4b26      	ldr	r3, [pc, #152]	; (8006058 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005fbe:	2208      	movs	r2, #8
 8005fc0:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8005fc2:	4b25      	ldr	r3, [pc, #148]	; (8006058 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005fc4:	2210      	movs	r2, #16
 8005fc6:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8005fc8:	4b23      	ldr	r3, [pc, #140]	; (8006058 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8005fce:	4b22      	ldr	r3, [pc, #136]	; (8006058 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005fd0:	4a22      	ldr	r2, [pc, #136]	; (800605c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8005fd2:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8005fd4:	4b20      	ldr	r3, [pc, #128]	; (8006058 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 8005fda:	2300      	movs	r3, #0
 8005fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005fe0:	e00b      	b.n	8005ffa <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 8005fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fe6:	4a1c      	ldr	r2, [pc, #112]	; (8006058 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005fe8:	4413      	add	r3, r2
 8005fea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005fee:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 8005ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005ffa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ffe:	2b0f      	cmp	r3, #15
 8006000:	d9ef      	bls.n	8005fe2 <Ble_Hci_Gap_Gatt_Init+0x136>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8006002:	4b15      	ldr	r3, [pc, #84]	; (8006058 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006004:	789d      	ldrb	r5, [r3, #2]
 8006006:	4b14      	ldr	r3, [pc, #80]	; (8006058 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006008:	785e      	ldrb	r6, [r3, #1]
 800600a:	4b13      	ldr	r3, [pc, #76]	; (8006058 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800600c:	7d5b      	ldrb	r3, [r3, #21]
 800600e:	4a12      	ldr	r2, [pc, #72]	; (8006058 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006010:	7d92      	ldrb	r2, [r2, #22]
 8006012:	4911      	ldr	r1, [pc, #68]	; (8006058 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006014:	7d09      	ldrb	r1, [r1, #20]
 8006016:	4810      	ldr	r0, [pc, #64]	; (8006058 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006018:	6980      	ldr	r0, [r0, #24]
 800601a:	2400      	movs	r4, #0
 800601c:	9404      	str	r4, [sp, #16]
 800601e:	9003      	str	r0, [sp, #12]
 8006020:	9102      	str	r1, [sp, #8]
 8006022:	9201      	str	r2, [sp, #4]
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	2300      	movs	r3, #0
 8006028:	2201      	movs	r2, #1
 800602a:	4631      	mov	r1, r6
 800602c:	4628      	mov	r0, r5
 800602e:	f7fd ff8c 	bl	8003f4a <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8006032:	4b09      	ldr	r3, [pc, #36]	; (8006058 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006034:	789b      	ldrb	r3, [r3, #2]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <Ble_Hci_Gap_Gatt_Init+0x192>
   {
     aci_gap_configure_whitelist();
 800603a:	f7fe f915 	bl	8004268 <aci_gap_configure_whitelist>
   }
}
 800603e:	bf00      	nop
 8006040:	372c      	adds	r7, #44	; 0x2c
 8006042:	46bd      	mov	sp, r7
 8006044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006046:	bf00      	nop
 8006048:	20000010 	.word	0x20000010
 800604c:	08006f2c 	.word	0x08006f2c
 8006050:	08006f3c 	.word	0x08006f3c
 8006054:	08006d8c 	.word	0x08006d8c
 8006058:	20000118 	.word	0x20000118
 800605c:	0001b207 	.word	0x0001b207

08006060 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b08c      	sub	sp, #48	; 0x30
 8006064:	af08      	add	r7, sp, #32
 8006066:	4603      	mov	r3, r0
 8006068:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800606a:	2342      	movs	r3, #66	; 0x42
 800606c:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 800606e:	79fb      	ldrb	r3, [r7, #7]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d106      	bne.n	8006082 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8006074:	4b2c      	ldr	r3, [pc, #176]	; (8006128 <Adv_Request+0xc8>)
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800607a:	4b2c      	ldr	r3, [pc, #176]	; (800612c <Adv_Request+0xcc>)
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	81bb      	strh	r3, [r7, #12]
 8006080:	e005      	b.n	800608e <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8006082:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8006086:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8006088:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800608c:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800608e:	4b28      	ldr	r3, [pc, #160]	; (8006130 <Adv_Request+0xd0>)
 8006090:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006094:	4618      	mov	r0, r3
 8006096:	f7fa feeb 	bl	8000e70 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 800609a:	79fb      	ldrb	r3, [r7, #7]
 800609c:	2b02      	cmp	r3, #2
 800609e:	d10d      	bne.n	80060bc <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 80060a0:	4b23      	ldr	r3, [pc, #140]	; (8006130 <Adv_Request+0xd0>)
 80060a2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d004      	beq.n	80060b4 <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 80060aa:	4b21      	ldr	r3, [pc, #132]	; (8006130 <Adv_Request+0xd0>)
 80060ac:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d103      	bne.n	80060bc <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 80060b4:	f7fd fdfd 	bl	8003cb2 <aci_gap_set_non_discoverable>
 80060b8:	4603      	mov	r3, r0
 80060ba:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 80060bc:	4a1c      	ldr	r2, [pc, #112]	; (8006130 <Adv_Request+0xd0>)
 80060be:	79fb      	ldrb	r3, [r7, #7]
 80060c0:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 80060c4:	4b1a      	ldr	r3, [pc, #104]	; (8006130 <Adv_Request+0xd0>)
 80060c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060ca:	89b8      	ldrh	r0, [r7, #12]
 80060cc:	89f9      	ldrh	r1, [r7, #14]
 80060ce:	2200      	movs	r2, #0
 80060d0:	9206      	str	r2, [sp, #24]
 80060d2:	2200      	movs	r2, #0
 80060d4:	9205      	str	r2, [sp, #20]
 80060d6:	4a17      	ldr	r2, [pc, #92]	; (8006134 <Adv_Request+0xd4>)
 80060d8:	9204      	str	r2, [sp, #16]
 80060da:	9303      	str	r3, [sp, #12]
 80060dc:	4b16      	ldr	r3, [pc, #88]	; (8006138 <Adv_Request+0xd8>)
 80060de:	9302      	str	r3, [sp, #8]
 80060e0:	2308      	movs	r3, #8
 80060e2:	9301      	str	r3, [sp, #4]
 80060e4:	2300      	movs	r3, #0
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	2300      	movs	r3, #0
 80060ea:	4602      	mov	r2, r0
 80060ec:	2000      	movs	r0, #0
 80060ee:	f7fd fe04 	bl	8003cfa <aci_gap_set_discoverable>
 80060f2:	4603      	mov	r3, r0
 80060f4:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 80060f6:	4911      	ldr	r1, [pc, #68]	; (800613c <Adv_Request+0xdc>)
 80060f8:	200e      	movs	r0, #14
 80060fa:	f7fe f859 	bl	80041b0 <aci_gap_update_adv_data>
 80060fe:	4603      	mov	r3, r0
 8006100:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 8006102:	7afb      	ldrb	r3, [r7, #11]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10a      	bne.n	800611e <Adv_Request+0xbe>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8006108:	79fb      	ldrb	r3, [r7, #7]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d107      	bne.n	800611e <Adv_Request+0xbe>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800610e:	4b08      	ldr	r3, [pc, #32]	; (8006130 <Adv_Request+0xd0>)
 8006110:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006114:	490a      	ldr	r1, [pc, #40]	; (8006140 <Adv_Request+0xe0>)
 8006116:	4618      	mov	r0, r3
 8006118:	f7fa ff34 	bl	8000f84 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800611c:	bf00      	nop
 800611e:	bf00      	nop
}
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	200001ac 	.word	0x200001ac
 800612c:	200001ae 	.word	0x200001ae
 8006130:	20000118 	.word	0x20000118
 8006134:	20000141 	.word	0x20000141
 8006138:	08006f4c 	.word	0x08006f4c
 800613c:	20000010 	.word	0x20000010
 8006140:	0001e046 	.word	0x0001e046

08006144 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800614a:	f7ff fd5f 	bl	8005c0c <LL_FLASH_GetUDN>
 800614e:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006156:	d023      	beq.n	80061a0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8006158:	f7ff fd70 	bl	8005c3c <LL_FLASH_GetSTCompanyID>
 800615c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800615e:	f7ff fd61 	bl	8005c24 <LL_FLASH_GetDeviceID>
 8006162:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	b2da      	uxtb	r2, r3
 8006168:	4b16      	ldr	r3, [pc, #88]	; (80061c4 <BleGetBdAddress+0x80>)
 800616a:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	0a1b      	lsrs	r3, r3, #8
 8006170:	b2da      	uxtb	r2, r3
 8006172:	4b14      	ldr	r3, [pc, #80]	; (80061c4 <BleGetBdAddress+0x80>)
 8006174:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	0c1b      	lsrs	r3, r3, #16
 800617a:	b2da      	uxtb	r2, r3
 800617c:	4b11      	ldr	r3, [pc, #68]	; (80061c4 <BleGetBdAddress+0x80>)
 800617e:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	b2da      	uxtb	r2, r3
 8006184:	4b0f      	ldr	r3, [pc, #60]	; (80061c4 <BleGetBdAddress+0x80>)
 8006186:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	b2da      	uxtb	r2, r3
 800618c:	4b0d      	ldr	r3, [pc, #52]	; (80061c4 <BleGetBdAddress+0x80>)
 800618e:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	0a1b      	lsrs	r3, r3, #8
 8006194:	b2da      	uxtb	r2, r3
 8006196:	4b0b      	ldr	r3, [pc, #44]	; (80061c4 <BleGetBdAddress+0x80>)
 8006198:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800619a:	4b0a      	ldr	r3, [pc, #40]	; (80061c4 <BleGetBdAddress+0x80>)
 800619c:	617b      	str	r3, [r7, #20]
 800619e:	e00b      	b.n	80061b8 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 80061a0:	2000      	movs	r0, #0
 80061a2:	f7ff fc57 	bl	8005a54 <OTP_Read>
 80061a6:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	617b      	str	r3, [r7, #20]
 80061b2:	e001      	b.n	80061b8 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 80061b4:	4b04      	ldr	r3, [pc, #16]	; (80061c8 <BleGetBdAddress+0x84>)
 80061b6:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 80061b8:	697b      	ldr	r3, [r7, #20]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3718      	adds	r7, #24
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	20000244 	.word	0x20000244
 80061c8:	08006f24 	.word	0x08006f24

080061cc <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80061d2:	4b0a      	ldr	r3, [pc, #40]	; (80061fc <Adv_Cancel+0x30>)
 80061d4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80061d8:	2b05      	cmp	r3, #5
 80061da:	d00a      	beq.n	80061f2 <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 80061dc:	2300      	movs	r3, #0
 80061de:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 80061e0:	f7fd fd67 	bl	8003cb2 <aci_gap_set_non_discoverable>
 80061e4:	4603      	mov	r3, r0
 80061e6:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80061e8:	4b04      	ldr	r3, [pc, #16]	; (80061fc <Adv_Cancel+0x30>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 80061f0:	bf00      	nop
 80061f2:	bf00      	nop
}
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	20000118 	.word	0x20000118

08006200 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8006204:	2100      	movs	r1, #0
 8006206:	2001      	movs	r0, #1
 8006208:	f000 fc32 	bl	8006a70 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 800620c:	bf00      	nop
}
 800620e:	bd80      	pop	{r7, pc}

08006210 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 8006210:	b480      	push	{r7}
 8006212:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 8006214:	bf00      	nop
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b082      	sub	sp, #8
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8006226:	2100      	movs	r1, #0
 8006228:	2004      	movs	r0, #4
 800622a:	f000 fc21 	bl	8006a70 <UTIL_SEQ_SetTask>
  return;
 800622e:	bf00      	nop
}
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b082      	sub	sp, #8
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800623e:	2001      	movs	r0, #1
 8006240:	f000 fc7c 	bl	8006b3c <UTIL_SEQ_SetEvt>
  return;
 8006244:	bf00      	nop
}
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8006254:	2001      	movs	r0, #1
 8006256:	f000 fc8f 	bl	8006b78 <UTIL_SEQ_WaitEvt>
  return;
 800625a:	bf00      	nop
}
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b084      	sub	sp, #16
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	3308      	adds	r3, #8
 8006274:	4618      	mov	r0, r3
 8006276:	f7fe fe59 	bl	8004f2c <SVCCTL_UserEvtRx>
 800627a:	4603      	mov	r3, r0
 800627c:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800627e:	7afb      	ldrb	r3, [r7, #11]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2201      	movs	r2, #1
 8006288:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800628a:	e002      	b.n	8006292 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	701a      	strb	r2, [r3, #0]
}
 8006292:	bf00      	nop
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b084      	sub	sp, #16
 800629e:	af00      	add	r7, sp, #0
 80062a0:	4603      	mov	r3, r0
 80062a2:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 80062a4:	79fb      	ldrb	r3, [r7, #7]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <BLE_StatusNot+0x16>
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d006      	beq.n	80062bc <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 80062ae:	e00b      	b.n	80062c8 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80062b0:	2307      	movs	r3, #7
 80062b2:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 fc05 	bl	8006ac4 <UTIL_SEQ_PauseTask>
      break;
 80062ba:	e005      	b.n	80062c8 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80062bc:	2307      	movs	r3, #7
 80062be:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 fc1d 	bl	8006b00 <UTIL_SEQ_ResumeTask>
      break;
 80062c6:	bf00      	nop
  }
  return;
 80062c8:	bf00      	nop
}
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d016      	beq.n	800630e <P2PS_STM_App_Notification+0x3e>
 80062e0:	2b03      	cmp	r3, #3
 80062e2:	d002      	beq.n	80062ea <P2PS_STM_App_Notification+0x1a>
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d014      	beq.n	8006312 <P2PS_STM_App_Notification+0x42>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 80062e8:	e014      	b.n	8006314 <P2PS_STM_App_Notification+0x44>
    	if(pNotification->DataTransfered.pPayload[1] == 0x01) {
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	3301      	adds	r3, #1
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d105      	bne.n	8006302 <P2PS_STM_App_Notification+0x32>
    	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 80062f6:	2201      	movs	r2, #1
 80062f8:	2120      	movs	r1, #32
 80062fa:	4808      	ldr	r0, [pc, #32]	; (800631c <P2PS_STM_App_Notification+0x4c>)
 80062fc:	f7fb fdd4 	bl	8001ea8 <HAL_GPIO_WritePin>
      break;
 8006300:	e008      	b.n	8006314 <P2PS_STM_App_Notification+0x44>
    	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8006302:	2200      	movs	r2, #0
 8006304:	2120      	movs	r1, #32
 8006306:	4805      	ldr	r0, [pc, #20]	; (800631c <P2PS_STM_App_Notification+0x4c>)
 8006308:	f7fb fdce 	bl	8001ea8 <HAL_GPIO_WritePin>
      break;
 800630c:	e002      	b.n	8006314 <P2PS_STM_App_Notification+0x44>
      break;
 800630e:	bf00      	nop
 8006310:	e000      	b.n	8006314 <P2PS_STM_App_Notification+0x44>
      break;
 8006312:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 8006314:	bf00      	nop
}
 8006316:	3708      	adds	r7, #8
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	48000400 	.word	0x48000400

08006320 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d002      	beq.n	8006336 <P2PS_APP_Notification+0x16>
 8006330:	2b01      	cmp	r3, #1
 8006332:	d002      	beq.n	800633a <P2PS_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 8006334:	e002      	b.n	800633c <P2PS_APP_Notification+0x1c>
    break;
 8006336:	bf00      	nop
 8006338:	e000      	b.n	800633c <P2PS_APP_Notification+0x1c>
    break;
 800633a:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800633c:	bf00      	nop
}
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
	UTIL_SEQ_RegTask( CFG_TASK_SW1_BUTTON_PUSHED_ID, 0, P2PS_Send_Notification );
 800634c:	4a03      	ldr	r2, [pc, #12]	; (800635c <P2PS_APP_Init+0x14>)
 800634e:	2100      	movs	r1, #0
 8006350:	2001      	movs	r0, #1
 8006352:	f000 fb6d 	bl	8006a30 <UTIL_SEQ_RegTask>
/* USER CODE END P2PS_APP_Init */
  return;
 8006356:	bf00      	nop
}
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	08006361 	.word	0x08006361

08006360 <P2PS_Send_Notification>:

/* USER CODE BEGIN FD */
static void P2PS_Send_Notification(void)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	af00      	add	r7, sp, #0
  /* Update P2P_NOTIFY characteristic */
  P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, 0x00);
 8006364:	2100      	movs	r1, #0
 8006366:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800636a:	f7fe fd05 	bl	8004d78 <P2PS_STM_App_Update_Char>

  return;
 800636e:	bf00      	nop
}
 8006370:	bd80      	pop	{r7, pc}
	...

08006374 <LL_PWR_EnableBootC2>:
{
 8006374:	b480      	push	{r7}
 8006376:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8006378:	4b05      	ldr	r3, [pc, #20]	; (8006390 <LL_PWR_EnableBootC2+0x1c>)
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	4a04      	ldr	r2, [pc, #16]	; (8006390 <LL_PWR_EnableBootC2+0x1c>)
 800637e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006382:	60d3      	str	r3, [r2, #12]
}
 8006384:	bf00      	nop
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	58000400 	.word	0x58000400

08006394 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800639c:	4b06      	ldr	r3, [pc, #24]	; (80063b8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800639e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80063a2:	4905      	ldr	r1, [pc, #20]	; (80063b8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	58000800 	.word	0x58000800

080063bc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80063c4:	4b05      	ldr	r3, [pc, #20]	; (80063dc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80063c6:	6a1a      	ldr	r2, [r3, #32]
 80063c8:	4904      	ldr	r1, [pc, #16]	; (80063dc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	620b      	str	r3, [r1, #32]
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	58000800 	.word	0x58000800

080063e0 <LL_AHB3_GRP1_EnableClock>:
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80063e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80063f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4013      	ands	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006404:	68fb      	ldr	r3, [r7, #12]
}
 8006406:	bf00      	nop
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	601a      	str	r2, [r3, #0]
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8006432:	b480      	push	{r7}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f043 0201 	orr.w	r2, r3, #1
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	601a      	str	r2, [r3, #0]
}
 8006446:	bf00      	nop
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	041b      	lsls	r3, r3, #16
 8006464:	43db      	mvns	r3, r3
 8006466:	401a      	ands	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	605a      	str	r2, [r3, #4]
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	041b      	lsls	r3, r3, #16
 800648a:	431a      	orrs	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	605a      	str	r2, [r3, #4]
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	43db      	mvns	r3, r3
 80064ae:	401a      	ands	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	605a      	str	r2, [r3, #4]
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	609a      	str	r2, [r3, #8]
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	041a      	lsls	r2, r3, #16
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	609a      	str	r2, [r3, #8]
}
 80064ee:	bf00      	nop
 80064f0:	370c      	adds	r7, #12
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b083      	sub	sp, #12
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68da      	ldr	r2, [r3, #12]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	4013      	ands	r3, r2
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	429a      	cmp	r2, r3
 8006510:	d101      	bne.n	8006516 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8006512:	2301      	movs	r3, #1
 8006514:	e000      	b.n	8006518 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	69da      	ldr	r2, [r3, #28]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	4013      	ands	r3, r2
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	429a      	cmp	r2, r3
 800653a:	d101      	bne.n	8006540 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800653c:	2301      	movs	r3, #1
 800653e:	e000      	b.n	8006542 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
	...

08006550 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8006554:	2102      	movs	r1, #2
 8006556:	4819      	ldr	r0, [pc, #100]	; (80065bc <HW_IPCC_Rx_Handler+0x6c>)
 8006558:	f7ff ffe4 	bl	8006524 <LL_C2_IPCC_IsActiveFlag_CHx>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d009      	beq.n	8006576 <HW_IPCC_Rx_Handler+0x26>
 8006562:	4b16      	ldr	r3, [pc, #88]	; (80065bc <HW_IPCC_Rx_Handler+0x6c>)
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	43db      	mvns	r3, r3
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8006570:	f000 f8e6 	bl	8006740 <HW_IPCC_SYS_EvtHandler>
 8006574:	e01f      	b.n	80065b6 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8006576:	2101      	movs	r1, #1
 8006578:	4810      	ldr	r0, [pc, #64]	; (80065bc <HW_IPCC_Rx_Handler+0x6c>)
 800657a:	f7ff ffd3 	bl	8006524 <LL_C2_IPCC_IsActiveFlag_CHx>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d008      	beq.n	8006596 <HW_IPCC_Rx_Handler+0x46>
 8006584:	4b0d      	ldr	r3, [pc, #52]	; (80065bc <HW_IPCC_Rx_Handler+0x6c>)
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	2b00      	cmp	r3, #0
 800658e:	d102      	bne.n	8006596 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8006590:	f000 f89a 	bl	80066c8 <HW_IPCC_BLE_EvtHandler>
 8006594:	e00f      	b.n	80065b6 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8006596:	2108      	movs	r1, #8
 8006598:	4808      	ldr	r0, [pc, #32]	; (80065bc <HW_IPCC_Rx_Handler+0x6c>)
 800659a:	f7ff ffc3 	bl	8006524 <LL_C2_IPCC_IsActiveFlag_CHx>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d009      	beq.n	80065b8 <HW_IPCC_Rx_Handler+0x68>
 80065a4:	4b05      	ldr	r3, [pc, #20]	; (80065bc <HW_IPCC_Rx_Handler+0x6c>)
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	43db      	mvns	r3, r3
 80065aa:	f003 0308 	and.w	r3, r3, #8
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80065b2:	f000 f911 	bl	80067d8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80065b6:	bf00      	nop
 80065b8:	bf00      	nop
}
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	58000c00 	.word	0x58000c00

080065c0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80065c4:	2102      	movs	r1, #2
 80065c6:	4822      	ldr	r0, [pc, #136]	; (8006650 <HW_IPCC_Tx_Handler+0x90>)
 80065c8:	f7ff ff97 	bl	80064fa <LL_C1_IPCC_IsActiveFlag_CHx>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d109      	bne.n	80065e6 <HW_IPCC_Tx_Handler+0x26>
 80065d2:	4b1f      	ldr	r3, [pc, #124]	; (8006650 <HW_IPCC_Tx_Handler+0x90>)
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	43db      	mvns	r3, r3
 80065d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d002      	beq.n	80065e6 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80065e0:	f000 f8a2 	bl	8006728 <HW_IPCC_SYS_CmdEvtHandler>
 80065e4:	e031      	b.n	800664a <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80065e6:	2102      	movs	r1, #2
 80065e8:	4819      	ldr	r0, [pc, #100]	; (8006650 <HW_IPCC_Tx_Handler+0x90>)
 80065ea:	f7ff ff86 	bl	80064fa <LL_C1_IPCC_IsActiveFlag_CHx>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d109      	bne.n	8006608 <HW_IPCC_Tx_Handler+0x48>
 80065f4:	4b16      	ldr	r3, [pc, #88]	; (8006650 <HW_IPCC_Tx_Handler+0x90>)
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	43db      	mvns	r3, r3
 80065fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8006602:	f000 f891 	bl	8006728 <HW_IPCC_SYS_CmdEvtHandler>
 8006606:	e020      	b.n	800664a <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8006608:	2108      	movs	r1, #8
 800660a:	4811      	ldr	r0, [pc, #68]	; (8006650 <HW_IPCC_Tx_Handler+0x90>)
 800660c:	f7ff ff75 	bl	80064fa <LL_C1_IPCC_IsActiveFlag_CHx>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d109      	bne.n	800662a <HW_IPCC_Tx_Handler+0x6a>
 8006616:	4b0e      	ldr	r3, [pc, #56]	; (8006650 <HW_IPCC_Tx_Handler+0x90>)
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	43db      	mvns	r3, r3
 800661c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8006624:	f000 f8ba 	bl	800679c <HW_IPCC_MM_FreeBufHandler>
 8006628:	e00f      	b.n	800664a <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800662a:	2120      	movs	r1, #32
 800662c:	4808      	ldr	r0, [pc, #32]	; (8006650 <HW_IPCC_Tx_Handler+0x90>)
 800662e:	f7ff ff64 	bl	80064fa <LL_C1_IPCC_IsActiveFlag_CHx>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d109      	bne.n	800664c <HW_IPCC_Tx_Handler+0x8c>
 8006638:	4b05      	ldr	r3, [pc, #20]	; (8006650 <HW_IPCC_Tx_Handler+0x90>)
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	43db      	mvns	r3, r3
 800663e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8006646:	f000 f84b 	bl	80066e0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800664a:	bf00      	nop
 800664c:	bf00      	nop
}
 800664e:	bd80      	pop	{r7, pc}
 8006650:	58000c00 	.word	0x58000c00

08006654 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8006658:	f44f 7000 	mov.w	r0, #512	; 0x200
 800665c:	f7ff fe9a 	bl	8006394 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8006660:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006664:	f7ff feaa 	bl	80063bc <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8006668:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800666a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800666c:	f7ff fe82 	bl	8006374 <LL_PWR_EnableBootC2>

  return;
 8006670:	bf00      	nop
}
 8006672:	bd80      	pop	{r7, pc}

08006674 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8006674:	b580      	push	{r7, lr}
 8006676:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8006678:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800667c:	f7ff feb0 	bl	80063e0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8006680:	4806      	ldr	r0, [pc, #24]	; (800669c <HW_IPCC_Init+0x28>)
 8006682:	f7ff fed6 	bl	8006432 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8006686:	4805      	ldr	r0, [pc, #20]	; (800669c <HW_IPCC_Init+0x28>)
 8006688:	f7ff fec3 	bl	8006412 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800668c:	202c      	movs	r0, #44	; 0x2c
 800668e:	f7fb fa56 	bl	8001b3e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8006692:	202d      	movs	r0, #45	; 0x2d
 8006694:	f7fb fa53 	bl	8001b3e <HAL_NVIC_EnableIRQ>

  return;
 8006698:	bf00      	nop
}
 800669a:	bd80      	pop	{r7, pc}
 800669c:	58000c00 	.word	0x58000c00

080066a0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80066a4:	2101      	movs	r1, #1
 80066a6:	4802      	ldr	r0, [pc, #8]	; (80066b0 <HW_IPCC_BLE_Init+0x10>)
 80066a8:	f7ff fef8 	bl	800649c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80066ac:	bf00      	nop
}
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	58000c00 	.word	0x58000c00

080066b4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80066b8:	2101      	movs	r1, #1
 80066ba:	4802      	ldr	r0, [pc, #8]	; (80066c4 <HW_IPCC_BLE_SendCmd+0x10>)
 80066bc:	f7ff ff0e 	bl	80064dc <LL_C1_IPCC_SetFlag_CHx>

  return;
 80066c0:	bf00      	nop
}
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	58000c00 	.word	0x58000c00

080066c8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80066cc:	f7ff f872 	bl	80057b4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80066d0:	2101      	movs	r1, #1
 80066d2:	4802      	ldr	r0, [pc, #8]	; (80066dc <HW_IPCC_BLE_EvtHandler+0x14>)
 80066d4:	f7ff fef4 	bl	80064c0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80066d8:	bf00      	nop
}
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	58000c00 	.word	0x58000c00

080066e0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80066e4:	2120      	movs	r1, #32
 80066e6:	4803      	ldr	r0, [pc, #12]	; (80066f4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80066e8:	f7ff fec6 	bl	8006478 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80066ec:	f7ff f87e 	bl	80057ec <HW_IPCC_BLE_AclDataAckNot>

  return;
 80066f0:	bf00      	nop
}
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	58000c00 	.word	0x58000c00

080066f8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80066fc:	2102      	movs	r1, #2
 80066fe:	4802      	ldr	r0, [pc, #8]	; (8006708 <HW_IPCC_SYS_Init+0x10>)
 8006700:	f7ff fecc 	bl	800649c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006704:	bf00      	nop
}
 8006706:	bd80      	pop	{r7, pc}
 8006708:	58000c00 	.word	0x58000c00

0800670c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006710:	2102      	movs	r1, #2
 8006712:	4804      	ldr	r0, [pc, #16]	; (8006724 <HW_IPCC_SYS_SendCmd+0x18>)
 8006714:	f7ff fee2 	bl	80064dc <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006718:	2102      	movs	r1, #2
 800671a:	4802      	ldr	r0, [pc, #8]	; (8006724 <HW_IPCC_SYS_SendCmd+0x18>)
 800671c:	f7ff fe99 	bl	8006452 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8006720:	bf00      	nop
}
 8006722:	bd80      	pop	{r7, pc}
 8006724:	58000c00 	.word	0x58000c00

08006728 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800672c:	2102      	movs	r1, #2
 800672e:	4803      	ldr	r0, [pc, #12]	; (800673c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8006730:	f7ff fea2 	bl	8006478 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8006734:	f7ff f8a2 	bl	800587c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8006738:	bf00      	nop
}
 800673a:	bd80      	pop	{r7, pc}
 800673c:	58000c00 	.word	0x58000c00

08006740 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8006744:	f7ff f8aa 	bl	800589c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8006748:	2102      	movs	r1, #2
 800674a:	4802      	ldr	r0, [pc, #8]	; (8006754 <HW_IPCC_SYS_EvtHandler+0x14>)
 800674c:	f7ff feb8 	bl	80064c0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006750:	bf00      	nop
}
 8006752:	bd80      	pop	{r7, pc}
 8006754:	58000c00 	.word	0x58000c00

08006758 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8006760:	2108      	movs	r1, #8
 8006762:	480c      	ldr	r0, [pc, #48]	; (8006794 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006764:	f7ff fec9 	bl	80064fa <LL_C1_IPCC_IsActiveFlag_CHx>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d007      	beq.n	800677e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800676e:	4a0a      	ldr	r2, [pc, #40]	; (8006798 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006774:	2108      	movs	r1, #8
 8006776:	4807      	ldr	r0, [pc, #28]	; (8006794 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006778:	f7ff fe6b 	bl	8006452 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800677c:	e006      	b.n	800678c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006782:	2108      	movs	r1, #8
 8006784:	4803      	ldr	r0, [pc, #12]	; (8006794 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006786:	f7ff fea9 	bl	80064dc <LL_C1_IPCC_SetFlag_CHx>
  return;
 800678a:	bf00      	nop
}
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	58000c00 	.word	0x58000c00
 8006798:	2000024c 	.word	0x2000024c

0800679c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80067a0:	2108      	movs	r1, #8
 80067a2:	4806      	ldr	r0, [pc, #24]	; (80067bc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80067a4:	f7ff fe68 	bl	8006478 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80067a8:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80067ae:	2108      	movs	r1, #8
 80067b0:	4802      	ldr	r0, [pc, #8]	; (80067bc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80067b2:	f7ff fe93 	bl	80064dc <LL_C1_IPCC_SetFlag_CHx>

  return;
 80067b6:	bf00      	nop
}
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	58000c00 	.word	0x58000c00
 80067c0:	2000024c 	.word	0x2000024c

080067c4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80067c8:	2108      	movs	r1, #8
 80067ca:	4802      	ldr	r0, [pc, #8]	; (80067d4 <HW_IPCC_TRACES_Init+0x10>)
 80067cc:	f7ff fe66 	bl	800649c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80067d0:	bf00      	nop
}
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	58000c00 	.word	0x58000c00

080067d8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80067dc:	f7ff f916 	bl	8005a0c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80067e0:	2108      	movs	r1, #8
 80067e2:	4802      	ldr	r0, [pc, #8]	; (80067ec <HW_IPCC_TRACES_EvtHandler+0x14>)
 80067e4:	f7ff fe6c 	bl	80064c0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80067e8:	bf00      	nop
}
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	58000c00 	.word	0x58000c00

080067f0 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 80067f0:	b480      	push	{r7}
 80067f2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80067f4:	4b05      	ldr	r3, [pc, #20]	; (800680c <UTIL_LPM_Init+0x1c>)
 80067f6:	2200      	movs	r2, #0
 80067f8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80067fa:	4b05      	ldr	r3, [pc, #20]	; (8006810 <UTIL_LPM_Init+0x20>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8006800:	bf00      	nop
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	20000250 	.word	0x20000250
 8006810:	20000254 	.word	0x20000254

08006814 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006820:	f3ef 8310 	mrs	r3, PRIMASK
 8006824:	613b      	str	r3, [r7, #16]
  return(result);
 8006826:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8006828:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800682a:	b672      	cpsid	i
  
  switch(state)
 800682c:	78fb      	ldrb	r3, [r7, #3]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d009      	beq.n	8006846 <UTIL_LPM_SetOffMode+0x32>
 8006832:	2b01      	cmp	r3, #1
 8006834:	d000      	beq.n	8006838 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 8006836:	e00e      	b.n	8006856 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8006838:	4b0c      	ldr	r3, [pc, #48]	; (800686c <UTIL_LPM_SetOffMode+0x58>)
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4313      	orrs	r3, r2
 8006840:	4a0a      	ldr	r2, [pc, #40]	; (800686c <UTIL_LPM_SetOffMode+0x58>)
 8006842:	6013      	str	r3, [r2, #0]
      break;
 8006844:	e007      	b.n	8006856 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	43da      	mvns	r2, r3
 800684a:	4b08      	ldr	r3, [pc, #32]	; (800686c <UTIL_LPM_SetOffMode+0x58>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4013      	ands	r3, r2
 8006850:	4a06      	ldr	r2, [pc, #24]	; (800686c <UTIL_LPM_SetOffMode+0x58>)
 8006852:	6013      	str	r3, [r2, #0]
      break;
 8006854:	bf00      	nop
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8006860:	bf00      	nop
 8006862:	371c      	adds	r7, #28
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	20000254 	.word	0x20000254

08006870 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b08c      	sub	sp, #48	; 0x30
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8006878:	4b65      	ldr	r3, [pc, #404]	; (8006a10 <UTIL_SEQ_Run+0x1a0>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800687e:	4b64      	ldr	r3, [pc, #400]	; (8006a10 <UTIL_SEQ_Run+0x1a0>)
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4013      	ands	r3, r2
 8006886:	4a62      	ldr	r2, [pc, #392]	; (8006a10 <UTIL_SEQ_Run+0x1a0>)
 8006888:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800688a:	e081      	b.n	8006990 <UTIL_SEQ_Run+0x120>
  {
    counter = 0U;
 800688c:	2300      	movs	r3, #0
 800688e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8006890:	e002      	b.n	8006898 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 8006892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006894:	3301      	adds	r3, #1
 8006896:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8006898:	4a5e      	ldr	r2, [pc, #376]	; (8006a14 <UTIL_SEQ_Run+0x1a4>)
 800689a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80068a0:	4b5d      	ldr	r3, [pc, #372]	; (8006a18 <UTIL_SEQ_Run+0x1a8>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	401a      	ands	r2, r3
 80068a6:	4b5a      	ldr	r3, [pc, #360]	; (8006a10 <UTIL_SEQ_Run+0x1a0>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4013      	ands	r3, r2
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d0f0      	beq.n	8006892 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 80068b0:	4a58      	ldr	r2, [pc, #352]	; (8006a14 <UTIL_SEQ_Run+0x1a4>)
 80068b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80068b8:	4b57      	ldr	r3, [pc, #348]	; (8006a18 <UTIL_SEQ_Run+0x1a8>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	401a      	ands	r2, r3
 80068be:	4b54      	ldr	r3, [pc, #336]	; (8006a10 <UTIL_SEQ_Run+0x1a0>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4013      	ands	r3, r2
 80068c4:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80068c6:	4a53      	ldr	r2, [pc, #332]	; (8006a14 <UTIL_SEQ_Run+0x1a4>)
 80068c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ca:	00db      	lsls	r3, r3, #3
 80068cc:	4413      	add	r3, r2
 80068ce:	685a      	ldr	r2, [r3, #4]
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	4013      	ands	r3, r2
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d106      	bne.n	80068e6 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80068d8:	4a4e      	ldr	r2, [pc, #312]	; (8006a14 <UTIL_SEQ_Run+0x1a4>)
 80068da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068dc:	00db      	lsls	r3, r3, #3
 80068de:	4413      	add	r3, r2
 80068e0:	f04f 32ff 	mov.w	r2, #4294967295
 80068e4:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80068e6:	4a4b      	ldr	r2, [pc, #300]	; (8006a14 <UTIL_SEQ_Run+0x1a4>)
 80068e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ea:	00db      	lsls	r3, r3, #3
 80068ec:	4413      	add	r3, r2
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	4013      	ands	r3, r2
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 f98f 	bl	8006c18 <SEQ_BitPosition>
 80068fa:	4603      	mov	r3, r0
 80068fc:	461a      	mov	r2, r3
 80068fe:	4b47      	ldr	r3, [pc, #284]	; (8006a1c <UTIL_SEQ_Run+0x1ac>)
 8006900:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8006902:	4a44      	ldr	r2, [pc, #272]	; (8006a14 <UTIL_SEQ_Run+0x1a4>)
 8006904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	4413      	add	r3, r2
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	4b43      	ldr	r3, [pc, #268]	; (8006a1c <UTIL_SEQ_Run+0x1ac>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2101      	movs	r1, #1
 8006912:	fa01 f303 	lsl.w	r3, r1, r3
 8006916:	43db      	mvns	r3, r3
 8006918:	401a      	ands	r2, r3
 800691a:	493e      	ldr	r1, [pc, #248]	; (8006a14 <UTIL_SEQ_Run+0x1a4>)
 800691c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691e:	00db      	lsls	r3, r3, #3
 8006920:	440b      	add	r3, r1
 8006922:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006924:	f3ef 8310 	mrs	r3, PRIMASK
 8006928:	61bb      	str	r3, [r7, #24]
  return(result);
 800692a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800692c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800692e:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8006930:	4b3a      	ldr	r3, [pc, #232]	; (8006a1c <UTIL_SEQ_Run+0x1ac>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2201      	movs	r2, #1
 8006936:	fa02 f303 	lsl.w	r3, r2, r3
 800693a:	43da      	mvns	r2, r3
 800693c:	4b38      	ldr	r3, [pc, #224]	; (8006a20 <UTIL_SEQ_Run+0x1b0>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4013      	ands	r3, r2
 8006942:	4a37      	ldr	r2, [pc, #220]	; (8006a20 <UTIL_SEQ_Run+0x1b0>)
 8006944:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8006946:	2302      	movs	r3, #2
 8006948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800694a:	e013      	b.n	8006974 <UTIL_SEQ_Run+0x104>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800694c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694e:	3b01      	subs	r3, #1
 8006950:	4a30      	ldr	r2, [pc, #192]	; (8006a14 <UTIL_SEQ_Run+0x1a4>)
 8006952:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8006956:	4b31      	ldr	r3, [pc, #196]	; (8006a1c <UTIL_SEQ_Run+0x1ac>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2201      	movs	r2, #1
 800695c:	fa02 f303 	lsl.w	r3, r2, r3
 8006960:	43da      	mvns	r2, r3
 8006962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006964:	3b01      	subs	r3, #1
 8006966:	400a      	ands	r2, r1
 8006968:	492a      	ldr	r1, [pc, #168]	; (8006a14 <UTIL_SEQ_Run+0x1a4>)
 800696a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800696e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006970:	3b01      	subs	r3, #1
 8006972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1e8      	bne.n	800694c <UTIL_SEQ_Run+0xdc>
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8006984:	4b25      	ldr	r3, [pc, #148]	; (8006a1c <UTIL_SEQ_Run+0x1ac>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a26      	ldr	r2, [pc, #152]	; (8006a24 <UTIL_SEQ_Run+0x1b4>)
 800698a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800698e:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8006990:	4b23      	ldr	r3, [pc, #140]	; (8006a20 <UTIL_SEQ_Run+0x1b0>)
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	4b20      	ldr	r3, [pc, #128]	; (8006a18 <UTIL_SEQ_Run+0x1a8>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	401a      	ands	r2, r3
 800699a:	4b1d      	ldr	r3, [pc, #116]	; (8006a10 <UTIL_SEQ_Run+0x1a0>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4013      	ands	r3, r2
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d007      	beq.n	80069b4 <UTIL_SEQ_Run+0x144>
 80069a4:	4b20      	ldr	r3, [pc, #128]	; (8006a28 <UTIL_SEQ_Run+0x1b8>)
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	4b20      	ldr	r3, [pc, #128]	; (8006a2c <UTIL_SEQ_Run+0x1bc>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4013      	ands	r3, r2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f43f af6c 	beq.w	800688c <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80069b4:	4b19      	ldr	r3, [pc, #100]	; (8006a1c <UTIL_SEQ_Run+0x1ac>)
 80069b6:	f04f 32ff 	mov.w	r2, #4294967295
 80069ba:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80069bc:	f000 f91e 	bl	8006bfc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069c0:	f3ef 8310 	mrs	r3, PRIMASK
 80069c4:	613b      	str	r3, [r7, #16]
  return(result);
 80069c6:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80069c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80069ca:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 80069cc:	4b14      	ldr	r3, [pc, #80]	; (8006a20 <UTIL_SEQ_Run+0x1b0>)
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	4b11      	ldr	r3, [pc, #68]	; (8006a18 <UTIL_SEQ_Run+0x1a8>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	401a      	ands	r2, r3
 80069d6:	4b0e      	ldr	r3, [pc, #56]	; (8006a10 <UTIL_SEQ_Run+0x1a0>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4013      	ands	r3, r2
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d108      	bne.n	80069f2 <UTIL_SEQ_Run+0x182>
 80069e0:	4b11      	ldr	r3, [pc, #68]	; (8006a28 <UTIL_SEQ_Run+0x1b8>)
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	4b11      	ldr	r3, [pc, #68]	; (8006a2c <UTIL_SEQ_Run+0x1bc>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4013      	ands	r3, r2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <UTIL_SEQ_Run+0x182>
  {
	UTIL_SEQ_Idle( );
 80069ee:	f7f9 fc8c 	bl	800030a <UTIL_SEQ_Idle>
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 80069fc:	f000 f905 	bl	8006c0a <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8006a00:	4a03      	ldr	r2, [pc, #12]	; (8006a10 <UTIL_SEQ_Run+0x1a0>)
 8006a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a04:	6013      	str	r3, [r2, #0]

  return;
 8006a06:	bf00      	nop
}
 8006a08:	3730      	adds	r7, #48	; 0x30
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	20000024 	.word	0x20000024
 8006a14:	200002e8 	.word	0x200002e8
 8006a18:	20000020 	.word	0x20000020
 8006a1c:	20000264 	.word	0x20000264
 8006a20:	20000258 	.word	0x20000258
 8006a24:	20000268 	.word	0x20000268
 8006a28:	2000025c 	.word	0x2000025c
 8006a2c:	20000260 	.word	0x20000260

08006a30 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b088      	sub	sp, #32
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8006a40:	617b      	str	r3, [r7, #20]
  return(result);
 8006a42:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8006a44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a46:	b672      	cpsid	i

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 f8e5 	bl	8006c18 <SEQ_BitPosition>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	4619      	mov	r1, r3
 8006a52:	4a06      	ldr	r2, [pc, #24]	; (8006a6c <UTIL_SEQ_RegTask+0x3c>)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8006a64:	bf00      	nop
}
 8006a66:	3720      	adds	r7, #32
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	20000268 	.word	0x20000268

08006a70 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8006a70:	b480      	push	{r7}
 8006a72:	b087      	sub	sp, #28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a7a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a80:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006a82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a84:	b672      	cpsid	i

  TaskSet |= TaskId_bm;
 8006a86:	4b0d      	ldr	r3, [pc, #52]	; (8006abc <UTIL_SEQ_SetTask+0x4c>)
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	4a0b      	ldr	r2, [pc, #44]	; (8006abc <UTIL_SEQ_SetTask+0x4c>)
 8006a90:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8006a92:	4a0b      	ldr	r2, [pc, #44]	; (8006ac0 <UTIL_SEQ_SetTask+0x50>)
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	431a      	orrs	r2, r3
 8006a9e:	4908      	ldr	r1, [pc, #32]	; (8006ac0 <UTIL_SEQ_SetTask+0x50>)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8006ab0:	bf00      	nop
}
 8006ab2:	371c      	adds	r7, #28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	20000258 	.word	0x20000258
 8006ac0:	200002e8 	.word	0x200002e8

08006ac4 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b087      	sub	sp, #28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006acc:	f3ef 8310 	mrs	r3, PRIMASK
 8006ad0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006ad4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006ad6:	b672      	cpsid	i

  TaskMask &= (~TaskId_bm);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	43da      	mvns	r2, r3
 8006adc:	4b07      	ldr	r3, [pc, #28]	; (8006afc <UTIL_SEQ_PauseTask+0x38>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	4a06      	ldr	r2, [pc, #24]	; (8006afc <UTIL_SEQ_PauseTask+0x38>)
 8006ae4:	6013      	str	r3, [r2, #0]
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8006af0:	bf00      	nop
}
 8006af2:	371c      	adds	r7, #28
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	20000020 	.word	0x20000020

08006b00 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8006b00:	b480      	push	{r7}
 8006b02:	b087      	sub	sp, #28
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b08:	f3ef 8310 	mrs	r3, PRIMASK
 8006b0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006b10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006b12:	b672      	cpsid	i

  TaskMask |= TaskId_bm;
 8006b14:	4b08      	ldr	r3, [pc, #32]	; (8006b38 <UTIL_SEQ_ResumeTask+0x38>)
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	4a06      	ldr	r2, [pc, #24]	; (8006b38 <UTIL_SEQ_ResumeTask+0x38>)
 8006b1e:	6013      	str	r3, [r2, #0]
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8006b2a:	bf00      	nop
}
 8006b2c:	371c      	adds	r7, #28
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	20000020 	.word	0x20000020

08006b3c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b44:	f3ef 8310 	mrs	r3, PRIMASK
 8006b48:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006b4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006b4e:	b672      	cpsid	i

  EvtSet |= EvtId_bm;
 8006b50:	4b08      	ldr	r3, [pc, #32]	; (8006b74 <UTIL_SEQ_SetEvt+0x38>)
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	4a06      	ldr	r2, [pc, #24]	; (8006b74 <UTIL_SEQ_SetEvt+0x38>)
 8006b5a:	6013      	str	r3, [r2, #0]
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8006b66:	bf00      	nop
}
 8006b68:	371c      	adds	r7, #28
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	2000025c 	.word	0x2000025c

08006b78 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8006b80:	4b1b      	ldr	r3, [pc, #108]	; (8006bf0 <UTIL_SEQ_WaitEvt+0x78>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8006b86:	4b1a      	ldr	r3, [pc, #104]	; (8006bf0 <UTIL_SEQ_WaitEvt+0x78>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8e:	d102      	bne.n	8006b96 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 8006b90:	2300      	movs	r3, #0
 8006b92:	617b      	str	r3, [r7, #20]
 8006b94:	e005      	b.n	8006ba2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 8006b96:	4b16      	ldr	r3, [pc, #88]	; (8006bf0 <UTIL_SEQ_WaitEvt+0x78>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba0:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8006ba2:	4b14      	ldr	r3, [pc, #80]	; (8006bf4 <UTIL_SEQ_WaitEvt+0x7c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 8006ba8:	4a12      	ldr	r2, [pc, #72]	; (8006bf4 <UTIL_SEQ_WaitEvt+0x7c>)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 8006bae:	e005      	b.n	8006bbc <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 8006bb0:	4b10      	ldr	r3, [pc, #64]	; (8006bf4 <UTIL_SEQ_WaitEvt+0x7c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	6978      	ldr	r0, [r7, #20]
 8006bb8:	f7f9 fbae 	bl	8000318 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 8006bbc:	4b0e      	ldr	r3, [pc, #56]	; (8006bf8 <UTIL_SEQ_WaitEvt+0x80>)
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	4b0c      	ldr	r3, [pc, #48]	; (8006bf4 <UTIL_SEQ_WaitEvt+0x7c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d0f2      	beq.n	8006bb0 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8006bca:	4a09      	ldr	r2, [pc, #36]	; (8006bf0 <UTIL_SEQ_WaitEvt+0x78>)
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 8006bd0:	4b08      	ldr	r3, [pc, #32]	; (8006bf4 <UTIL_SEQ_WaitEvt+0x7c>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	43da      	mvns	r2, r3
 8006bd6:	4b08      	ldr	r3, [pc, #32]	; (8006bf8 <UTIL_SEQ_WaitEvt+0x80>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4013      	ands	r3, r2
 8006bdc:	4a06      	ldr	r2, [pc, #24]	; (8006bf8 <UTIL_SEQ_WaitEvt+0x80>)
 8006bde:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 8006be0:	4a04      	ldr	r2, [pc, #16]	; (8006bf4 <UTIL_SEQ_WaitEvt+0x7c>)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6013      	str	r3, [r2, #0]

  return;
 8006be6:	bf00      	nop
}
 8006be8:	3718      	adds	r7, #24
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20000264 	.word	0x20000264
 8006bf4:	20000260 	.word	0x20000260
 8006bf8:	2000025c 	.word	0x2000025c

08006bfc <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8006c00:	bf00      	nop
}
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8006c0e:	bf00      	nop
}
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	0c1b      	lsrs	r3, r3, #16
 8006c28:	041b      	lsls	r3, r3, #16
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d104      	bne.n	8006c38 <SEQ_BitPosition+0x20>
 8006c2e:	2310      	movs	r3, #16
 8006c30:	73fb      	strb	r3, [r7, #15]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	041b      	lsls	r3, r3, #16
 8006c36:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d105      	bne.n	8006c4e <SEQ_BitPosition+0x36>
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
 8006c44:	3308      	adds	r3, #8
 8006c46:	73fb      	strb	r3, [r7, #15]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	021b      	lsls	r3, r3, #8
 8006c4c:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d105      	bne.n	8006c64 <SEQ_BitPosition+0x4c>
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	73fb      	strb	r3, [r7, #15]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	011b      	lsls	r3, r3, #4
 8006c62:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	0f1b      	lsrs	r3, r3, #28
 8006c68:	4a07      	ldr	r2, [pc, #28]	; (8006c88 <SEQ_BitPosition+0x70>)
 8006c6a:	5cd2      	ldrb	r2, [r2, r3]
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
 8006c6e:	4413      	add	r3, r2
 8006c70:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
 8006c74:	f1c3 031f 	rsb	r3, r3, #31
 8006c78:	b2db      	uxtb	r3, r3
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3714      	adds	r7, #20
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	08006f54 	.word	0x08006f54

08006c8c <__libc_init_array>:
 8006c8c:	b570      	push	{r4, r5, r6, lr}
 8006c8e:	4e0d      	ldr	r6, [pc, #52]	; (8006cc4 <__libc_init_array+0x38>)
 8006c90:	4c0d      	ldr	r4, [pc, #52]	; (8006cc8 <__libc_init_array+0x3c>)
 8006c92:	1ba4      	subs	r4, r4, r6
 8006c94:	10a4      	asrs	r4, r4, #2
 8006c96:	2500      	movs	r5, #0
 8006c98:	42a5      	cmp	r5, r4
 8006c9a:	d109      	bne.n	8006cb0 <__libc_init_array+0x24>
 8006c9c:	4e0b      	ldr	r6, [pc, #44]	; (8006ccc <__libc_init_array+0x40>)
 8006c9e:	4c0c      	ldr	r4, [pc, #48]	; (8006cd0 <__libc_init_array+0x44>)
 8006ca0:	f000 f82c 	bl	8006cfc <_init>
 8006ca4:	1ba4      	subs	r4, r4, r6
 8006ca6:	10a4      	asrs	r4, r4, #2
 8006ca8:	2500      	movs	r5, #0
 8006caa:	42a5      	cmp	r5, r4
 8006cac:	d105      	bne.n	8006cba <__libc_init_array+0x2e>
 8006cae:	bd70      	pop	{r4, r5, r6, pc}
 8006cb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006cb4:	4798      	blx	r3
 8006cb6:	3501      	adds	r5, #1
 8006cb8:	e7ee      	b.n	8006c98 <__libc_init_array+0xc>
 8006cba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006cbe:	4798      	blx	r3
 8006cc0:	3501      	adds	r5, #1
 8006cc2:	e7f2      	b.n	8006caa <__libc_init_array+0x1e>
 8006cc4:	08006f64 	.word	0x08006f64
 8006cc8:	08006f64 	.word	0x08006f64
 8006ccc:	08006f64 	.word	0x08006f64
 8006cd0:	08006f68 	.word	0x08006f68

08006cd4 <memcpy>:
 8006cd4:	b510      	push	{r4, lr}
 8006cd6:	1e43      	subs	r3, r0, #1
 8006cd8:	440a      	add	r2, r1
 8006cda:	4291      	cmp	r1, r2
 8006cdc:	d100      	bne.n	8006ce0 <memcpy+0xc>
 8006cde:	bd10      	pop	{r4, pc}
 8006ce0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ce4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ce8:	e7f7      	b.n	8006cda <memcpy+0x6>

08006cea <memset>:
 8006cea:	4402      	add	r2, r0
 8006cec:	4603      	mov	r3, r0
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d100      	bne.n	8006cf4 <memset+0xa>
 8006cf2:	4770      	bx	lr
 8006cf4:	f803 1b01 	strb.w	r1, [r3], #1
 8006cf8:	e7f9      	b.n	8006cee <memset+0x4>
	...

08006cfc <_init>:
 8006cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cfe:	bf00      	nop
 8006d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d02:	bc08      	pop	{r3}
 8006d04:	469e      	mov	lr, r3
 8006d06:	4770      	bx	lr

08006d08 <_fini>:
 8006d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0a:	bf00      	nop
 8006d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d0e:	bc08      	pop	{r3}
 8006d10:	469e      	mov	lr, r3
 8006d12:	4770      	bx	lr
